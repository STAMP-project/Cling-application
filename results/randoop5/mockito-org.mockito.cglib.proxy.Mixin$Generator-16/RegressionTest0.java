import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.mockito.cglib.core.AbstractClassGenerator abstractClassGenerator0 = org.mockito.cglib.core.AbstractClassGenerator.getCurrent();
        org.junit.Assert.assertNull(abstractClassGenerator0);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        java.lang.Class<?> wildcardClass8 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass4 = namingPolicy3.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Class[] classArray11 = new java.lang.Class[] { wildcardClass8, wildcardClass10 };
        generator5.setClasses(classArray11);
        java.lang.Class<?> wildcardClass13 = generator5.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator14.getNamingPolicy();
        java.lang.Class<?> wildcardClass18 = namingPolicy17.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        java.lang.Class<?> wildcardClass27 = generator19.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator39.getNamingPolicy();
        java.lang.Class<?> wildcardClass43 = namingPolicy42.getClass();
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass13, wildcardClass18, wildcardClass27, wildcardClass29, wildcardClass38, wildcardClass43 };
        generator0.setClasses(classArray44);
        java.lang.Class<?> wildcardClass46 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin5 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin6 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin3 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin5 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin3 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass3 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        java.lang.ClassLoader classLoader10 = null;
        generator0.setClassLoader(classLoader10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor2 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        java.lang.Class<?> wildcardClass10 = classArray7.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        java.lang.Class<?> wildcardClass6 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin3 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin5 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin9 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        java.lang.Class<?> wildcardClass16 = generator8.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator17.getNamingPolicy();
        java.lang.Class<?> wildcardClass21 = namingPolicy20.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Class[] classArray28 = new java.lang.Class[] { wildcardClass25, wildcardClass27 };
        generator22.setClasses(classArray28);
        java.lang.Class<?> wildcardClass30 = generator22.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        java.lang.Class<?> wildcardClass41 = generator33.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator42.getNamingPolicy();
        java.lang.Class<?> wildcardClass46 = namingPolicy45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass16, wildcardClass21, wildcardClass30, wildcardClass32, wildcardClass41, wildcardClass46 };
        generator3.setClasses(classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy52);
        java.lang.Class<?> wildcardClass54 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator2.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy5);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader54 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator10.setDelegates((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classLoader31);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin9 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        java.lang.Class<?> wildcardClass16 = generator8.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator17.getNamingPolicy();
        java.lang.Class<?> wildcardClass21 = namingPolicy20.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Class[] classArray28 = new java.lang.Class[] { wildcardClass25, wildcardClass27 };
        generator22.setClasses(classArray28);
        java.lang.Class<?> wildcardClass30 = generator22.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        java.lang.Class<?> wildcardClass41 = generator33.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator42.getNamingPolicy();
        java.lang.Class<?> wildcardClass46 = namingPolicy45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass16, wildcardClass21, wildcardClass30, wildcardClass32, wildcardClass41, wildcardClass46 };
        generator3.setClasses(classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.asm.ClassVisitor classVisitor50 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator26.getStrategy();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        generator26.setStrategy(generatorStrategy33);
        generator0.setStrategy(generatorStrategy33);
        org.mockito.asm.ClassVisitor classVisitor36 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass55, wildcardClass57 };
        generator52.setClasses(classArray58);
        generator51.setClasses(classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator61.getStrategy();
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator67.getStrategy();
        generator66.setStrategy(generatorStrategy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getAttemptLoad();
        java.lang.Object obj73 = new java.lang.Object();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.Object obj75 = new java.lang.Object();
        java.lang.Class<?> wildcardClass76 = obj75.getClass();
        java.lang.Class[] classArray77 = new java.lang.Class[] { wildcardClass74, wildcardClass76 };
        generator71.setClasses(classArray77);
        generator66.setDelegates((java.lang.Object[]) classArray77);
        generator61.setDelegates((java.lang.Object[]) classArray77);
        generator51.setDelegates((java.lang.Object[]) classArray77);
        java.lang.ClassLoader classLoader82 = generator51.getClassLoader();
        generator0.setClassLoader(classLoader82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin84 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator2.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.Class<?> wildcardClass7 = namingPolicy5.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy17);
        java.lang.Class<?> wildcardClass19 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        generator11.setDelegates((java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        java.lang.Class<?> wildcardClass26 = classArray22.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setUseCache(false);
        boolean boolean9 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        generator6.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        boolean boolean40 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator38.getStrategy();
        generator35.setStrategy(generatorStrategy41);
        generator6.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass57, wildcardClass59 };
        generator54.setClasses(classArray60);
        generator49.setDelegates((java.lang.Object[]) classArray60);
        generator44.setDelegates((java.lang.Object[]) classArray60);
        generator6.setClasses(classArray60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(generatorStrategy65);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator10.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        java.lang.Class<?> wildcardClass16 = namingPolicy14.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setUseCache(false);
        generator7.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        java.lang.Class<?> wildcardClass20 = generator12.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator21.getNamingPolicy();
        java.lang.Class<?> wildcardClass25 = namingPolicy24.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Class[] classArray32 = new java.lang.Class[] { wildcardClass29, wildcardClass31 };
        generator26.setClasses(classArray32);
        java.lang.Class<?> wildcardClass34 = generator26.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Class[] classArray43 = new java.lang.Class[] { wildcardClass40, wildcardClass42 };
        generator37.setClasses(classArray43);
        java.lang.Class<?> wildcardClass45 = generator37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator46.getNamingPolicy();
        java.lang.Class<?> wildcardClass50 = namingPolicy49.getClass();
        java.lang.Class[] classArray51 = new java.lang.Class[] { wildcardClass20, wildcardClass25, wildcardClass34, wildcardClass36, wildcardClass45, wildcardClass50 };
        generator7.setClasses(classArray51);
        generator4.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy56);
        generator0.setNamingPolicy(namingPolicy56);
        boolean boolean59 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setUseCache(false);
        boolean boolean63 = generator60.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator64.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator67.getStrategy();
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator73.getStrategy();
        generator72.setStrategy(generatorStrategy75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        java.lang.Object obj79 = new java.lang.Object();
        java.lang.Class<?> wildcardClass80 = obj79.getClass();
        java.lang.Object obj81 = new java.lang.Object();
        java.lang.Class<?> wildcardClass82 = obj81.getClass();
        java.lang.Class[] classArray83 = new java.lang.Class[] { wildcardClass80, wildcardClass82 };
        generator77.setClasses(classArray83);
        generator72.setDelegates((java.lang.Object[]) classArray83);
        generator67.setDelegates((java.lang.Object[]) classArray83);
        generator64.setDelegates((java.lang.Object[]) classArray83);
        generator60.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin.Generator generator89 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator89.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator92 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean93 = generator92.getUseCache();
        boolean boolean94 = generator92.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator92.getStrategy();
        generator89.setStrategy(generatorStrategy95);
        generator60.setStrategy(generatorStrategy95);
        generator0.setStrategy(generatorStrategy95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(generatorStrategy95);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass6 = generatorStrategy5.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator10.setDelegates((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator31.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setUseCache(false);
        generator35.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Class[] classArray46 = new java.lang.Class[] { wildcardClass43, wildcardClass45 };
        generator40.setClasses(classArray46);
        java.lang.Class<?> wildcardClass48 = generator40.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator49.getNamingPolicy();
        java.lang.Class<?> wildcardClass53 = namingPolicy52.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass57, wildcardClass59 };
        generator54.setClasses(classArray60);
        java.lang.Class<?> wildcardClass62 = generator54.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Object obj69 = new java.lang.Object();
        java.lang.Class<?> wildcardClass70 = obj69.getClass();
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass68, wildcardClass70 };
        generator65.setClasses(classArray71);
        java.lang.Class<?> wildcardClass73 = generator65.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator74.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator74.getNamingPolicy();
        java.lang.Class<?> wildcardClass78 = namingPolicy77.getClass();
        java.lang.Class[] classArray79 = new java.lang.Class[] { wildcardClass48, wildcardClass53, wildcardClass62, wildcardClass64, wildcardClass73, wildcardClass78 };
        generator35.setClasses(classArray79);
        generator31.setClasses(classArray79);
        java.lang.ClassLoader classLoader82 = generator31.getClassLoader();
        generator0.setClassLoader(classLoader82);
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        java.lang.Class<?> wildcardClass14 = generatorStrategy12.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        java.lang.Class<?> wildcardClass13 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin6 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        generator12.setDelegates((java.lang.Object[]) classArray23);
        generator7.setDelegates((java.lang.Object[]) classArray23);
        generator4.setDelegates((java.lang.Object[]) classArray23);
        generator0.setDelegates((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        generator38.setDelegates((java.lang.Object[]) classArray54);
        generator0.setClasses(classArray54);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator63.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator66.getStrategy();
        java.lang.ClassLoader classLoader69 = null;
        generator66.setClassLoader(classLoader69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator72.getStrategy();
        generator71.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        java.lang.Object obj78 = new java.lang.Object();
        java.lang.Class<?> wildcardClass79 = obj78.getClass();
        java.lang.Object obj80 = new java.lang.Object();
        java.lang.Class<?> wildcardClass81 = obj80.getClass();
        java.lang.Class[] classArray82 = new java.lang.Class[] { wildcardClass79, wildcardClass81 };
        generator76.setClasses(classArray82);
        generator71.setDelegates((java.lang.Object[]) classArray82);
        generator66.setDelegates((java.lang.Object[]) classArray82);
        generator63.setDelegates((java.lang.Object[]) classArray82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator63.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator89 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean90 = generator89.getUseCache();
        boolean boolean91 = generator89.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator89.getStrategy();
        boolean boolean93 = generator89.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator94 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean95 = generator94.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator94.getStrategy();
        generator89.setStrategy(generatorStrategy96);
        generator63.setStrategy(generatorStrategy96);
        generator0.setStrategy(generatorStrategy96);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(generatorStrategy96);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass4 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin6 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator10.setDelegates((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        java.lang.Class<?> wildcardClass67 = generatorStrategy65.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass7 = namingPolicy6.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator26.getStrategy();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        generator26.setStrategy(generatorStrategy33);
        generator0.setStrategy(generatorStrategy33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setUseCache(false);
        generator16.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Class[] classArray27 = new java.lang.Class[] { wildcardClass24, wildcardClass26 };
        generator21.setClasses(classArray27);
        java.lang.Class<?> wildcardClass29 = generator21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator30.getNamingPolicy();
        java.lang.Class<?> wildcardClass34 = namingPolicy33.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass38, wildcardClass40 };
        generator35.setClasses(classArray41);
        java.lang.Class<?> wildcardClass43 = generator35.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Class[] classArray52 = new java.lang.Class[] { wildcardClass49, wildcardClass51 };
        generator46.setClasses(classArray52);
        java.lang.Class<?> wildcardClass54 = generator46.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator55.getNamingPolicy();
        java.lang.Class<?> wildcardClass59 = namingPolicy58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass29, wildcardClass34, wildcardClass43, wildcardClass45, wildcardClass54, wildcardClass59 };
        generator16.setClasses(classArray60);
        generator13.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        boolean boolean65 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator63.getStrategy();
        generator13.setStrategy(generatorStrategy66);
        generator0.setStrategy(generatorStrategy66);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator20.setDelegates((java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        java.lang.Class<?> wildcardClass45 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        boolean boolean37 = generator34.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        generator46.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass54, wildcardClass56 };
        generator51.setClasses(classArray57);
        generator46.setDelegates((java.lang.Object[]) classArray57);
        generator41.setDelegates((java.lang.Object[]) classArray57);
        generator38.setDelegates((java.lang.Object[]) classArray57);
        generator34.setDelegates((java.lang.Object[]) classArray57);
        generator10.setDelegates((java.lang.Object[]) classArray57);
        generator0.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        java.lang.Object obj68 = new java.lang.Object();
        java.lang.Class<?> wildcardClass69 = obj68.getClass();
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.Class[] classArray72 = new java.lang.Class[] { wildcardClass69, wildcardClass71 };
        generator66.setClasses(classArray72);
        generator65.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        java.lang.ClassLoader classLoader78 = null;
        generator75.setClassLoader(classLoader78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        generator80.setStrategy(generatorStrategy83);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        java.lang.Object obj87 = new java.lang.Object();
        java.lang.Class<?> wildcardClass88 = obj87.getClass();
        java.lang.Object obj89 = new java.lang.Object();
        java.lang.Class<?> wildcardClass90 = obj89.getClass();
        java.lang.Class[] classArray91 = new java.lang.Class[] { wildcardClass88, wildcardClass90 };
        generator85.setClasses(classArray91);
        generator80.setDelegates((java.lang.Object[]) classArray91);
        generator75.setDelegates((java.lang.Object[]) classArray91);
        generator65.setDelegates((java.lang.Object[]) classArray91);
        java.lang.ClassLoader classLoader96 = generator65.getClassLoader();
        generator0.setClassLoader(classLoader96);
        java.lang.Class<?> wildcardClass98 = classLoader96.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        boolean boolean14 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator9.setDelegates((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Class[] classArray43 = new java.lang.Class[] { wildcardClass40, wildcardClass42 };
        generator37.setClasses(classArray43);
        generator32.setDelegates((java.lang.Object[]) classArray43);
        generator27.setDelegates((java.lang.Object[]) classArray43);
        generator24.setDelegates((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.asm.ClassVisitor classVisitor49 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classArray43);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass10 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator4.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator4.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator10.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy12);
        generator0.setNamingPolicy(namingPolicy12);
        java.lang.Class<?> wildcardClass15 = namingPolicy12.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setUseCache(false);
        generator6.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator11.getStrategy();
        boolean boolean14 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setUseCache(false);
        generator15.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        java.lang.Class<?> wildcardClass28 = generator20.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator29.getNamingPolicy();
        java.lang.Class<?> wildcardClass33 = namingPolicy32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Object obj49 = new java.lang.Object();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        java.lang.Class[] classArray51 = new java.lang.Class[] { wildcardClass48, wildcardClass50 };
        generator45.setClasses(classArray51);
        java.lang.Class<?> wildcardClass53 = generator45.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator54.getNamingPolicy();
        java.lang.Class<?> wildcardClass58 = namingPolicy57.getClass();
        java.lang.Class[] classArray59 = new java.lang.Class[] { wildcardClass28, wildcardClass33, wildcardClass42, wildcardClass44, wildcardClass53, wildcardClass58 };
        generator15.setClasses(classArray59);
        generator11.setDelegates((java.lang.Object[]) classArray59);
        generator6.setDelegates((java.lang.Object[]) classArray59);
        generator0.setDelegates((java.lang.Object[]) classArray59);
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(classArray59);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator5.getStrategy();
        generator2.setStrategy(generatorStrategy8);
        generator0.setStrategy(generatorStrategy8);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator10.setDelegates((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin31 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        java.lang.Class[] classArray16 = null;
        generator13.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        java.lang.Class<?> wildcardClass27 = generator0.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin5 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass8 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        boolean boolean8 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setUseCache(false);
        generator9.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        java.lang.Class<?> wildcardClass22 = generator14.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator23.getNamingPolicy();
        java.lang.Class<?> wildcardClass27 = namingPolicy26.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass31, wildcardClass33 };
        generator28.setClasses(classArray34);
        java.lang.Class<?> wildcardClass36 = generator28.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        java.lang.Class<?> wildcardClass47 = generator39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator48.getNamingPolicy();
        java.lang.Class<?> wildcardClass52 = namingPolicy51.getClass();
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass22, wildcardClass27, wildcardClass36, wildcardClass38, wildcardClass47, wildcardClass52 };
        generator9.setClasses(classArray53);
        generator5.setDelegates((java.lang.Object[]) classArray53);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classArray53);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getAttemptLoad();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Class[] classArray17 = new java.lang.Class[] { wildcardClass14, wildcardClass16 };
        generator11.setClasses(classArray17);
        generator7.setDelegates((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Class[] classArray27 = new java.lang.Class[] { wildcardClass24, wildcardClass26 };
        generator21.setClasses(classArray27);
        generator20.setClasses(classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator36.getStrategy();
        generator35.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Class[] classArray46 = new java.lang.Class[] { wildcardClass43, wildcardClass45 };
        generator40.setClasses(classArray46);
        generator35.setDelegates((java.lang.Object[]) classArray46);
        generator30.setDelegates((java.lang.Object[]) classArray46);
        generator20.setDelegates((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader51 = generator20.getClassLoader();
        generator7.setClassLoader(classLoader51);
        generator0.setClassLoader(classLoader51);
        boolean boolean54 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setUseCache(false);
        generator7.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        java.lang.Class<?> wildcardClass20 = generator12.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator21.getNamingPolicy();
        java.lang.Class<?> wildcardClass25 = namingPolicy24.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Class[] classArray32 = new java.lang.Class[] { wildcardClass29, wildcardClass31 };
        generator26.setClasses(classArray32);
        java.lang.Class<?> wildcardClass34 = generator26.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Class[] classArray43 = new java.lang.Class[] { wildcardClass40, wildcardClass42 };
        generator37.setClasses(classArray43);
        java.lang.Class<?> wildcardClass45 = generator37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator46.getNamingPolicy();
        java.lang.Class<?> wildcardClass50 = namingPolicy49.getClass();
        java.lang.Class[] classArray51 = new java.lang.Class[] { wildcardClass20, wildcardClass25, wildcardClass34, wildcardClass36, wildcardClass45, wildcardClass50 };
        generator7.setClasses(classArray51);
        generator4.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy56);
        generator0.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getAttemptLoad();
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        java.lang.Object obj64 = new java.lang.Object();
        java.lang.Class<?> wildcardClass65 = obj64.getClass();
        java.lang.Class[] classArray66 = new java.lang.Class[] { wildcardClass63, wildcardClass65 };
        generator60.setClasses(classArray66);
        generator59.setClasses(classArray66);
        generator0.setClasses(classArray66);
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(classArray66);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass7 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        java.lang.Object obj71 = new java.lang.Object();
        java.lang.Class<?> wildcardClass72 = obj71.getClass();
        java.lang.Object obj73 = new java.lang.Object();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass72, wildcardClass74 };
        generator69.setClasses(classArray75);
        generator68.setClasses(classArray75);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator78.getStrategy();
        generator68.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator68.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator83.getStrategy();
        generator68.setStrategy(generatorStrategy85);
        generator0.setStrategy(generatorStrategy85);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin88 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy85);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin9 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator10.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class[] classArray37 = new java.lang.Class[] { wildcardClass34, wildcardClass36 };
        generator31.setClasses(classArray37);
        generator26.setDelegates((java.lang.Object[]) classArray37);
        generator21.setDelegates((java.lang.Object[]) classArray37);
        generator18.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setUseCache(false);
        boolean boolean45 = generator42.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        java.lang.ClassLoader classLoader52 = null;
        generator49.setClassLoader(classLoader52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator55.getStrategy();
        generator54.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Class[] classArray65 = new java.lang.Class[] { wildcardClass62, wildcardClass64 };
        generator59.setClasses(classArray65);
        generator54.setDelegates((java.lang.Object[]) classArray65);
        generator49.setDelegates((java.lang.Object[]) classArray65);
        generator46.setDelegates((java.lang.Object[]) classArray65);
        generator42.setDelegates((java.lang.Object[]) classArray65);
        generator18.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin72 = generator18.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy73);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getAttemptLoad();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Class[] classArray17 = new java.lang.Class[] { wildcardClass14, wildcardClass16 };
        generator11.setClasses(classArray17);
        generator7.setDelegates((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Class[] classArray27 = new java.lang.Class[] { wildcardClass24, wildcardClass26 };
        generator21.setClasses(classArray27);
        generator20.setClasses(classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator36.getStrategy();
        generator35.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Class[] classArray46 = new java.lang.Class[] { wildcardClass43, wildcardClass45 };
        generator40.setClasses(classArray46);
        generator35.setDelegates((java.lang.Object[]) classArray46);
        generator30.setDelegates((java.lang.Object[]) classArray46);
        generator20.setDelegates((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader51 = generator20.getClassLoader();
        generator7.setClassLoader(classLoader51);
        generator0.setClassLoader(classLoader51);
        boolean boolean54 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Class[] classArray11 = new java.lang.Class[] { wildcardClass8, wildcardClass10 };
        generator5.setClasses(classArray11);
        generator4.setClasses(classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator14.setDelegates((java.lang.Object[]) classArray30);
        generator4.setDelegates((java.lang.Object[]) classArray30);
        generator0.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator36.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        boolean boolean41 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator39.getStrategy();
        generator36.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator44.getNamingPolicy();
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        generator51.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Object obj69 = new java.lang.Object();
        java.lang.Class<?> wildcardClass70 = obj69.getClass();
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass68, wildcardClass70 };
        generator65.setClasses(classArray71);
        generator64.setClasses(classArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator74.getStrategy();
        java.lang.ClassLoader classLoader77 = null;
        generator74.setClassLoader(classLoader77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator80.getStrategy();
        generator79.setStrategy(generatorStrategy82);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        java.lang.Object obj86 = new java.lang.Object();
        java.lang.Class<?> wildcardClass87 = obj86.getClass();
        java.lang.Object obj88 = new java.lang.Object();
        java.lang.Class<?> wildcardClass89 = obj88.getClass();
        java.lang.Class[] classArray90 = new java.lang.Class[] { wildcardClass87, wildcardClass89 };
        generator84.setClasses(classArray90);
        generator79.setDelegates((java.lang.Object[]) classArray90);
        generator74.setDelegates((java.lang.Object[]) classArray90);
        generator64.setDelegates((java.lang.Object[]) classArray90);
        java.lang.ClassLoader classLoader95 = generator64.getClassLoader();
        generator51.setClassLoader(classLoader95);
        generator44.setClassLoader(classLoader95);
        generator36.setClassLoader(classLoader95);
        generator0.setClassLoader(classLoader95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classLoader95);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass4 = generatorStrategy3.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Class[] classArray11 = new java.lang.Class[] { wildcardClass8, wildcardClass10 };
        generator5.setClasses(classArray11);
        java.lang.Class<?> wildcardClass13 = generator5.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator14.getNamingPolicy();
        java.lang.Class<?> wildcardClass18 = namingPolicy17.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        java.lang.Class<?> wildcardClass27 = generator19.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator39.getNamingPolicy();
        java.lang.Class<?> wildcardClass43 = namingPolicy42.getClass();
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass13, wildcardClass18, wildcardClass27, wildcardClass29, wildcardClass38, wildcardClass43 };
        generator0.setClasses(classArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean54 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin55 = generator0.create();
        java.lang.Class<?> wildcardClass56 = mixin55.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass5 = namingPolicy4.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        boolean boolean37 = generator34.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        generator46.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass54, wildcardClass56 };
        generator51.setClasses(classArray57);
        generator46.setDelegates((java.lang.Object[]) classArray57);
        generator41.setDelegates((java.lang.Object[]) classArray57);
        generator38.setDelegates((java.lang.Object[]) classArray57);
        generator34.setDelegates((java.lang.Object[]) classArray57);
        generator10.setDelegates((java.lang.Object[]) classArray57);
        generator0.setDelegates((java.lang.Object[]) classArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin65 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classArray57);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Class[] classArray11 = new java.lang.Class[] { wildcardClass8, wildcardClass10 };
        generator5.setClasses(classArray11);
        generator0.setDelegates((java.lang.Object[]) classArray11);
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classArray11);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        boolean boolean59 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin60 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        java.lang.ClassLoader classLoader10 = null;
        generator0.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy12);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        boolean boolean20 = generator12.getUseCache();
        boolean boolean21 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator26.getStrategy();
        generator22.setStrategy(generatorStrategy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        generator31.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Class[] classArray42 = new java.lang.Class[] { wildcardClass39, wildcardClass41 };
        generator36.setClasses(classArray42);
        generator31.setDelegates((java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        generator12.setDelegates((java.lang.Object[]) classArray42);
        generator0.setClasses(classArray42);
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classArray42);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator11.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        generator11.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator27.getStrategy();
        generator27.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setUseCache(false);
        generator38.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class[] classArray49 = new java.lang.Class[] { wildcardClass46, wildcardClass48 };
        generator43.setClasses(classArray49);
        java.lang.Class<?> wildcardClass51 = generator43.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator52.getNamingPolicy();
        java.lang.Class<?> wildcardClass56 = namingPolicy55.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Class[] classArray63 = new java.lang.Class[] { wildcardClass60, wildcardClass62 };
        generator57.setClasses(classArray63);
        java.lang.Class<?> wildcardClass65 = generator57.getClass();
        java.lang.Object obj66 = new java.lang.Object();
        java.lang.Class<?> wildcardClass67 = obj66.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.Object obj72 = new java.lang.Object();
        java.lang.Class<?> wildcardClass73 = obj72.getClass();
        java.lang.Class[] classArray74 = new java.lang.Class[] { wildcardClass71, wildcardClass73 };
        generator68.setClasses(classArray74);
        java.lang.Class<?> wildcardClass76 = generator68.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator77.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator77.getNamingPolicy();
        java.lang.Class<?> wildcardClass81 = namingPolicy80.getClass();
        java.lang.Class[] classArray82 = new java.lang.Class[] { wildcardClass51, wildcardClass56, wildcardClass65, wildcardClass67, wildcardClass76, wildcardClass81 };
        generator38.setClasses(classArray82);
        generator27.setClasses(classArray82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator27.getStrategy();
        java.lang.ClassLoader classLoader86 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader86);
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(classLoader86);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass36 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass10 = generator0.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator9.setDelegates((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        java.lang.Class<?> wildcardClass24 = classArray20.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass29 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        boolean boolean12 = generator4.getUseCache();
        boolean boolean13 = generator4.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        generator23.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass31, wildcardClass33 };
        generator28.setClasses(classArray34);
        generator23.setDelegates((java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        generator4.setDelegates((java.lang.Object[]) classArray34);
        generator0.setClasses(classArray34);
        org.mockito.asm.ClassVisitor classVisitor40 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classArray34);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        java.lang.Class<?> wildcardClass20 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        boolean boolean12 = generator4.getAttemptLoad();
        boolean boolean13 = generator4.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader18 = null;
        generator14.setClassLoader(classLoader18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator20.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy22);
        generator4.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        generator11.setDelegates((java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator11.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        generator11.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator27.getStrategy();
        generator27.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setUseCache(false);
        generator38.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class[] classArray49 = new java.lang.Class[] { wildcardClass46, wildcardClass48 };
        generator43.setClasses(classArray49);
        java.lang.Class<?> wildcardClass51 = generator43.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator52.getNamingPolicy();
        java.lang.Class<?> wildcardClass56 = namingPolicy55.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Class[] classArray63 = new java.lang.Class[] { wildcardClass60, wildcardClass62 };
        generator57.setClasses(classArray63);
        java.lang.Class<?> wildcardClass65 = generator57.getClass();
        java.lang.Object obj66 = new java.lang.Object();
        java.lang.Class<?> wildcardClass67 = obj66.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.Object obj72 = new java.lang.Object();
        java.lang.Class<?> wildcardClass73 = obj72.getClass();
        java.lang.Class[] classArray74 = new java.lang.Class[] { wildcardClass71, wildcardClass73 };
        generator68.setClasses(classArray74);
        java.lang.Class<?> wildcardClass76 = generator68.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator77.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator77.getNamingPolicy();
        java.lang.Class<?> wildcardClass81 = namingPolicy80.getClass();
        java.lang.Class[] classArray82 = new java.lang.Class[] { wildcardClass51, wildcardClass56, wildcardClass65, wildcardClass67, wildcardClass76, wildcardClass81 };
        generator38.setClasses(classArray82);
        generator27.setClasses(classArray82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator27.getStrategy();
        java.lang.ClassLoader classLoader86 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin88 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(classLoader86);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        java.lang.ClassLoader classLoader10 = null;
        generator0.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin13 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy12);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin58 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin5 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean10 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass21, wildcardClass23 };
        generator18.setClasses(classArray24);
        generator14.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass31, wildcardClass33 };
        generator28.setClasses(classArray34);
        generator27.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        generator42.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.Object obj49 = new java.lang.Object();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass50, wildcardClass52 };
        generator47.setClasses(classArray53);
        generator42.setDelegates((java.lang.Object[]) classArray53);
        generator37.setDelegates((java.lang.Object[]) classArray53);
        generator27.setDelegates((java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader58 = generator27.getClassLoader();
        generator14.setClassLoader(classLoader58);
        generator7.setClassLoader(classLoader58);
        generator0.setClassLoader(classLoader58);
        java.lang.Class<?> wildcardClass62 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass6 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setUseCache(false);
        generator7.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        java.lang.Class<?> wildcardClass20 = generator12.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator21.getNamingPolicy();
        java.lang.Class<?> wildcardClass25 = namingPolicy24.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Class[] classArray32 = new java.lang.Class[] { wildcardClass29, wildcardClass31 };
        generator26.setClasses(classArray32);
        java.lang.Class<?> wildcardClass34 = generator26.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Class[] classArray43 = new java.lang.Class[] { wildcardClass40, wildcardClass42 };
        generator37.setClasses(classArray43);
        java.lang.Class<?> wildcardClass45 = generator37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator46.getNamingPolicy();
        java.lang.Class<?> wildcardClass50 = namingPolicy49.getClass();
        java.lang.Class[] classArray51 = new java.lang.Class[] { wildcardClass20, wildcardClass25, wildcardClass34, wildcardClass36, wildcardClass45, wildcardClass50 };
        generator7.setClasses(classArray51);
        generator4.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy56);
        generator0.setNamingPolicy(namingPolicy56);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean54 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin55 = generator0.create();
        boolean boolean56 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin6 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        boolean boolean37 = generator34.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        generator46.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass54, wildcardClass56 };
        generator51.setClasses(classArray57);
        generator46.setDelegates((java.lang.Object[]) classArray57);
        generator41.setDelegates((java.lang.Object[]) classArray57);
        generator38.setDelegates((java.lang.Object[]) classArray57);
        generator34.setDelegates((java.lang.Object[]) classArray57);
        generator10.setDelegates((java.lang.Object[]) classArray57);
        generator0.setClasses(classArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin65 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classArray57);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean54 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin55 = generator0.create();
        boolean boolean56 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator23.getNamingPolicy();
        java.lang.ClassLoader classLoader27 = null;
        generator23.setClassLoader(classLoader27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        boolean boolean32 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        generator30.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Class[] classArray50 = new java.lang.Class[] { wildcardClass47, wildcardClass49 };
        generator44.setClasses(classArray50);
        generator43.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator53.getStrategy();
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        generator58.setStrategy(generatorStrategy61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass66, wildcardClass68 };
        generator63.setClasses(classArray69);
        generator58.setDelegates((java.lang.Object[]) classArray69);
        generator53.setDelegates((java.lang.Object[]) classArray69);
        generator43.setDelegates((java.lang.Object[]) classArray69);
        java.lang.ClassLoader classLoader74 = generator43.getClassLoader();
        generator30.setClassLoader(classLoader74);
        generator23.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        java.lang.Class<?> wildcardClass78 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator10.setDelegates((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator31.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setUseCache(false);
        generator35.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Class[] classArray46 = new java.lang.Class[] { wildcardClass43, wildcardClass45 };
        generator40.setClasses(classArray46);
        java.lang.Class<?> wildcardClass48 = generator40.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator49.getNamingPolicy();
        java.lang.Class<?> wildcardClass53 = namingPolicy52.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass57, wildcardClass59 };
        generator54.setClasses(classArray60);
        java.lang.Class<?> wildcardClass62 = generator54.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Object obj69 = new java.lang.Object();
        java.lang.Class<?> wildcardClass70 = obj69.getClass();
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass68, wildcardClass70 };
        generator65.setClasses(classArray71);
        java.lang.Class<?> wildcardClass73 = generator65.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator74.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator74.getNamingPolicy();
        java.lang.Class<?> wildcardClass78 = namingPolicy77.getClass();
        java.lang.Class[] classArray79 = new java.lang.Class[] { wildcardClass48, wildcardClass53, wildcardClass62, wildcardClass64, wildcardClass73, wildcardClass78 };
        generator35.setClasses(classArray79);
        generator31.setClasses(classArray79);
        java.lang.ClassLoader classLoader82 = generator31.getClassLoader();
        generator0.setClassLoader(classLoader82);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin86 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator10.setDelegates((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator31.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setUseCache(false);
        generator35.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Class[] classArray46 = new java.lang.Class[] { wildcardClass43, wildcardClass45 };
        generator40.setClasses(classArray46);
        java.lang.Class<?> wildcardClass48 = generator40.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator49.getNamingPolicy();
        java.lang.Class<?> wildcardClass53 = namingPolicy52.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass57, wildcardClass59 };
        generator54.setClasses(classArray60);
        java.lang.Class<?> wildcardClass62 = generator54.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Object obj69 = new java.lang.Object();
        java.lang.Class<?> wildcardClass70 = obj69.getClass();
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass68, wildcardClass70 };
        generator65.setClasses(classArray71);
        java.lang.Class<?> wildcardClass73 = generator65.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator74.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator74.getNamingPolicy();
        java.lang.Class<?> wildcardClass78 = namingPolicy77.getClass();
        java.lang.Class[] classArray79 = new java.lang.Class[] { wildcardClass48, wildcardClass53, wildcardClass62, wildcardClass64, wildcardClass73, wildcardClass78 };
        generator35.setClasses(classArray79);
        generator31.setClasses(classArray79);
        java.lang.ClassLoader classLoader82 = generator31.getClassLoader();
        generator0.setClassLoader(classLoader82);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        generator5.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        boolean boolean13 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        generator14.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        java.lang.Class<?> wildcardClass27 = generator19.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator28.getNamingPolicy();
        java.lang.Class<?> wildcardClass32 = namingPolicy31.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        java.lang.Class<?> wildcardClass41 = generator33.getClass();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Class[] classArray50 = new java.lang.Class[] { wildcardClass47, wildcardClass49 };
        generator44.setClasses(classArray50);
        java.lang.Class<?> wildcardClass52 = generator44.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator53.getNamingPolicy();
        java.lang.Class<?> wildcardClass57 = namingPolicy56.getClass();
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass27, wildcardClass32, wildcardClass41, wildcardClass43, wildcardClass52, wildcardClass57 };
        generator14.setClasses(classArray58);
        generator10.setDelegates((java.lang.Object[]) classArray58);
        generator5.setDelegates((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        java.lang.Class<?> wildcardClass63 = classArray58.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator13.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator13.setDelegates((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader46 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.Object obj49 = new java.lang.Object();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass50, wildcardClass52 };
        generator47.setClasses(classArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator47.getStrategy();
        generator47.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader58 = generator47.getClassLoader();
        generator0.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(namingPolicy3);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass54 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        java.lang.Class<?> wildcardClass28 = mixin27.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader15 = null;
        generator11.setClassLoader(classLoader15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator11.getStrategy();
        generator0.setStrategy(generatorStrategy17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        java.lang.Class[] classArray16 = null;
        generator13.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator5.getStrategy();
        generator2.setStrategy(generatorStrategy8);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy11);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin23 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy22);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass6 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        boolean boolean15 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator13.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator8.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator19.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator19.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = generator19.getClassLoader();
        generator8.setClassLoader(classLoader33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass38, wildcardClass40 };
        generator35.setClasses(classArray41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator35.getStrategy();
        generator8.setStrategy(generatorStrategy43);
        generator0.setStrategy(generatorStrategy43);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin46 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        boolean boolean12 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator10.setDelegates((java.lang.Object[]) classArray20);
        generator0.setDelegates((java.lang.Object[]) classArray20);
        java.lang.Class<?> wildcardClass24 = classArray20.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator11.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        generator11.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader25);
        java.lang.Class<?> wildcardClass27 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        java.lang.Class<?> wildcardClass51 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator35.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setUseCache(false);
        generator39.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Class[] classArray50 = new java.lang.Class[] { wildcardClass47, wildcardClass49 };
        generator44.setClasses(classArray50);
        java.lang.Class<?> wildcardClass52 = generator44.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator53.getNamingPolicy();
        java.lang.Class<?> wildcardClass57 = namingPolicy56.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.Object obj60 = new java.lang.Object();
        java.lang.Class<?> wildcardClass61 = obj60.getClass();
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass61, wildcardClass63 };
        generator58.setClasses(classArray64);
        java.lang.Class<?> wildcardClass66 = generator58.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        java.lang.Object obj71 = new java.lang.Object();
        java.lang.Class<?> wildcardClass72 = obj71.getClass();
        java.lang.Object obj73 = new java.lang.Object();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass72, wildcardClass74 };
        generator69.setClasses(classArray75);
        java.lang.Class<?> wildcardClass77 = generator69.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator78.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator78.getNamingPolicy();
        java.lang.Class<?> wildcardClass82 = namingPolicy81.getClass();
        java.lang.Class[] classArray83 = new java.lang.Class[] { wildcardClass52, wildcardClass57, wildcardClass66, wildcardClass68, wildcardClass77, wildcardClass82 };
        generator39.setClasses(classArray83);
        generator35.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator86.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator86.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy89);
        generator0.setNamingPolicy(namingPolicy89);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass55, wildcardClass57 };
        generator52.setClasses(classArray58);
        generator51.setClasses(classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator61.getStrategy();
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator67.getStrategy();
        generator66.setStrategy(generatorStrategy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getAttemptLoad();
        java.lang.Object obj73 = new java.lang.Object();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.Object obj75 = new java.lang.Object();
        java.lang.Class<?> wildcardClass76 = obj75.getClass();
        java.lang.Class[] classArray77 = new java.lang.Class[] { wildcardClass74, wildcardClass76 };
        generator71.setClasses(classArray77);
        generator66.setDelegates((java.lang.Object[]) classArray77);
        generator61.setDelegates((java.lang.Object[]) classArray77);
        generator51.setDelegates((java.lang.Object[]) classArray77);
        java.lang.ClassLoader classLoader82 = generator51.getClassLoader();
        generator0.setClassLoader(classLoader82);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getUseCache();
        boolean boolean86 = generator84.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator84.getStrategy();
        generator0.setStrategy(generatorStrategy87);
        java.lang.Class<?> wildcardClass89 = generatorStrategy87.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass25 = namingPolicy24.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass9 = generatorStrategy8.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setUseCache(false);
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        java.lang.Class<?> wildcardClass25 = generator17.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator26.getNamingPolicy();
        java.lang.Class<?> wildcardClass30 = namingPolicy29.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class[] classArray37 = new java.lang.Class[] { wildcardClass34, wildcardClass36 };
        generator31.setClasses(classArray37);
        java.lang.Class<?> wildcardClass39 = generator31.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass45, wildcardClass47 };
        generator42.setClasses(classArray48);
        java.lang.Class<?> wildcardClass50 = generator42.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator51.getNamingPolicy();
        java.lang.Class<?> wildcardClass55 = namingPolicy54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass25, wildcardClass30, wildcardClass39, wildcardClass41, wildcardClass50, wildcardClass55 };
        generator12.setClasses(classArray56);
        generator9.setDelegates((java.lang.Object[]) classArray56);
        generator0.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(generatorStrategy60);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        boolean boolean12 = generator4.getUseCache();
        boolean boolean13 = generator4.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        generator23.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass31, wildcardClass33 };
        generator28.setClasses(classArray34);
        generator23.setDelegates((java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        generator4.setDelegates((java.lang.Object[]) classArray34);
        generator0.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setUseCache(false);
        generator40.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        boolean boolean48 = generator45.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setUseCache(false);
        generator49.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass57, wildcardClass59 };
        generator54.setClasses(classArray60);
        java.lang.Class<?> wildcardClass62 = generator54.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator63.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator63.getNamingPolicy();
        java.lang.Class<?> wildcardClass67 = namingPolicy66.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.Object obj72 = new java.lang.Object();
        java.lang.Class<?> wildcardClass73 = obj72.getClass();
        java.lang.Class[] classArray74 = new java.lang.Class[] { wildcardClass71, wildcardClass73 };
        generator68.setClasses(classArray74);
        java.lang.Class<?> wildcardClass76 = generator68.getClass();
        java.lang.Object obj77 = new java.lang.Object();
        java.lang.Class<?> wildcardClass78 = obj77.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        java.lang.Object obj81 = new java.lang.Object();
        java.lang.Class<?> wildcardClass82 = obj81.getClass();
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        java.lang.Class[] classArray85 = new java.lang.Class[] { wildcardClass82, wildcardClass84 };
        generator79.setClasses(classArray85);
        java.lang.Class<?> wildcardClass87 = generator79.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator88 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator88.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator88.getNamingPolicy();
        java.lang.Class<?> wildcardClass92 = namingPolicy91.getClass();
        java.lang.Class[] classArray93 = new java.lang.Class[] { wildcardClass62, wildcardClass67, wildcardClass76, wildcardClass78, wildcardClass87, wildcardClass92 };
        generator49.setClasses(classArray93);
        generator45.setDelegates((java.lang.Object[]) classArray93);
        generator40.setDelegates((java.lang.Object[]) classArray93);
        generator0.setDelegates((java.lang.Object[]) classArray93);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(classArray93);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator2.getNamingPolicy();
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator8.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator8.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator12.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator12.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy16);
        generator0.setNamingPolicy(namingPolicy16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass6 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin3 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        boolean boolean12 = generator4.getUseCache();
        boolean boolean13 = generator4.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        generator23.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass31, wildcardClass33 };
        generator28.setClasses(classArray34);
        generator23.setDelegates((java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        generator4.setDelegates((java.lang.Object[]) classArray34);
        generator0.setClasses(classArray34);
        boolean boolean40 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor41 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setUseCache(false);
        generator16.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Class[] classArray27 = new java.lang.Class[] { wildcardClass24, wildcardClass26 };
        generator21.setClasses(classArray27);
        java.lang.Class<?> wildcardClass29 = generator21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator30.getNamingPolicy();
        java.lang.Class<?> wildcardClass34 = namingPolicy33.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass38, wildcardClass40 };
        generator35.setClasses(classArray41);
        java.lang.Class<?> wildcardClass43 = generator35.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Class[] classArray52 = new java.lang.Class[] { wildcardClass49, wildcardClass51 };
        generator46.setClasses(classArray52);
        java.lang.Class<?> wildcardClass54 = generator46.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator55.getNamingPolicy();
        java.lang.Class<?> wildcardClass59 = namingPolicy58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass29, wildcardClass34, wildcardClass43, wildcardClass45, wildcardClass54, wildcardClass59 };
        generator16.setClasses(classArray60);
        generator13.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        boolean boolean65 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator63.getStrategy();
        generator13.setStrategy(generatorStrategy66);
        generator0.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin mixin69 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(namingPolicy70);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator4.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator13.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator13.setDelegates((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader44);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader44);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator0.getStrategy();
        boolean boolean68 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor69 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator6.setDelegates((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator19.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        generator34.setDelegates((java.lang.Object[]) classArray45);
        generator29.setDelegates((java.lang.Object[]) classArray45);
        generator19.setDelegates((java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader50 = generator19.getClassLoader();
        generator6.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy52);
        java.lang.Class<?> wildcardClass54 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        generator7.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator7.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator24.getNamingPolicy();
        java.lang.ClassLoader classLoader28 = null;
        generator24.setClassLoader(classLoader28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator30.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator34.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator34.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy38);
        generator24.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        generator50.setDelegates((java.lang.Object[]) classArray61);
        generator45.setDelegates((java.lang.Object[]) classArray61);
        generator42.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator66.setUseCache(false);
        boolean boolean69 = generator66.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator70.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator73.getStrategy();
        java.lang.ClassLoader classLoader76 = null;
        generator73.setClassLoader(classLoader76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        generator78.setStrategy(generatorStrategy81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        java.lang.Object obj85 = new java.lang.Object();
        java.lang.Class<?> wildcardClass86 = obj85.getClass();
        java.lang.Object obj87 = new java.lang.Object();
        java.lang.Class<?> wildcardClass88 = obj87.getClass();
        java.lang.Class[] classArray89 = new java.lang.Class[] { wildcardClass86, wildcardClass88 };
        generator83.setClasses(classArray89);
        generator78.setDelegates((java.lang.Object[]) classArray89);
        generator73.setDelegates((java.lang.Object[]) classArray89);
        generator70.setDelegates((java.lang.Object[]) classArray89);
        generator66.setDelegates((java.lang.Object[]) classArray89);
        generator42.setDelegates((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin96 = generator42.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator42.getStrategy();
        generator24.setStrategy(generatorStrategy97);
        generator0.setStrategy(generatorStrategy97);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        boolean boolean51 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        boolean boolean14 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator10.setDelegates((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classLoader31);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator8.getNamingPolicy();
        java.lang.ClassLoader classLoader12 = null;
        generator8.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        boolean boolean17 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        generator15.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Class[] classArray35 = new java.lang.Class[] { wildcardClass32, wildcardClass34 };
        generator29.setClasses(classArray35);
        generator28.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        generator38.setDelegates((java.lang.Object[]) classArray54);
        generator28.setDelegates((java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader59 = generator28.getClassLoader();
        generator15.setClassLoader(classLoader59);
        generator8.setClassLoader(classLoader59);
        generator0.setClassLoader(classLoader59);
        org.mockito.asm.ClassVisitor classVisitor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classLoader59);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        boolean boolean20 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator21.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        generator21.setClassLoader(classLoader25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator21.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        boolean boolean30 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Class[] classArray38 = new java.lang.Class[] { wildcardClass35, wildcardClass37 };
        generator32.setClasses(classArray38);
        generator28.setDelegates((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass45, wildcardClass47 };
        generator42.setClasses(classArray48);
        generator41.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        generator56.setDelegates((java.lang.Object[]) classArray67);
        generator51.setDelegates((java.lang.Object[]) classArray67);
        generator41.setDelegates((java.lang.Object[]) classArray67);
        java.lang.ClassLoader classLoader72 = generator41.getClassLoader();
        generator28.setClassLoader(classLoader72);
        generator21.setClassLoader(classLoader72);
        generator0.setClassLoader(classLoader72);
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classLoader72);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.asm.ClassVisitor classVisitor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = null;
        generator0.setClasses(classArray51);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy31);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy12);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setUseCache(false);
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        java.lang.Class<?> wildcardClass25 = generator17.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator26.getNamingPolicy();
        java.lang.Class<?> wildcardClass30 = namingPolicy29.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class[] classArray37 = new java.lang.Class[] { wildcardClass34, wildcardClass36 };
        generator31.setClasses(classArray37);
        java.lang.Class<?> wildcardClass39 = generator31.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass45, wildcardClass47 };
        generator42.setClasses(classArray48);
        java.lang.Class<?> wildcardClass50 = generator42.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator51.getNamingPolicy();
        java.lang.Class<?> wildcardClass55 = namingPolicy54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass25, wildcardClass30, wildcardClass39, wildcardClass41, wildcardClass50, wildcardClass55 };
        generator12.setClasses(classArray56);
        generator9.setDelegates((java.lang.Object[]) classArray56);
        generator0.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.asm.ClassVisitor classVisitor60 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        boolean boolean33 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator31.getStrategy();
        generator27.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean54 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin55 = generator0.create();
        boolean boolean56 = generator0.getUseCache();
        boolean boolean57 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator0.setStrategy(generatorStrategy58);
        boolean boolean60 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator63.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator66.getStrategy();
        java.lang.ClassLoader classLoader69 = null;
        generator66.setClassLoader(classLoader69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator72.getStrategy();
        generator71.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        java.lang.Object obj78 = new java.lang.Object();
        java.lang.Class<?> wildcardClass79 = obj78.getClass();
        java.lang.Object obj80 = new java.lang.Object();
        java.lang.Class<?> wildcardClass81 = obj80.getClass();
        java.lang.Class[] classArray82 = new java.lang.Class[] { wildcardClass79, wildcardClass81 };
        generator76.setClasses(classArray82);
        generator71.setDelegates((java.lang.Object[]) classArray82);
        generator66.setDelegates((java.lang.Object[]) classArray82);
        generator63.setDelegates((java.lang.Object[]) classArray82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator63.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator89 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean90 = generator89.getUseCache();
        boolean boolean91 = generator89.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator89.getStrategy();
        boolean boolean93 = generator89.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator94 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean95 = generator94.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator94.getStrategy();
        generator89.setStrategy(generatorStrategy96);
        generator63.setStrategy(generatorStrategy96);
        generator0.setStrategy(generatorStrategy96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(generatorStrategy96);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        boolean boolean38 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator36.getStrategy();
        generator33.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator33.getNamingPolicy();
        generator33.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        generator44.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass52, wildcardClass54 };
        generator49.setClasses(classArray55);
        generator44.setDelegates((java.lang.Object[]) classArray55);
        generator33.setDelegates((java.lang.Object[]) classArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator33.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator61.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator61.getNamingPolicy();
        generator61.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator71.getStrategy();
        java.lang.ClassLoader classLoader74 = null;
        generator71.setClassLoader(classLoader74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator77.getStrategy();
        generator76.setStrategy(generatorStrategy79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        java.lang.Object obj85 = new java.lang.Object();
        java.lang.Class<?> wildcardClass86 = obj85.getClass();
        java.lang.Class[] classArray87 = new java.lang.Class[] { wildcardClass84, wildcardClass86 };
        generator81.setClasses(classArray87);
        generator76.setDelegates((java.lang.Object[]) classArray87);
        generator71.setDelegates((java.lang.Object[]) classArray87);
        generator68.setDelegates((java.lang.Object[]) classArray87);
        generator61.setClasses(classArray87);
        generator0.setClasses(classArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(classArray87);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass21, wildcardClass23 };
        generator18.setClasses(classArray24);
        generator14.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass31, wildcardClass33 };
        generator28.setClasses(classArray34);
        generator27.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        generator42.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.Object obj49 = new java.lang.Object();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass50, wildcardClass52 };
        generator47.setClasses(classArray53);
        generator42.setDelegates((java.lang.Object[]) classArray53);
        generator37.setDelegates((java.lang.Object[]) classArray53);
        generator27.setDelegates((java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader58 = generator27.getClassLoader();
        generator14.setClassLoader(classLoader58);
        generator7.setClassLoader(classLoader58);
        generator0.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass63 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        boolean boolean51 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator54.getStrategy();
        generator53.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = null;
        generator53.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator53.getStrategy();
        generator0.setStrategy(generatorStrategy60);
        java.lang.Class<?> wildcardClass62 = generatorStrategy60.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        java.lang.Class<?> wildcardClass16 = generator8.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator17.getNamingPolicy();
        java.lang.Class<?> wildcardClass21 = namingPolicy20.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Class[] classArray28 = new java.lang.Class[] { wildcardClass25, wildcardClass27 };
        generator22.setClasses(classArray28);
        java.lang.Class<?> wildcardClass30 = generator22.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        java.lang.Class<?> wildcardClass41 = generator33.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator42.getNamingPolicy();
        java.lang.Class<?> wildcardClass46 = namingPolicy45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass16, wildcardClass21, wildcardClass30, wildcardClass32, wildcardClass41, wildcardClass46 };
        generator3.setClasses(classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        boolean boolean52 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator50.getStrategy();
        generator0.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setUseCache(false);
        boolean boolean58 = generator55.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator62.getStrategy();
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        generator67.setStrategy(generatorStrategy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getAttemptLoad();
        java.lang.Object obj74 = new java.lang.Object();
        java.lang.Class<?> wildcardClass75 = obj74.getClass();
        java.lang.Object obj76 = new java.lang.Object();
        java.lang.Class<?> wildcardClass77 = obj76.getClass();
        java.lang.Class[] classArray78 = new java.lang.Class[] { wildcardClass75, wildcardClass77 };
        generator72.setClasses(classArray78);
        generator67.setDelegates((java.lang.Object[]) classArray78);
        generator62.setDelegates((java.lang.Object[]) classArray78);
        generator59.setDelegates((java.lang.Object[]) classArray78);
        generator55.setDelegates((java.lang.Object[]) classArray78);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader89 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(classArray78);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        java.lang.Class<?> wildcardClass22 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator20.setDelegates((java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        boolean boolean47 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator45.getStrategy();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        generator50.setDelegates((java.lang.Object[]) classArray61);
        generator45.setClasses(classArray61);
        generator0.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator0.getStrategy();
        boolean boolean67 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader68 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setUseCache(false);
        boolean boolean4 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        generator13.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass21, wildcardClass23 };
        generator18.setClasses(classArray24);
        generator13.setDelegates((java.lang.Object[]) classArray24);
        generator8.setDelegates((java.lang.Object[]) classArray24);
        generator5.setDelegates((java.lang.Object[]) classArray24);
        generator1.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setUseCache(false);
        generator30.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        boolean boolean38 = generator35.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setUseCache(false);
        generator39.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Class[] classArray50 = new java.lang.Class[] { wildcardClass47, wildcardClass49 };
        generator44.setClasses(classArray50);
        java.lang.Class<?> wildcardClass52 = generator44.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator53.getNamingPolicy();
        java.lang.Class<?> wildcardClass57 = namingPolicy56.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.Object obj60 = new java.lang.Object();
        java.lang.Class<?> wildcardClass61 = obj60.getClass();
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass61, wildcardClass63 };
        generator58.setClasses(classArray64);
        java.lang.Class<?> wildcardClass66 = generator58.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        java.lang.Object obj71 = new java.lang.Object();
        java.lang.Class<?> wildcardClass72 = obj71.getClass();
        java.lang.Object obj73 = new java.lang.Object();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass72, wildcardClass74 };
        generator69.setClasses(classArray75);
        java.lang.Class<?> wildcardClass77 = generator69.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator78.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator78.getNamingPolicy();
        java.lang.Class<?> wildcardClass82 = namingPolicy81.getClass();
        java.lang.Class[] classArray83 = new java.lang.Class[] { wildcardClass52, wildcardClass57, wildcardClass66, wildcardClass68, wildcardClass77, wildcardClass82 };
        generator39.setClasses(classArray83);
        generator35.setDelegates((java.lang.Object[]) classArray83);
        generator30.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator88 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean89 = generator88.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator88.getStrategy();
        generator87.setStrategy(generatorStrategy90);
        org.mockito.cglib.proxy.Mixin.Generator generator92 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean93 = generator92.getUseCache();
        boolean boolean94 = generator92.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator92.getNamingPolicy();
        generator87.setNamingPolicy(namingPolicy95);
        generator30.setNamingPolicy(namingPolicy95);
        generator1.setNamingPolicy(namingPolicy95);
        generator0.setNamingPolicy(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        java.lang.Class[] classArray16 = null;
        generator13.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        generator12.setDelegates((java.lang.Object[]) classArray23);
        generator7.setDelegates((java.lang.Object[]) classArray23);
        generator4.setDelegates((java.lang.Object[]) classArray23);
        generator0.setDelegates((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        generator46.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass54, wildcardClass56 };
        generator51.setClasses(classArray57);
        generator46.setDelegates((java.lang.Object[]) classArray57);
        generator41.setDelegates((java.lang.Object[]) classArray57);
        generator38.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator38.getStrategy();
        generator38.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator65.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator65.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        boolean boolean71 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator69.getStrategy();
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        generator74.setStrategy(generatorStrategy77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        java.lang.Object obj81 = new java.lang.Object();
        java.lang.Class<?> wildcardClass82 = obj81.getClass();
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        java.lang.Class[] classArray85 = new java.lang.Class[] { wildcardClass82, wildcardClass84 };
        generator79.setClasses(classArray85);
        generator74.setDelegates((java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        generator38.setDelegates((java.lang.Object[]) classArray85);
        generator0.setClasses(classArray85);
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(classArray85);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        generator7.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        generator22.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        generator22.setDelegates((java.lang.Object[]) classArray33);
        generator17.setDelegates((java.lang.Object[]) classArray33);
        generator7.setDelegates((java.lang.Object[]) classArray33);
        generator0.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        java.lang.ClassLoader classLoader47 = generator39.getClassLoader();
        generator0.setClassLoader(classLoader47);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        java.lang.Class<?> wildcardClass51 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator13.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator13.setDelegates((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        boolean boolean47 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        boolean boolean59 = generator57.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator57.getNamingPolicy();
        boolean boolean61 = generator57.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getAttemptLoad();
        java.lang.Object obj64 = new java.lang.Object();
        java.lang.Class<?> wildcardClass65 = obj64.getClass();
        java.lang.Object obj66 = new java.lang.Object();
        java.lang.Class<?> wildcardClass67 = obj66.getClass();
        java.lang.Class[] classArray68 = new java.lang.Class[] { wildcardClass65, wildcardClass67 };
        generator62.setClasses(classArray68);
        generator57.setDelegates((java.lang.Object[]) classArray68);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(classArray68);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getAttemptLoad();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Class[] classArray9 = new java.lang.Class[] { wildcardClass6, wildcardClass8 };
        generator3.setClasses(classArray9);
        boolean boolean11 = generator3.getUseCache();
        boolean boolean12 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        boolean boolean19 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        generator22.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        generator22.setDelegates((java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        generator3.setDelegates((java.lang.Object[]) classArray33);
        java.lang.ClassLoader classLoader38 = generator3.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.asm.ClassVisitor classVisitor40 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        boolean boolean15 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator13.getStrategy();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setClasses(classArray29);
        generator0.setClasses(classArray29);
        java.lang.ClassLoader classLoader34 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass35 = classLoader34.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        generator56.setDelegates((java.lang.Object[]) classArray67);
        generator51.setClasses(classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator72.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy75);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator13.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator13.setDelegates((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        boolean boolean47 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin58 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass4 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        generator12.setDelegates((java.lang.Object[]) classArray23);
        generator7.setDelegates((java.lang.Object[]) classArray23);
        generator4.setDelegates((java.lang.Object[]) classArray23);
        generator0.setDelegates((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        generator0.setStrategy(generatorStrategy35);
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        boolean boolean29 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator35.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setUseCache(false);
        generator39.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Class[] classArray50 = new java.lang.Class[] { wildcardClass47, wildcardClass49 };
        generator44.setClasses(classArray50);
        java.lang.Class<?> wildcardClass52 = generator44.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator53.getNamingPolicy();
        java.lang.Class<?> wildcardClass57 = namingPolicy56.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.Object obj60 = new java.lang.Object();
        java.lang.Class<?> wildcardClass61 = obj60.getClass();
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass61, wildcardClass63 };
        generator58.setClasses(classArray64);
        java.lang.Class<?> wildcardClass66 = generator58.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        java.lang.Object obj71 = new java.lang.Object();
        java.lang.Class<?> wildcardClass72 = obj71.getClass();
        java.lang.Object obj73 = new java.lang.Object();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass72, wildcardClass74 };
        generator69.setClasses(classArray75);
        java.lang.Class<?> wildcardClass77 = generator69.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator78.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator78.getNamingPolicy();
        java.lang.Class<?> wildcardClass82 = namingPolicy81.getClass();
        java.lang.Class[] classArray83 = new java.lang.Class[] { wildcardClass52, wildcardClass57, wildcardClass66, wildcardClass68, wildcardClass77, wildcardClass82 };
        generator39.setClasses(classArray83);
        generator35.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator86.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator86.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy89);
        generator0.setNamingPolicy(namingPolicy89);
        boolean boolean92 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin9 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        generator12.setDelegates((java.lang.Object[]) classArray23);
        generator7.setDelegates((java.lang.Object[]) classArray23);
        generator4.setDelegates((java.lang.Object[]) classArray23);
        generator0.setDelegates((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setUseCache(false);
        boolean boolean41 = generator38.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        generator50.setDelegates((java.lang.Object[]) classArray61);
        generator45.setDelegates((java.lang.Object[]) classArray61);
        generator42.setDelegates((java.lang.Object[]) classArray61);
        generator38.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        boolean boolean72 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator70.getStrategy();
        generator67.setStrategy(generatorStrategy73);
        generator38.setStrategy(generatorStrategy73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator76.getStrategy();
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator82.getStrategy();
        generator81.setStrategy(generatorStrategy84);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getAttemptLoad();
        java.lang.Object obj88 = new java.lang.Object();
        java.lang.Class<?> wildcardClass89 = obj88.getClass();
        java.lang.Object obj90 = new java.lang.Object();
        java.lang.Class<?> wildcardClass91 = obj90.getClass();
        java.lang.Class[] classArray92 = new java.lang.Class[] { wildcardClass89, wildcardClass91 };
        generator86.setClasses(classArray92);
        generator81.setDelegates((java.lang.Object[]) classArray92);
        generator76.setDelegates((java.lang.Object[]) classArray92);
        generator38.setClasses(classArray92);
        generator0.setDelegates((java.lang.Object[]) classArray92);
        org.mockito.asm.ClassVisitor classVisitor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(classArray92);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        java.lang.Object[] objArray8 = null;
        generator0.setDelegates(objArray8);
        boolean boolean10 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        boolean boolean55 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin56 = generator0.create();
        java.lang.ClassLoader classLoader57 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classLoader57);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator11.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        generator11.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator27.getStrategy();
        generator27.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setUseCache(false);
        generator38.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class[] classArray49 = new java.lang.Class[] { wildcardClass46, wildcardClass48 };
        generator43.setClasses(classArray49);
        java.lang.Class<?> wildcardClass51 = generator43.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator52.getNamingPolicy();
        java.lang.Class<?> wildcardClass56 = namingPolicy55.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Class[] classArray63 = new java.lang.Class[] { wildcardClass60, wildcardClass62 };
        generator57.setClasses(classArray63);
        java.lang.Class<?> wildcardClass65 = generator57.getClass();
        java.lang.Object obj66 = new java.lang.Object();
        java.lang.Class<?> wildcardClass67 = obj66.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.Object obj72 = new java.lang.Object();
        java.lang.Class<?> wildcardClass73 = obj72.getClass();
        java.lang.Class[] classArray74 = new java.lang.Class[] { wildcardClass71, wildcardClass73 };
        generator68.setClasses(classArray74);
        java.lang.Class<?> wildcardClass76 = generator68.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator77.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator77.getNamingPolicy();
        java.lang.Class<?> wildcardClass81 = namingPolicy80.getClass();
        java.lang.Class[] classArray82 = new java.lang.Class[] { wildcardClass51, wildcardClass56, wildcardClass65, wildcardClass67, wildcardClass76, wildcardClass81 };
        generator38.setClasses(classArray82);
        generator27.setClasses(classArray82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator27.getStrategy();
        java.lang.ClassLoader classLoader86 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader86);
        java.lang.Class<?> wildcardClass88 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass11 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator0.setStrategy(generatorStrategy58);
        boolean boolean60 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        boolean boolean63 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator61.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        java.lang.Object obj68 = new java.lang.Object();
        java.lang.Class<?> wildcardClass69 = obj68.getClass();
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.Class[] classArray72 = new java.lang.Class[] { wildcardClass69, wildcardClass71 };
        generator66.setClasses(classArray72);
        generator65.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        java.lang.ClassLoader classLoader78 = null;
        generator75.setClassLoader(classLoader78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        generator80.setStrategy(generatorStrategy83);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        java.lang.Object obj87 = new java.lang.Object();
        java.lang.Class<?> wildcardClass88 = obj87.getClass();
        java.lang.Object obj89 = new java.lang.Object();
        java.lang.Class<?> wildcardClass90 = obj89.getClass();
        java.lang.Class[] classArray91 = new java.lang.Class[] { wildcardClass88, wildcardClass90 };
        generator85.setClasses(classArray91);
        generator80.setDelegates((java.lang.Object[]) classArray91);
        generator75.setDelegates((java.lang.Object[]) classArray91);
        generator65.setDelegates((java.lang.Object[]) classArray91);
        generator61.setClasses(classArray91);
        generator0.setClasses(classArray91);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(classArray91);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean54 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setUseCache(false);
        boolean boolean25 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Class[] classArray32 = new java.lang.Class[] { wildcardClass29, wildcardClass31 };
        generator26.setClasses(classArray32);
        boolean boolean34 = generator26.getUseCache();
        boolean boolean35 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator36.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        boolean boolean42 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator40.getStrategy();
        generator36.setStrategy(generatorStrategy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        generator45.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass53, wildcardClass55 };
        generator50.setClasses(classArray56);
        generator45.setDelegates((java.lang.Object[]) classArray56);
        generator36.setClasses(classArray56);
        generator26.setDelegates((java.lang.Object[]) classArray56);
        generator22.setClasses(classArray56);
        generator0.setDelegates((java.lang.Object[]) classArray56);
        boolean boolean63 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator20.setDelegates((java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        boolean boolean47 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator45.getStrategy();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        generator50.setDelegates((java.lang.Object[]) classArray61);
        generator45.setClasses(classArray61);
        generator0.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator13.getNamingPolicy();
        java.lang.ClassLoader classLoader17 = null;
        generator13.setClassLoader(classLoader17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator19.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator23.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator23.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy27);
        generator0.setNamingPolicy(namingPolicy27);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        generator12.setDelegates((java.lang.Object[]) classArray23);
        generator7.setDelegates((java.lang.Object[]) classArray23);
        generator4.setDelegates((java.lang.Object[]) classArray23);
        generator0.setDelegates((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        generator38.setDelegates((java.lang.Object[]) classArray54);
        generator0.setClasses(classArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin59 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        boolean boolean33 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator31.getStrategy();
        generator27.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator52.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator55.getStrategy();
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator61.getStrategy();
        generator60.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Object obj69 = new java.lang.Object();
        java.lang.Class<?> wildcardClass70 = obj69.getClass();
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass68, wildcardClass70 };
        generator65.setClasses(classArray71);
        generator60.setDelegates((java.lang.Object[]) classArray71);
        generator55.setDelegates((java.lang.Object[]) classArray71);
        generator52.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator52.getStrategy();
        generator52.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin79 = generator52.create();
        generator52.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator52.getStrategy();
        generator0.setStrategy(generatorStrategy82);
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        generator8.setClasses(classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        generator8.setStrategy(generatorStrategy20);
        boolean boolean22 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader23 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader23);
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        generator0.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass31 = generatorStrategy30.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean10 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator10.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        generator18.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass41, wildcardClass43 };
        generator38.setClasses(classArray44);
        generator33.setDelegates((java.lang.Object[]) classArray44);
        generator28.setDelegates((java.lang.Object[]) classArray44);
        generator18.setDelegates((java.lang.Object[]) classArray44);
        java.lang.ClassLoader classLoader49 = generator18.getClassLoader();
        generator0.setClassLoader(classLoader49);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor53 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classLoader49);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass56 = classLoader55.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator6.setDelegates((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator19.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        generator34.setDelegates((java.lang.Object[]) classArray45);
        generator29.setDelegates((java.lang.Object[]) classArray45);
        generator19.setDelegates((java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader50 = generator19.getClassLoader();
        generator6.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setUseCache(false);
        boolean boolean57 = generator54.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.Object obj60 = new java.lang.Object();
        java.lang.Class<?> wildcardClass61 = obj60.getClass();
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass61, wildcardClass63 };
        generator58.setClasses(classArray64);
        boolean boolean66 = generator58.getUseCache();
        boolean boolean67 = generator58.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator68.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        boolean boolean74 = generator72.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator72.getStrategy();
        generator68.setStrategy(generatorStrategy75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator78.getStrategy();
        generator77.setStrategy(generatorStrategy80);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getAttemptLoad();
        java.lang.Object obj84 = new java.lang.Object();
        java.lang.Class<?> wildcardClass85 = obj84.getClass();
        java.lang.Object obj86 = new java.lang.Object();
        java.lang.Class<?> wildcardClass87 = obj86.getClass();
        java.lang.Class[] classArray88 = new java.lang.Class[] { wildcardClass85, wildcardClass87 };
        generator82.setClasses(classArray88);
        generator77.setDelegates((java.lang.Object[]) classArray88);
        generator68.setClasses(classArray88);
        generator58.setDelegates((java.lang.Object[]) classArray88);
        generator54.setClasses(classArray88);
        generator0.setClasses(classArray88);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(classArray88);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        boolean boolean51 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass53 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy34);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator3.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        java.lang.Class<?> wildcardClass13 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getAttemptLoad();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Class[] classArray17 = new java.lang.Class[] { wildcardClass14, wildcardClass16 };
        generator11.setClasses(classArray17);
        generator7.setDelegates((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Class[] classArray27 = new java.lang.Class[] { wildcardClass24, wildcardClass26 };
        generator21.setClasses(classArray27);
        generator20.setClasses(classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator36.getStrategy();
        generator35.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Class[] classArray46 = new java.lang.Class[] { wildcardClass43, wildcardClass45 };
        generator40.setClasses(classArray46);
        generator35.setDelegates((java.lang.Object[]) classArray46);
        generator30.setDelegates((java.lang.Object[]) classArray46);
        generator20.setDelegates((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader51 = generator20.getClassLoader();
        generator7.setClassLoader(classLoader51);
        generator0.setClassLoader(classLoader51);
        boolean boolean54 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean57 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass58 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean54 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator55.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator55.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader61 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setUseCache(false);
        generator7.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        java.lang.Class<?> wildcardClass20 = generator12.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator21.getNamingPolicy();
        java.lang.Class<?> wildcardClass25 = namingPolicy24.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Class[] classArray32 = new java.lang.Class[] { wildcardClass29, wildcardClass31 };
        generator26.setClasses(classArray32);
        java.lang.Class<?> wildcardClass34 = generator26.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Class[] classArray43 = new java.lang.Class[] { wildcardClass40, wildcardClass42 };
        generator37.setClasses(classArray43);
        java.lang.Class<?> wildcardClass45 = generator37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator46.getNamingPolicy();
        java.lang.Class<?> wildcardClass50 = namingPolicy49.getClass();
        java.lang.Class[] classArray51 = new java.lang.Class[] { wildcardClass20, wildcardClass25, wildcardClass34, wildcardClass36, wildcardClass45, wildcardClass50 };
        generator7.setClasses(classArray51);
        generator4.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy56);
        generator0.setNamingPolicy(namingPolicy56);
        boolean boolean59 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        boolean boolean20 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        generator12.setDelegates((java.lang.Object[]) classArray23);
        generator7.setDelegates((java.lang.Object[]) classArray23);
        generator4.setDelegates((java.lang.Object[]) classArray23);
        generator0.setDelegates((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        generator0.setStrategy(generatorStrategy35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass13 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        boolean boolean51 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        boolean boolean38 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator36.getStrategy();
        generator33.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator33.getNamingPolicy();
        generator33.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        generator44.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass52, wildcardClass54 };
        generator49.setClasses(classArray55);
        generator44.setDelegates((java.lang.Object[]) classArray55);
        generator33.setDelegates((java.lang.Object[]) classArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator33.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy59);
        java.lang.Class<?> wildcardClass61 = namingPolicy59.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        java.lang.ClassLoader classLoader10 = null;
        generator0.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass13 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator10.setDelegates((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        java.lang.Class<?> wildcardClass31 = classArray26.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator9.setDelegates((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor26 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        generator24.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Class[] classArray35 = new java.lang.Class[] { wildcardClass32, wildcardClass34 };
        generator29.setClasses(classArray35);
        generator24.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.ClassLoader classLoader46 = null;
        generator43.setClassLoader(classLoader46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        generator48.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getAttemptLoad();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Class[] classArray59 = new java.lang.Class[] { wildcardClass56, wildcardClass58 };
        generator53.setClasses(classArray59);
        generator48.setDelegates((java.lang.Object[]) classArray59);
        generator43.setDelegates((java.lang.Object[]) classArray59);
        generator40.setDelegates((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setUseCache(false);
        boolean boolean67 = generator64.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator71.getStrategy();
        java.lang.ClassLoader classLoader74 = null;
        generator71.setClassLoader(classLoader74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator77.getStrategy();
        generator76.setStrategy(generatorStrategy79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        java.lang.Object obj85 = new java.lang.Object();
        java.lang.Class<?> wildcardClass86 = obj85.getClass();
        java.lang.Class[] classArray87 = new java.lang.Class[] { wildcardClass84, wildcardClass86 };
        generator81.setClasses(classArray87);
        generator76.setDelegates((java.lang.Object[]) classArray87);
        generator71.setDelegates((java.lang.Object[]) classArray87);
        generator68.setDelegates((java.lang.Object[]) classArray87);
        generator64.setDelegates((java.lang.Object[]) classArray87);
        generator40.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin94 = generator40.create();
        boolean boolean95 = generator40.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin96 = generator40.create();
        java.lang.ClassLoader classLoader97 = generator40.getClassLoader();
        generator0.setClassLoader(classLoader97);
        java.lang.Class<?> wildcardClass99 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classLoader97);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        generator56.setDelegates((java.lang.Object[]) classArray67);
        generator51.setClasses(classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy72);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator9.setDelegates((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        boolean boolean26 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator24.getStrategy();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator24.setStrategy(generatorStrategy31);
        generator24.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        boolean boolean42 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator40.getStrategy();
        generator37.setStrategy(generatorStrategy43);
        generator35.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator35.getStrategy();
        generator24.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        generator0.setStyle(1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        generator54.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator64.getStrategy();
        generator54.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator54.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator69.getStrategy();
        generator54.setStrategy(generatorStrategy71);
        generator0.setStrategy(generatorStrategy71);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator0.setClasses(classArray26);
        boolean boolean30 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass31 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setUseCache(false);
        generator12.setStyle(0);
        boolean boolean17 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator18.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator18.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        boolean boolean24 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Class[] classArray32 = new java.lang.Class[] { wildcardClass29, wildcardClass31 };
        generator26.setClasses(classArray32);
        generator22.setDelegates((java.lang.Object[]) classArray32);
        generator12.setDelegates((java.lang.Object[]) classArray32);
        generator10.setDelegates((java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classArray32);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin35 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass9 = generatorStrategy8.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        generator11.setDelegates((java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        boolean boolean29 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class[] classArray37 = new java.lang.Class[] { wildcardClass34, wildcardClass36 };
        generator31.setClasses(classArray37);
        generator27.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setUseCache(false);
        generator44.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass52, wildcardClass54 };
        generator49.setClasses(classArray55);
        java.lang.Class<?> wildcardClass57 = generator49.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator58.getNamingPolicy();
        java.lang.Class<?> wildcardClass62 = namingPolicy61.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass66, wildcardClass68 };
        generator63.setClasses(classArray69);
        java.lang.Class<?> wildcardClass71 = generator63.getClass();
        java.lang.Object obj72 = new java.lang.Object();
        java.lang.Class<?> wildcardClass73 = obj72.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getAttemptLoad();
        java.lang.Object obj76 = new java.lang.Object();
        java.lang.Class<?> wildcardClass77 = obj76.getClass();
        java.lang.Object obj78 = new java.lang.Object();
        java.lang.Class<?> wildcardClass79 = obj78.getClass();
        java.lang.Class[] classArray80 = new java.lang.Class[] { wildcardClass77, wildcardClass79 };
        generator74.setClasses(classArray80);
        java.lang.Class<?> wildcardClass82 = generator74.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator83.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator83.getNamingPolicy();
        java.lang.Class<?> wildcardClass87 = namingPolicy86.getClass();
        java.lang.Class[] classArray88 = new java.lang.Class[] { wildcardClass57, wildcardClass62, wildcardClass71, wildcardClass73, wildcardClass82, wildcardClass87 };
        generator44.setClasses(classArray88);
        generator40.setClasses(classArray88);
        java.lang.ClassLoader classLoader91 = generator40.getClassLoader();
        generator27.setClassLoader(classLoader91);
        generator0.setClassLoader(classLoader91);
        java.lang.Class<?> wildcardClass94 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        generator57.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator57.getStrategy();
        generator0.setStrategy(generatorStrategy64);
        boolean boolean66 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator8.getNamingPolicy();
        java.lang.ClassLoader classLoader12 = null;
        generator8.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        boolean boolean17 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        generator15.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Class[] classArray35 = new java.lang.Class[] { wildcardClass32, wildcardClass34 };
        generator29.setClasses(classArray35);
        generator28.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        generator38.setDelegates((java.lang.Object[]) classArray54);
        generator28.setDelegates((java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader59 = generator28.getClassLoader();
        generator15.setClassLoader(classLoader59);
        generator8.setClassLoader(classLoader59);
        generator0.setClassLoader(classLoader59);
        java.lang.Class<?> wildcardClass63 = classLoader59.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator20.setDelegates((java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        boolean boolean47 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator45.getStrategy();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        generator50.setDelegates((java.lang.Object[]) classArray61);
        generator45.setClasses(classArray61);
        generator0.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator0.getStrategy();
        boolean boolean67 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass68 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        generator56.setDelegates((java.lang.Object[]) classArray67);
        generator51.setClasses(classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.asm.ClassVisitor classVisitor72 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator3.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass21, wildcardClass23 };
        generator18.setClasses(classArray24);
        generator14.setDelegates((java.lang.Object[]) classArray24);
        generator0.setClasses(classArray24);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin37 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader36);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        boolean boolean14 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        boolean boolean25 = generator17.getAttemptLoad();
        boolean boolean26 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        java.lang.Class<?> wildcardClass29 = namingPolicy27.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        boolean boolean8 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setUseCache(false);
        generator9.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        java.lang.Class<?> wildcardClass22 = generator14.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator23.getNamingPolicy();
        java.lang.Class<?> wildcardClass27 = namingPolicy26.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass31, wildcardClass33 };
        generator28.setClasses(classArray34);
        java.lang.Class<?> wildcardClass36 = generator28.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        java.lang.Class<?> wildcardClass47 = generator39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator48.getNamingPolicy();
        java.lang.Class<?> wildcardClass52 = namingPolicy51.getClass();
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass22, wildcardClass27, wildcardClass36, wildcardClass38, wildcardClass47, wildcardClass52 };
        generator9.setClasses(classArray53);
        generator5.setDelegates((java.lang.Object[]) classArray53);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Class[] classArray65 = new java.lang.Class[] { wildcardClass62, wildcardClass64 };
        generator59.setClasses(classArray65);
        generator58.setClasses(classArray65);
        generator57.setClasses(classArray65);
        generator0.setClasses(classArray65);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classArray65);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator26.getStrategy();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        generator26.setStrategy(generatorStrategy33);
        generator0.setStrategy(generatorStrategy33);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        java.lang.ClassLoader classLoader59 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        boolean boolean64 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator62.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        java.lang.Object obj68 = new java.lang.Object();
        java.lang.Class<?> wildcardClass69 = obj68.getClass();
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.Class[] classArray72 = new java.lang.Class[] { wildcardClass69, wildcardClass71 };
        generator66.setClasses(classArray72);
        generator62.setDelegates((java.lang.Object[]) classArray72);
        generator0.setClasses(classArray72);
        java.lang.Class<?> wildcardClass76 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        boolean boolean17 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        boolean boolean19 = generator15.getAttemptLoad();
        boolean boolean20 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setUseCache(false);
        generator22.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        boolean boolean30 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setUseCache(false);
        generator31.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Class[] classArray42 = new java.lang.Class[] { wildcardClass39, wildcardClass41 };
        generator36.setClasses(classArray42);
        java.lang.Class<?> wildcardClass44 = generator36.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator45.getNamingPolicy();
        java.lang.Class<?> wildcardClass49 = namingPolicy48.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass53, wildcardClass55 };
        generator50.setClasses(classArray56);
        java.lang.Class<?> wildcardClass58 = generator50.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        java.lang.Class<?> wildcardClass69 = generator61.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator70.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator70.getNamingPolicy();
        java.lang.Class<?> wildcardClass74 = namingPolicy73.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass44, wildcardClass49, wildcardClass58, wildcardClass60, wildcardClass69, wildcardClass74 };
        generator31.setClasses(classArray75);
        generator27.setDelegates((java.lang.Object[]) classArray75);
        generator22.setDelegates((java.lang.Object[]) classArray75);
        generator15.setDelegates((java.lang.Object[]) classArray75);
        generator0.setClasses(classArray75);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        generator56.setDelegates((java.lang.Object[]) classArray67);
        generator51.setClasses(classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator72.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        boolean boolean80 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator78.getStrategy();
        boolean boolean82 = generator78.getAttemptLoad();
        boolean boolean83 = generator78.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator78.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy84);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator88 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean89 = generator88.getAttemptLoad();
        java.lang.Object obj90 = new java.lang.Object();
        java.lang.Class<?> wildcardClass91 = obj90.getClass();
        java.lang.Object obj92 = new java.lang.Object();
        java.lang.Class<?> wildcardClass93 = obj92.getClass();
        java.lang.Class[] classArray94 = new java.lang.Class[] { wildcardClass91, wildcardClass93 };
        generator88.setClasses(classArray94);
        generator87.setClasses(classArray94);
        generator86.setClasses(classArray94);
        generator0.setDelegates((java.lang.Object[]) classArray94);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(classArray94);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator23.getNamingPolicy();
        java.lang.ClassLoader classLoader27 = null;
        generator23.setClassLoader(classLoader27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        boolean boolean32 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        generator30.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Class[] classArray50 = new java.lang.Class[] { wildcardClass47, wildcardClass49 };
        generator44.setClasses(classArray50);
        generator43.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator53.getStrategy();
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        generator58.setStrategy(generatorStrategy61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass66, wildcardClass68 };
        generator63.setClasses(classArray69);
        generator58.setDelegates((java.lang.Object[]) classArray69);
        generator53.setDelegates((java.lang.Object[]) classArray69);
        generator43.setDelegates((java.lang.Object[]) classArray69);
        java.lang.ClassLoader classLoader74 = generator43.getClassLoader();
        generator30.setClassLoader(classLoader74);
        generator23.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        boolean boolean67 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator0.setStrategy(generatorStrategy58);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classLoader62);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        generator5.setStyle(0);
        boolean boolean10 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        boolean boolean19 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setUseCache(false);
        generator20.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Class[] classArray31 = new java.lang.Class[] { wildcardClass28, wildcardClass30 };
        generator25.setClasses(classArray31);
        java.lang.Class<?> wildcardClass33 = generator25.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator34.getNamingPolicy();
        java.lang.Class<?> wildcardClass38 = namingPolicy37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        java.lang.Class<?> wildcardClass47 = generator39.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass53, wildcardClass55 };
        generator50.setClasses(classArray56);
        java.lang.Class<?> wildcardClass58 = generator50.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.Class<?> wildcardClass63 = namingPolicy62.getClass();
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass33, wildcardClass38, wildcardClass47, wildcardClass49, wildcardClass58, wildcardClass63 };
        generator20.setClasses(classArray64);
        generator16.setDelegates((java.lang.Object[]) classArray64);
        generator11.setDelegates((java.lang.Object[]) classArray64);
        generator5.setDelegates((java.lang.Object[]) classArray64);
        generator0.setClasses(classArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin70 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classArray64);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        boolean boolean37 = generator34.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        generator46.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass54, wildcardClass56 };
        generator51.setClasses(classArray57);
        generator46.setDelegates((java.lang.Object[]) classArray57);
        generator41.setDelegates((java.lang.Object[]) classArray57);
        generator38.setDelegates((java.lang.Object[]) classArray57);
        generator34.setDelegates((java.lang.Object[]) classArray57);
        generator10.setDelegates((java.lang.Object[]) classArray57);
        generator0.setClasses(classArray57);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classArray57);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        generator14.setStyle(0);
        boolean boolean19 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setUseCache(false);
        generator20.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        boolean boolean28 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        generator29.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        java.lang.Class<?> wildcardClass56 = generator48.getClass();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Class[] classArray65 = new java.lang.Class[] { wildcardClass62, wildcardClass64 };
        generator59.setClasses(classArray65);
        java.lang.Class<?> wildcardClass67 = generator59.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator68.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator68.getNamingPolicy();
        java.lang.Class<?> wildcardClass72 = namingPolicy71.getClass();
        java.lang.Class[] classArray73 = new java.lang.Class[] { wildcardClass42, wildcardClass47, wildcardClass56, wildcardClass58, wildcardClass67, wildcardClass72 };
        generator29.setClasses(classArray73);
        generator25.setDelegates((java.lang.Object[]) classArray73);
        generator20.setDelegates((java.lang.Object[]) classArray73);
        generator14.setDelegates((java.lang.Object[]) classArray73);
        generator0.setClasses(classArray73);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin79 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(classArray73);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = null;
        generator0.setClasses(classArray51);
        generator0.setStyle((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        generator5.setStyle(0);
        boolean boolean10 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        boolean boolean19 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setUseCache(false);
        generator20.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Class[] classArray31 = new java.lang.Class[] { wildcardClass28, wildcardClass30 };
        generator25.setClasses(classArray31);
        java.lang.Class<?> wildcardClass33 = generator25.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator34.getNamingPolicy();
        java.lang.Class<?> wildcardClass38 = namingPolicy37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        java.lang.Class<?> wildcardClass47 = generator39.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass53, wildcardClass55 };
        generator50.setClasses(classArray56);
        java.lang.Class<?> wildcardClass58 = generator50.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.Class<?> wildcardClass63 = namingPolicy62.getClass();
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass33, wildcardClass38, wildcardClass47, wildcardClass49, wildcardClass58, wildcardClass63 };
        generator20.setClasses(classArray64);
        generator16.setDelegates((java.lang.Object[]) classArray64);
        generator11.setDelegates((java.lang.Object[]) classArray64);
        generator5.setDelegates((java.lang.Object[]) classArray64);
        generator0.setClasses(classArray64);
        boolean boolean70 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setStyle((int) (byte) 1);
        boolean boolean21 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.beans.IntrospectionException-->java.lang.Object not superclass of java.lang.Object");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Class[] classArray11 = new java.lang.Class[] { wildcardClass8, wildcardClass10 };
        generator5.setClasses(classArray11);
        generator4.setClasses(classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator14.setDelegates((java.lang.Object[]) classArray30);
        generator4.setDelegates((java.lang.Object[]) classArray30);
        generator0.setClasses(classArray30);
        boolean boolean36 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        generator56.setDelegates((java.lang.Object[]) classArray67);
        generator51.setClasses(classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator72.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy77);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator0.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getAttemptLoad();
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        java.lang.Object obj64 = new java.lang.Object();
        java.lang.Class<?> wildcardClass65 = obj64.getClass();
        java.lang.Class[] classArray66 = new java.lang.Class[] { wildcardClass63, wildcardClass65 };
        generator60.setClasses(classArray66);
        boolean boolean68 = generator60.getUseCache();
        boolean boolean69 = generator60.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator70.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator70.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        boolean boolean76 = generator74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator74.getStrategy();
        generator70.setStrategy(generatorStrategy77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator80.getStrategy();
        generator79.setStrategy(generatorStrategy82);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        java.lang.Object obj86 = new java.lang.Object();
        java.lang.Class<?> wildcardClass87 = obj86.getClass();
        java.lang.Object obj88 = new java.lang.Object();
        java.lang.Class<?> wildcardClass89 = obj88.getClass();
        java.lang.Class[] classArray90 = new java.lang.Class[] { wildcardClass87, wildcardClass89 };
        generator84.setClasses(classArray90);
        generator79.setDelegates((java.lang.Object[]) classArray90);
        generator70.setClasses(classArray90);
        generator60.setDelegates((java.lang.Object[]) classArray90);
        generator0.setClasses(classArray90);
        boolean boolean96 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass98 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(classLoader97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        boolean boolean36 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator34.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass41, wildcardClass43 };
        generator38.setClasses(classArray44);
        generator34.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        generator47.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        java.lang.ClassLoader classLoader60 = null;
        generator57.setClassLoader(classLoader60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator63.getStrategy();
        generator62.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getAttemptLoad();
        java.lang.Object obj69 = new java.lang.Object();
        java.lang.Class<?> wildcardClass70 = obj69.getClass();
        java.lang.Object obj71 = new java.lang.Object();
        java.lang.Class<?> wildcardClass72 = obj71.getClass();
        java.lang.Class[] classArray73 = new java.lang.Class[] { wildcardClass70, wildcardClass72 };
        generator67.setClasses(classArray73);
        generator62.setDelegates((java.lang.Object[]) classArray73);
        generator57.setDelegates((java.lang.Object[]) classArray73);
        generator47.setDelegates((java.lang.Object[]) classArray73);
        java.lang.ClassLoader classLoader78 = generator47.getClassLoader();
        generator34.setClassLoader(classLoader78);
        java.lang.ClassLoader classLoader80 = generator34.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        java.lang.Object obj85 = new java.lang.Object();
        java.lang.Class<?> wildcardClass86 = obj85.getClass();
        java.lang.Class[] classArray87 = new java.lang.Class[] { wildcardClass84, wildcardClass86 };
        generator81.setClasses(classArray87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator81.getStrategy();
        generator81.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader92 = generator81.getClassLoader();
        generator34.setClassLoader(classLoader92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator34.getStrategy();
        generator0.setStrategy(generatorStrategy94);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        generator11.setDelegates((java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        boolean boolean29 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class[] classArray37 = new java.lang.Class[] { wildcardClass34, wildcardClass36 };
        generator31.setClasses(classArray37);
        generator27.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setUseCache(false);
        generator44.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass52, wildcardClass54 };
        generator49.setClasses(classArray55);
        java.lang.Class<?> wildcardClass57 = generator49.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator58.getNamingPolicy();
        java.lang.Class<?> wildcardClass62 = namingPolicy61.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass66, wildcardClass68 };
        generator63.setClasses(classArray69);
        java.lang.Class<?> wildcardClass71 = generator63.getClass();
        java.lang.Object obj72 = new java.lang.Object();
        java.lang.Class<?> wildcardClass73 = obj72.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getAttemptLoad();
        java.lang.Object obj76 = new java.lang.Object();
        java.lang.Class<?> wildcardClass77 = obj76.getClass();
        java.lang.Object obj78 = new java.lang.Object();
        java.lang.Class<?> wildcardClass79 = obj78.getClass();
        java.lang.Class[] classArray80 = new java.lang.Class[] { wildcardClass77, wildcardClass79 };
        generator74.setClasses(classArray80);
        java.lang.Class<?> wildcardClass82 = generator74.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator83.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator83.getNamingPolicy();
        java.lang.Class<?> wildcardClass87 = namingPolicy86.getClass();
        java.lang.Class[] classArray88 = new java.lang.Class[] { wildcardClass57, wildcardClass62, wildcardClass71, wildcardClass73, wildcardClass82, wildcardClass87 };
        generator44.setClasses(classArray88);
        generator40.setClasses(classArray88);
        java.lang.ClassLoader classLoader91 = generator40.getClassLoader();
        generator27.setClassLoader(classLoader91);
        generator0.setClassLoader(classLoader91);
        java.lang.Class<?> wildcardClass94 = classLoader91.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass56 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean54 = generator0.getUseCache();
        boolean boolean55 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader56 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy17);
        java.lang.Class<?> wildcardClass19 = generatorStrategy17.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setUseCache(false);
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        java.lang.Class<?> wildcardClass25 = generator17.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator26.getNamingPolicy();
        java.lang.Class<?> wildcardClass30 = namingPolicy29.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class[] classArray37 = new java.lang.Class[] { wildcardClass34, wildcardClass36 };
        generator31.setClasses(classArray37);
        java.lang.Class<?> wildcardClass39 = generator31.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass45, wildcardClass47 };
        generator42.setClasses(classArray48);
        java.lang.Class<?> wildcardClass50 = generator42.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator51.getNamingPolicy();
        java.lang.Class<?> wildcardClass55 = namingPolicy54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass25, wildcardClass30, wildcardClass39, wildcardClass41, wildcardClass50, wildcardClass55 };
        generator12.setClasses(classArray56);
        generator9.setDelegates((java.lang.Object[]) classArray56);
        generator0.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator60.getNamingPolicy();
        java.lang.ClassLoader classLoader64 = null;
        generator60.setClassLoader(classLoader64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator66.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator66.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator60.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator71.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        boolean boolean76 = generator74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator74.getStrategy();
        generator71.setStrategy(generatorStrategy77);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator71.getNamingPolicy();
        generator71.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator83.getStrategy();
        generator82.setStrategy(generatorStrategy85);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean88 = generator87.getAttemptLoad();
        java.lang.Object obj89 = new java.lang.Object();
        java.lang.Class<?> wildcardClass90 = obj89.getClass();
        java.lang.Object obj91 = new java.lang.Object();
        java.lang.Class<?> wildcardClass92 = obj91.getClass();
        java.lang.Class[] classArray93 = new java.lang.Class[] { wildcardClass90, wildcardClass92 };
        generator87.setClasses(classArray93);
        generator82.setDelegates((java.lang.Object[]) classArray93);
        generator71.setDelegates((java.lang.Object[]) classArray93);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator71.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy97);
        generator0.setNamingPolicy(namingPolicy97);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        boolean boolean14 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        java.lang.Object obj71 = new java.lang.Object();
        java.lang.Class<?> wildcardClass72 = obj71.getClass();
        java.lang.Object obj73 = new java.lang.Object();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass72, wildcardClass74 };
        generator69.setClasses(classArray75);
        generator68.setClasses(classArray75);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator78.getStrategy();
        generator68.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator68.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator83.getStrategy();
        generator68.setStrategy(generatorStrategy85);
        generator0.setStrategy(generatorStrategy85);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy85);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        boolean boolean11 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator9.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator9.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator22.setClasses(classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        java.lang.ClassLoader classLoader35 = null;
        generator32.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        generator37.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass45, wildcardClass47 };
        generator42.setClasses(classArray48);
        generator37.setDelegates((java.lang.Object[]) classArray48);
        generator32.setDelegates((java.lang.Object[]) classArray48);
        generator22.setDelegates((java.lang.Object[]) classArray48);
        java.lang.ClassLoader classLoader53 = generator22.getClassLoader();
        generator9.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = generator9.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getAttemptLoad();
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Object obj60 = new java.lang.Object();
        java.lang.Class<?> wildcardClass61 = obj60.getClass();
        java.lang.Class[] classArray62 = new java.lang.Class[] { wildcardClass59, wildcardClass61 };
        generator56.setClasses(classArray62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator56.getStrategy();
        generator56.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader67 = generator56.getClassLoader();
        generator9.setClassLoader(classLoader67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(generatorStrategy69);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Class[] classArray11 = new java.lang.Class[] { wildcardClass8, wildcardClass10 };
        generator5.setClasses(classArray11);
        generator0.setDelegates((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator19.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator25.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator29.getNamingPolicy();
        java.lang.ClassLoader classLoader33 = null;
        generator29.setClassLoader(classLoader33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator35.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator35.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy37);
        boolean boolean39 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        boolean boolean49 = generator41.getUseCache();
        boolean boolean50 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        boolean boolean57 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator55.getStrategy();
        generator51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator61.getStrategy();
        generator60.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Object obj69 = new java.lang.Object();
        java.lang.Class<?> wildcardClass70 = obj69.getClass();
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass68, wildcardClass70 };
        generator65.setClasses(classArray71);
        generator60.setDelegates((java.lang.Object[]) classArray71);
        generator51.setClasses(classArray71);
        generator41.setDelegates((java.lang.Object[]) classArray71);
        generator29.setClasses(classArray71);
        generator19.setDelegates((java.lang.Object[]) classArray71);
        generator14.setClasses(classArray71);
        generator0.setDelegates((java.lang.Object[]) classArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader80 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classArray71);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        boolean boolean37 = generator34.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        generator46.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass54, wildcardClass56 };
        generator51.setClasses(classArray57);
        generator46.setDelegates((java.lang.Object[]) classArray57);
        generator41.setDelegates((java.lang.Object[]) classArray57);
        generator38.setDelegates((java.lang.Object[]) classArray57);
        generator34.setDelegates((java.lang.Object[]) classArray57);
        generator10.setDelegates((java.lang.Object[]) classArray57);
        generator0.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(namingPolicy65);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator9.setDelegates((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean24 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator13.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator13.setDelegates((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        boolean boolean47 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        org.mockito.asm.ClassVisitor classVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        java.lang.Object[] objArray8 = null;
        generator0.setDelegates(objArray8);
        boolean boolean10 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator12.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator26.getStrategy();
        generator22.setStrategy(generatorStrategy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        generator31.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Class[] classArray42 = new java.lang.Class[] { wildcardClass39, wildcardClass41 };
        generator36.setClasses(classArray42);
        generator31.setDelegates((java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        java.lang.ClassLoader classLoader52 = null;
        generator49.setClassLoader(classLoader52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator55.getStrategy();
        generator54.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Class[] classArray65 = new java.lang.Class[] { wildcardClass62, wildcardClass64 };
        generator59.setClasses(classArray65);
        generator54.setDelegates((java.lang.Object[]) classArray65);
        generator49.setDelegates((java.lang.Object[]) classArray65);
        generator46.setDelegates((java.lang.Object[]) classArray65);
        generator22.setDelegates((java.lang.Object[]) classArray65);
        generator12.setDelegates((java.lang.Object[]) classArray65);
        generator0.setClasses(classArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classArray65);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        boolean boolean55 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin56 = generator0.create();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mixin56);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        boolean boolean8 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        generator17.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Class[] classArray28 = new java.lang.Class[] { wildcardClass25, wildcardClass27 };
        generator22.setClasses(classArray28);
        generator17.setDelegates((java.lang.Object[]) classArray28);
        generator12.setDelegates((java.lang.Object[]) classArray28);
        generator9.setDelegates((java.lang.Object[]) classArray28);
        generator5.setDelegates((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        boolean boolean39 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator5.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.ClassLoader classLoader46 = null;
        generator43.setClassLoader(classLoader46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        generator48.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getAttemptLoad();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Class[] classArray59 = new java.lang.Class[] { wildcardClass56, wildcardClass58 };
        generator53.setClasses(classArray59);
        generator48.setDelegates((java.lang.Object[]) classArray59);
        generator43.setDelegates((java.lang.Object[]) classArray59);
        generator5.setClasses(classArray59);
        generator0.setClasses(classArray59);
        java.lang.Class<?> wildcardClass65 = classArray59.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass7 = generator0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator0.setStrategy(generatorStrategy58);
        boolean boolean60 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        boolean boolean63 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass64 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass21, wildcardClass23 };
        generator18.setClasses(classArray24);
        generator14.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass31, wildcardClass33 };
        generator28.setClasses(classArray34);
        generator27.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        generator42.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.Object obj49 = new java.lang.Object();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass50, wildcardClass52 };
        generator47.setClasses(classArray53);
        generator42.setDelegates((java.lang.Object[]) classArray53);
        generator37.setDelegates((java.lang.Object[]) classArray53);
        generator27.setDelegates((java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader58 = generator27.getClassLoader();
        generator14.setClassLoader(classLoader58);
        generator7.setClassLoader(classLoader58);
        generator0.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader63 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader63);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator11.getNamingPolicy();
        generator11.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        generator22.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        generator22.setDelegates((java.lang.Object[]) classArray33);
        generator11.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy37);
        generator0.setStyle((int) (byte) 1);
        boolean boolean41 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator11.getStrategy();
        generator10.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        boolean boolean17 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator15.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy18);
        generator0.setNamingPolicy(namingPolicy18);
        java.lang.Class<?> wildcardClass21 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        boolean boolean40 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator38.getStrategy();
        boolean boolean42 = generator38.getAttemptLoad();
        boolean boolean43 = generator38.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator38.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator38.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        java.lang.Class<?> wildcardClass47 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = null;
        generator0.setClassLoader(classLoader23);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy22);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = null;
        generator0.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator26.getStrategy();
        boolean boolean30 = generator26.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        boolean boolean33 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator31.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Class[] classArray42 = new java.lang.Class[] { wildcardClass39, wildcardClass41 };
        generator36.setClasses(classArray42);
        generator35.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        generator50.setDelegates((java.lang.Object[]) classArray61);
        generator45.setDelegates((java.lang.Object[]) classArray61);
        generator35.setDelegates((java.lang.Object[]) classArray61);
        generator31.setClasses(classArray61);
        generator26.setDelegates((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray61);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        generator14.setStyle(0);
        boolean boolean19 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setUseCache(false);
        generator20.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        boolean boolean28 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        generator29.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        java.lang.Class<?> wildcardClass56 = generator48.getClass();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Class[] classArray65 = new java.lang.Class[] { wildcardClass62, wildcardClass64 };
        generator59.setClasses(classArray65);
        java.lang.Class<?> wildcardClass67 = generator59.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator68.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator68.getNamingPolicy();
        java.lang.Class<?> wildcardClass72 = namingPolicy71.getClass();
        java.lang.Class[] classArray73 = new java.lang.Class[] { wildcardClass42, wildcardClass47, wildcardClass56, wildcardClass58, wildcardClass67, wildcardClass72 };
        generator29.setClasses(classArray73);
        generator25.setDelegates((java.lang.Object[]) classArray73);
        generator20.setDelegates((java.lang.Object[]) classArray73);
        generator14.setDelegates((java.lang.Object[]) classArray73);
        generator0.setClasses(classArray73);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin85 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(classArray73);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator9.setDelegates((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Class[] classArray43 = new java.lang.Class[] { wildcardClass40, wildcardClass42 };
        generator37.setClasses(classArray43);
        generator32.setDelegates((java.lang.Object[]) classArray43);
        generator27.setDelegates((java.lang.Object[]) classArray43);
        generator24.setDelegates((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        boolean boolean49 = generator0.getAttemptLoad();
        boolean boolean50 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin51 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        java.lang.Class<?> wildcardClass16 = generator8.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator17.getNamingPolicy();
        java.lang.Class<?> wildcardClass21 = namingPolicy20.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Class[] classArray28 = new java.lang.Class[] { wildcardClass25, wildcardClass27 };
        generator22.setClasses(classArray28);
        java.lang.Class<?> wildcardClass30 = generator22.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        java.lang.Class<?> wildcardClass41 = generator33.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator42.getNamingPolicy();
        java.lang.Class<?> wildcardClass46 = namingPolicy45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass16, wildcardClass21, wildcardClass30, wildcardClass32, wildcardClass41, wildcardClass46 };
        generator3.setClasses(classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        boolean boolean52 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator50.getStrategy();
        generator0.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setUseCache(false);
        boolean boolean58 = generator55.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator62.getStrategy();
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        generator67.setStrategy(generatorStrategy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getAttemptLoad();
        java.lang.Object obj74 = new java.lang.Object();
        java.lang.Class<?> wildcardClass75 = obj74.getClass();
        java.lang.Object obj76 = new java.lang.Object();
        java.lang.Class<?> wildcardClass77 = obj76.getClass();
        java.lang.Class[] classArray78 = new java.lang.Class[] { wildcardClass75, wildcardClass77 };
        generator72.setClasses(classArray78);
        generator67.setDelegates((java.lang.Object[]) classArray78);
        generator62.setDelegates((java.lang.Object[]) classArray78);
        generator59.setDelegates((java.lang.Object[]) classArray78);
        generator55.setDelegates((java.lang.Object[]) classArray78);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        generator0.setStyle((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(classArray78);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        boolean boolean20 = generator0.getUseCache();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        java.lang.ClassLoader classLoader10 = null;
        generator0.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        generator13.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        boolean boolean21 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setUseCache(false);
        generator22.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        java.lang.Class<?> wildcardClass35 = generator27.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator36.getNamingPolicy();
        java.lang.Class<?> wildcardClass40 = namingPolicy39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass55, wildcardClass57 };
        generator52.setClasses(classArray58);
        java.lang.Class<?> wildcardClass60 = generator52.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator61.getNamingPolicy();
        java.lang.Class<?> wildcardClass65 = namingPolicy64.getClass();
        java.lang.Class[] classArray66 = new java.lang.Class[] { wildcardClass35, wildcardClass40, wildcardClass49, wildcardClass51, wildcardClass60, wildcardClass65 };
        generator22.setClasses(classArray66);
        generator18.setDelegates((java.lang.Object[]) classArray66);
        generator13.setDelegates((java.lang.Object[]) classArray66);
        generator0.setDelegates((java.lang.Object[]) classArray66);
        boolean boolean71 = generator0.getAttemptLoad();
        boolean boolean72 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator8.getNamingPolicy();
        java.lang.ClassLoader classLoader12 = null;
        generator8.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        boolean boolean17 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        generator15.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Class[] classArray35 = new java.lang.Class[] { wildcardClass32, wildcardClass34 };
        generator29.setClasses(classArray35);
        generator28.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        generator38.setDelegates((java.lang.Object[]) classArray54);
        generator28.setDelegates((java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader59 = generator28.getClassLoader();
        generator15.setClassLoader(classLoader59);
        generator8.setClassLoader(classLoader59);
        generator0.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass66, wildcardClass68 };
        generator63.setClasses(classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator63.getStrategy();
        generator0.setStrategy(generatorStrategy71);
        boolean boolean73 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin74 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setUseCache(false);
        generator6.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator11.getStrategy();
        boolean boolean14 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setUseCache(false);
        generator15.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        java.lang.Class<?> wildcardClass28 = generator20.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator29.getNamingPolicy();
        java.lang.Class<?> wildcardClass33 = namingPolicy32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Object obj49 = new java.lang.Object();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        java.lang.Class[] classArray51 = new java.lang.Class[] { wildcardClass48, wildcardClass50 };
        generator45.setClasses(classArray51);
        java.lang.Class<?> wildcardClass53 = generator45.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator54.getNamingPolicy();
        java.lang.Class<?> wildcardClass58 = namingPolicy57.getClass();
        java.lang.Class[] classArray59 = new java.lang.Class[] { wildcardClass28, wildcardClass33, wildcardClass42, wildcardClass44, wildcardClass53, wildcardClass58 };
        generator15.setClasses(classArray59);
        generator11.setDelegates((java.lang.Object[]) classArray59);
        generator6.setDelegates((java.lang.Object[]) classArray59);
        generator0.setDelegates((java.lang.Object[]) classArray59);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy67);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        boolean boolean20 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        boolean boolean40 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator38.getStrategy();
        generator35.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        boolean boolean52 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass57, wildcardClass59 };
        generator54.setClasses(classArray60);
        generator50.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        java.lang.Object obj66 = new java.lang.Object();
        java.lang.Class<?> wildcardClass67 = obj66.getClass();
        java.lang.Object obj68 = new java.lang.Object();
        java.lang.Class<?> wildcardClass69 = obj68.getClass();
        java.lang.Class[] classArray70 = new java.lang.Class[] { wildcardClass67, wildcardClass69 };
        generator64.setClasses(classArray70);
        generator63.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator73.getStrategy();
        java.lang.ClassLoader classLoader76 = null;
        generator73.setClassLoader(classLoader76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        generator78.setStrategy(generatorStrategy81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        java.lang.Object obj85 = new java.lang.Object();
        java.lang.Class<?> wildcardClass86 = obj85.getClass();
        java.lang.Object obj87 = new java.lang.Object();
        java.lang.Class<?> wildcardClass88 = obj87.getClass();
        java.lang.Class[] classArray89 = new java.lang.Class[] { wildcardClass86, wildcardClass88 };
        generator83.setClasses(classArray89);
        generator78.setDelegates((java.lang.Object[]) classArray89);
        generator73.setDelegates((java.lang.Object[]) classArray89);
        generator63.setDelegates((java.lang.Object[]) classArray89);
        java.lang.ClassLoader classLoader94 = generator63.getClassLoader();
        generator50.setClassLoader(classLoader94);
        generator43.setClassLoader(classLoader94);
        generator35.setClassLoader(classLoader94);
        generator0.setClassLoader(classLoader94);
        boolean boolean99 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator8.getNamingPolicy();
        java.lang.ClassLoader classLoader12 = null;
        generator8.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        boolean boolean17 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        generator15.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Class[] classArray35 = new java.lang.Class[] { wildcardClass32, wildcardClass34 };
        generator29.setClasses(classArray35);
        generator28.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        generator38.setDelegates((java.lang.Object[]) classArray54);
        generator28.setDelegates((java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader59 = generator28.getClassLoader();
        generator15.setClassLoader(classLoader59);
        generator8.setClassLoader(classLoader59);
        generator0.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass66, wildcardClass68 };
        generator63.setClasses(classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator63.getStrategy();
        generator0.setStrategy(generatorStrategy71);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(generatorStrategy71);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        generator0.setStyle((int) (byte) 1);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        boolean boolean9 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator11.getStrategy();
        generator10.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Class[] classArray21 = new java.lang.Class[] { wildcardClass18, wildcardClass20 };
        generator15.setClasses(classArray21);
        generator10.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        java.lang.Class<?> wildcardClass25 = classArray21.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator51.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass57 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        generator11.setDelegates((java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        boolean boolean26 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        generator0.setStyle((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        generator7.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        generator22.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        generator22.setDelegates((java.lang.Object[]) classArray33);
        generator17.setDelegates((java.lang.Object[]) classArray33);
        generator7.setDelegates((java.lang.Object[]) classArray33);
        generator0.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        java.lang.ClassLoader classLoader47 = generator39.getClassLoader();
        generator0.setClassLoader(classLoader47);
        generator0.setStyle(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Class[] classArray21 = new java.lang.Class[] { wildcardClass18, wildcardClass20 };
        generator15.setClasses(classArray21);
        boolean boolean23 = generator15.getAttemptLoad();
        boolean boolean24 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator15.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        generator11.setDelegates((java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator10.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        generator18.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass41, wildcardClass43 };
        generator38.setClasses(classArray44);
        generator33.setDelegates((java.lang.Object[]) classArray44);
        generator28.setDelegates((java.lang.Object[]) classArray44);
        generator18.setDelegates((java.lang.Object[]) classArray44);
        java.lang.ClassLoader classLoader49 = generator18.getClassLoader();
        generator0.setClassLoader(classLoader49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy51);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        java.lang.Object obj71 = new java.lang.Object();
        java.lang.Class<?> wildcardClass72 = obj71.getClass();
        java.lang.Object obj73 = new java.lang.Object();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass72, wildcardClass74 };
        generator69.setClasses(classArray75);
        generator68.setClasses(classArray75);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator78.getStrategy();
        generator68.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator68.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator83.getStrategy();
        generator68.setStrategy(generatorStrategy85);
        generator0.setStrategy(generatorStrategy85);
        java.lang.Class<?> wildcardClass88 = generatorStrategy85.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        generator0.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass60 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator3.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass21, wildcardClass23 };
        generator18.setClasses(classArray24);
        generator14.setDelegates((java.lang.Object[]) classArray24);
        generator0.setClasses(classArray24);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader30);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator5.getStrategy();
        generator2.setStrategy(generatorStrategy8);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator10.setDelegates((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator31.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setUseCache(false);
        generator35.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Class[] classArray46 = new java.lang.Class[] { wildcardClass43, wildcardClass45 };
        generator40.setClasses(classArray46);
        java.lang.Class<?> wildcardClass48 = generator40.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator49.getNamingPolicy();
        java.lang.Class<?> wildcardClass53 = namingPolicy52.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass57, wildcardClass59 };
        generator54.setClasses(classArray60);
        java.lang.Class<?> wildcardClass62 = generator54.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Object obj69 = new java.lang.Object();
        java.lang.Class<?> wildcardClass70 = obj69.getClass();
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass68, wildcardClass70 };
        generator65.setClasses(classArray71);
        java.lang.Class<?> wildcardClass73 = generator65.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator74.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator74.getNamingPolicy();
        java.lang.Class<?> wildcardClass78 = namingPolicy77.getClass();
        java.lang.Class[] classArray79 = new java.lang.Class[] { wildcardClass48, wildcardClass53, wildcardClass62, wildcardClass64, wildcardClass73, wildcardClass78 };
        generator35.setClasses(classArray79);
        generator31.setClasses(classArray79);
        java.lang.ClassLoader classLoader82 = generator31.getClassLoader();
        generator0.setClassLoader(classLoader82);
        generator0.setAttemptLoad(true);
        boolean boolean86 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean88 = generator87.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator87.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator87.getStrategy();
        generator0.setStrategy(generatorStrategy90);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        generator56.setDelegates((java.lang.Object[]) classArray67);
        generator51.setClasses(classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator72.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy75);
        java.lang.Class<?> wildcardClass77 = namingPolicy75.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        boolean boolean37 = generator34.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        generator46.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass54, wildcardClass56 };
        generator51.setClasses(classArray57);
        generator46.setDelegates((java.lang.Object[]) classArray57);
        generator41.setDelegates((java.lang.Object[]) classArray57);
        generator38.setDelegates((java.lang.Object[]) classArray57);
        generator34.setDelegates((java.lang.Object[]) classArray57);
        generator10.setDelegates((java.lang.Object[]) classArray57);
        generator0.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        java.lang.Object obj68 = new java.lang.Object();
        java.lang.Class<?> wildcardClass69 = obj68.getClass();
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.Class[] classArray72 = new java.lang.Class[] { wildcardClass69, wildcardClass71 };
        generator66.setClasses(classArray72);
        generator65.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        java.lang.ClassLoader classLoader78 = null;
        generator75.setClassLoader(classLoader78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        generator80.setStrategy(generatorStrategy83);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        java.lang.Object obj87 = new java.lang.Object();
        java.lang.Class<?> wildcardClass88 = obj87.getClass();
        java.lang.Object obj89 = new java.lang.Object();
        java.lang.Class<?> wildcardClass90 = obj89.getClass();
        java.lang.Class[] classArray91 = new java.lang.Class[] { wildcardClass88, wildcardClass90 };
        generator85.setClasses(classArray91);
        generator80.setDelegates((java.lang.Object[]) classArray91);
        generator75.setDelegates((java.lang.Object[]) classArray91);
        generator65.setDelegates((java.lang.Object[]) classArray91);
        java.lang.ClassLoader classLoader96 = generator65.getClassLoader();
        generator0.setClassLoader(classLoader96);
        java.lang.ClassLoader classLoader98 = generator0.getClassLoader();
        boolean boolean99 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(classLoader98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator0.setStrategy(generatorStrategy58);
        boolean boolean60 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        boolean boolean63 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator61.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        java.lang.Object obj68 = new java.lang.Object();
        java.lang.Class<?> wildcardClass69 = obj68.getClass();
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        java.lang.Class[] classArray72 = new java.lang.Class[] { wildcardClass69, wildcardClass71 };
        generator66.setClasses(classArray72);
        generator65.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        java.lang.ClassLoader classLoader78 = null;
        generator75.setClassLoader(classLoader78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        generator80.setStrategy(generatorStrategy83);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        java.lang.Object obj87 = new java.lang.Object();
        java.lang.Class<?> wildcardClass88 = obj87.getClass();
        java.lang.Object obj89 = new java.lang.Object();
        java.lang.Class<?> wildcardClass90 = obj89.getClass();
        java.lang.Class[] classArray91 = new java.lang.Class[] { wildcardClass88, wildcardClass90 };
        generator85.setClasses(classArray91);
        generator80.setDelegates((java.lang.Object[]) classArray91);
        generator75.setDelegates((java.lang.Object[]) classArray91);
        generator65.setDelegates((java.lang.Object[]) classArray91);
        generator61.setClasses(classArray91);
        generator0.setClasses(classArray91);
        boolean boolean98 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        generator7.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator7.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader22);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        generator12.setDelegates((java.lang.Object[]) classArray23);
        generator7.setDelegates((java.lang.Object[]) classArray23);
        generator4.setDelegates((java.lang.Object[]) classArray23);
        generator0.setDelegates((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        generator38.setDelegates((java.lang.Object[]) classArray54);
        generator0.setClasses(classArray54);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        boolean boolean63 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        boolean boolean69 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator67.getStrategy();
        generator64.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator64.getNamingPolicy();
        generator64.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator76.getStrategy();
        generator75.setStrategy(generatorStrategy78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.Object obj82 = new java.lang.Object();
        java.lang.Class<?> wildcardClass83 = obj82.getClass();
        java.lang.Object obj84 = new java.lang.Object();
        java.lang.Class<?> wildcardClass85 = obj84.getClass();
        java.lang.Class[] classArray86 = new java.lang.Class[] { wildcardClass83, wildcardClass85 };
        generator80.setClasses(classArray86);
        generator75.setDelegates((java.lang.Object[]) classArray86);
        generator64.setDelegates((java.lang.Object[]) classArray86);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator64.getStrategy();
        generator0.setStrategy(generatorStrategy90);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator0.setStrategy(generatorStrategy58);
        boolean boolean60 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator10.getStrategy();
        generator10.setStyle((int) (byte) 1);
        java.lang.Class[] classArray37 = new java.lang.Class[] {};
        generator10.setClasses(classArray37);
        generator0.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.asm.ClassVisitor classVisitor40 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classArray37);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        boolean boolean5 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Class[] classArray11 = new java.lang.Class[] { wildcardClass8, wildcardClass10 };
        generator5.setClasses(classArray11);
        generator0.setDelegates((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator19.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator25.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator29.getNamingPolicy();
        java.lang.ClassLoader classLoader33 = null;
        generator29.setClassLoader(classLoader33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator35.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator35.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy37);
        boolean boolean39 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        boolean boolean49 = generator41.getUseCache();
        boolean boolean50 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        boolean boolean57 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator55.getStrategy();
        generator51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator61.getStrategy();
        generator60.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Object obj69 = new java.lang.Object();
        java.lang.Class<?> wildcardClass70 = obj69.getClass();
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass68, wildcardClass70 };
        generator65.setClasses(classArray71);
        generator60.setDelegates((java.lang.Object[]) classArray71);
        generator51.setClasses(classArray71);
        generator41.setDelegates((java.lang.Object[]) classArray71);
        generator29.setClasses(classArray71);
        generator19.setDelegates((java.lang.Object[]) classArray71);
        generator14.setClasses(classArray71);
        generator0.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classArray71);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean54 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        boolean boolean12 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator10.setDelegates((java.lang.Object[]) classArray20);
        generator0.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        boolean boolean26 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator24.getStrategy();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        generator24.setClasses(classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        java.lang.ClassLoader classLoader50 = null;
        generator47.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator53.getStrategy();
        generator52.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Class[] classArray63 = new java.lang.Class[] { wildcardClass60, wildcardClass62 };
        generator57.setClasses(classArray63);
        generator52.setDelegates((java.lang.Object[]) classArray63);
        generator47.setDelegates((java.lang.Object[]) classArray63);
        generator44.setDelegates((java.lang.Object[]) classArray63);
        generator24.setClasses(classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        boolean boolean71 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator69.getStrategy();
        boolean boolean73 = generator69.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        generator74.setStrategy(generatorStrategy77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        java.lang.Object obj81 = new java.lang.Object();
        java.lang.Class<?> wildcardClass82 = obj81.getClass();
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        java.lang.Class[] classArray85 = new java.lang.Class[] { wildcardClass82, wildcardClass84 };
        generator79.setClasses(classArray85);
        generator74.setDelegates((java.lang.Object[]) classArray85);
        generator69.setClasses(classArray85);
        generator24.setDelegates((java.lang.Object[]) classArray85);
        generator0.setClasses(classArray85);
        boolean boolean91 = generator0.getUseCache();
        boolean boolean92 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin8 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        boolean boolean51 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        java.lang.Class<?> wildcardClass16 = generator8.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator17.getNamingPolicy();
        java.lang.Class<?> wildcardClass21 = namingPolicy20.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Class[] classArray28 = new java.lang.Class[] { wildcardClass25, wildcardClass27 };
        generator22.setClasses(classArray28);
        java.lang.Class<?> wildcardClass30 = generator22.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        java.lang.Class<?> wildcardClass41 = generator33.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator42.getNamingPolicy();
        java.lang.Class<?> wildcardClass46 = namingPolicy45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass16, wildcardClass21, wildcardClass30, wildcardClass32, wildcardClass41, wildcardClass46 };
        generator3.setClasses(classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy52);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 1);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass9 = generatorStrategy8.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator11.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        generator11.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader25);
        java.lang.Class<?> wildcardClass27 = classLoader25.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator13.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator13.setDelegates((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        boolean boolean47 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Class[] classArray65 = new java.lang.Class[] { wildcardClass62, wildcardClass64 };
        generator59.setClasses(classArray65);
        generator58.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        generator58.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator58.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getAttemptLoad();
        java.lang.Object obj75 = new java.lang.Object();
        java.lang.Class<?> wildcardClass76 = obj75.getClass();
        java.lang.Object obj77 = new java.lang.Object();
        java.lang.Class<?> wildcardClass78 = obj77.getClass();
        java.lang.Class[] classArray79 = new java.lang.Class[] { wildcardClass76, wildcardClass78 };
        generator73.setClasses(classArray79);
        boolean boolean81 = generator73.getAttemptLoad();
        boolean boolean82 = generator73.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator73.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator73.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy84);
        generator56.setNamingPolicy(namingPolicy84);
        generator0.setNamingPolicy(namingPolicy84);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        generator7.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        generator22.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        generator22.setDelegates((java.lang.Object[]) classArray33);
        generator17.setDelegates((java.lang.Object[]) classArray33);
        generator7.setDelegates((java.lang.Object[]) classArray33);
        generator0.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(namingPolicy39);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        boolean boolean30 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator28.getStrategy();
        generator24.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass41, wildcardClass43 };
        generator38.setClasses(classArray44);
        generator33.setDelegates((java.lang.Object[]) classArray44);
        generator24.setClasses(classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        generator56.setDelegates((java.lang.Object[]) classArray67);
        generator51.setDelegates((java.lang.Object[]) classArray67);
        generator48.setDelegates((java.lang.Object[]) classArray67);
        generator24.setDelegates((java.lang.Object[]) classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Class[] classArray23 = new java.lang.Class[] { wildcardClass20, wildcardClass22 };
        generator17.setClasses(classArray23);
        generator12.setDelegates((java.lang.Object[]) classArray23);
        generator7.setDelegates((java.lang.Object[]) classArray23);
        generator4.setDelegates((java.lang.Object[]) classArray23);
        generator0.setDelegates((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        generator0.setStrategy(generatorStrategy35);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        boolean boolean13 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator11.getStrategy();
        generator8.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator8.getNamingPolicy();
        boolean boolean17 = generator8.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator8.getNamingPolicy();
        generator8.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        generator21.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Class[] classArray35 = new java.lang.Class[] { wildcardClass32, wildcardClass34 };
        generator29.setClasses(classArray35);
        generator28.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        generator38.setDelegates((java.lang.Object[]) classArray54);
        generator28.setDelegates((java.lang.Object[]) classArray54);
        generator21.setDelegates((java.lang.Object[]) classArray54);
        generator8.setDelegates((java.lang.Object[]) classArray54);
        generator0.setClasses(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        generator0.setAttemptLoad(true);
        boolean boolean15 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        generator11.setDelegates((java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        generator0.setUseCache(true);
        boolean boolean28 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass30 = namingPolicy29.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator10.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class[] classArray37 = new java.lang.Class[] { wildcardClass34, wildcardClass36 };
        generator31.setClasses(classArray37);
        generator26.setDelegates((java.lang.Object[]) classArray37);
        generator21.setDelegates((java.lang.Object[]) classArray37);
        generator18.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setUseCache(false);
        boolean boolean45 = generator42.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        java.lang.ClassLoader classLoader52 = null;
        generator49.setClassLoader(classLoader52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator55.getStrategy();
        generator54.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Class[] classArray65 = new java.lang.Class[] { wildcardClass62, wildcardClass64 };
        generator59.setClasses(classArray65);
        generator54.setDelegates((java.lang.Object[]) classArray65);
        generator49.setDelegates((java.lang.Object[]) classArray65);
        generator46.setDelegates((java.lang.Object[]) classArray65);
        generator42.setDelegates((java.lang.Object[]) classArray65);
        generator18.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin72 = generator18.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy73);
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass77 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Class[] classArray12 = new java.lang.Class[] { wildcardClass9, wildcardClass11 };
        generator6.setClasses(classArray12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator6.getStrategy();
        generator6.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setUseCache(false);
        generator17.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Class[] classArray28 = new java.lang.Class[] { wildcardClass25, wildcardClass27 };
        generator22.setClasses(classArray28);
        java.lang.Class<?> wildcardClass30 = generator22.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator31.getNamingPolicy();
        java.lang.Class<?> wildcardClass35 = namingPolicy34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Class[] classArray42 = new java.lang.Class[] { wildcardClass39, wildcardClass41 };
        generator36.setClasses(classArray42);
        java.lang.Class<?> wildcardClass44 = generator36.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.Object obj49 = new java.lang.Object();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass50, wildcardClass52 };
        generator47.setClasses(classArray53);
        java.lang.Class<?> wildcardClass55 = generator47.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator56.getNamingPolicy();
        java.lang.Class<?> wildcardClass60 = namingPolicy59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass30, wildcardClass35, wildcardClass44, wildcardClass46, wildcardClass55, wildcardClass60 };
        generator17.setClasses(classArray61);
        generator6.setClasses(classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator65.getNamingPolicy();
        java.lang.ClassLoader classLoader69 = null;
        generator65.setClassLoader(classLoader69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator65.getStrategy();
        generator6.setStrategy(generatorStrategy71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getAttemptLoad();
        java.lang.Object obj77 = new java.lang.Object();
        java.lang.Class<?> wildcardClass78 = obj77.getClass();
        java.lang.Object obj79 = new java.lang.Object();
        java.lang.Class<?> wildcardClass80 = obj79.getClass();
        java.lang.Class[] classArray81 = new java.lang.Class[] { wildcardClass78, wildcardClass80 };
        generator75.setClasses(classArray81);
        generator74.setClasses(classArray81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator84.getStrategy();
        generator74.setStrategy(generatorStrategy86);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator74.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator89 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean90 = generator89.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator89.getStrategy();
        generator74.setStrategy(generatorStrategy91);
        generator6.setStrategy(generatorStrategy91);
        generator6.setAttemptLoad(false);
        java.lang.ClassLoader classLoader96 = generator6.getClassLoader();
        generator0.setClassLoader(classLoader96);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass6 = namingPolicy5.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setUseCache(false);
        java.lang.Class[] classArray9 = null;
        generator6.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        generator13.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        generator13.setClassLoader(classLoader18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator20.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setUseCache(false);
        generator27.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Class[] classArray38 = new java.lang.Class[] { wildcardClass35, wildcardClass37 };
        generator32.setClasses(classArray38);
        java.lang.Class<?> wildcardClass40 = generator32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator41.getNamingPolicy();
        java.lang.Class<?> wildcardClass45 = namingPolicy44.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Class[] classArray52 = new java.lang.Class[] { wildcardClass49, wildcardClass51 };
        generator46.setClasses(classArray52);
        java.lang.Class<?> wildcardClass54 = generator46.getClass();
        java.lang.Object obj55 = new java.lang.Object();
        java.lang.Class<?> wildcardClass56 = obj55.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Class[] classArray63 = new java.lang.Class[] { wildcardClass60, wildcardClass62 };
        generator57.setClasses(classArray63);
        java.lang.Class<?> wildcardClass65 = generator57.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator66.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator66.getNamingPolicy();
        java.lang.Class<?> wildcardClass70 = namingPolicy69.getClass();
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass40, wildcardClass45, wildcardClass54, wildcardClass56, wildcardClass65, wildcardClass70 };
        generator27.setClasses(classArray71);
        generator24.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator74.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator74.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy76);
        generator20.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.Object obj82 = new java.lang.Object();
        java.lang.Class<?> wildcardClass83 = obj82.getClass();
        java.lang.Object obj84 = new java.lang.Object();
        java.lang.Class<?> wildcardClass85 = obj84.getClass();
        java.lang.Class[] classArray86 = new java.lang.Class[] { wildcardClass83, wildcardClass85 };
        generator80.setClasses(classArray86);
        generator79.setClasses(classArray86);
        generator20.setClasses(classArray86);
        generator13.setClasses(classArray86);
        generator6.setDelegates((java.lang.Object[]) classArray86);
        generator0.setDelegates((java.lang.Object[]) classArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader93 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(classArray86);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Class[] classArray13 = new java.lang.Class[] { wildcardClass10, wildcardClass12 };
        generator7.setClasses(classArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator7.getStrategy();
        generator7.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader18 = generator7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy19);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator23.getNamingPolicy();
        java.lang.ClassLoader classLoader27 = null;
        generator23.setClassLoader(classLoader27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        boolean boolean32 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        generator30.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Class[] classArray50 = new java.lang.Class[] { wildcardClass47, wildcardClass49 };
        generator44.setClasses(classArray50);
        generator43.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator53.getStrategy();
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        generator58.setStrategy(generatorStrategy61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass66, wildcardClass68 };
        generator63.setClasses(classArray69);
        generator58.setDelegates((java.lang.Object[]) classArray69);
        generator53.setDelegates((java.lang.Object[]) classArray69);
        generator43.setDelegates((java.lang.Object[]) classArray69);
        java.lang.ClassLoader classLoader74 = generator43.getClassLoader();
        generator30.setClassLoader(classLoader74);
        generator23.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        generator0.setUseCache(true);
        generator0.setStyle(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        generator5.setStyle(0);
        boolean boolean10 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        boolean boolean19 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setUseCache(false);
        generator20.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Class[] classArray31 = new java.lang.Class[] { wildcardClass28, wildcardClass30 };
        generator25.setClasses(classArray31);
        java.lang.Class<?> wildcardClass33 = generator25.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator34.getNamingPolicy();
        java.lang.Class<?> wildcardClass38 = namingPolicy37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        java.lang.Class<?> wildcardClass47 = generator39.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass53, wildcardClass55 };
        generator50.setClasses(classArray56);
        java.lang.Class<?> wildcardClass58 = generator50.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.Class<?> wildcardClass63 = namingPolicy62.getClass();
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass33, wildcardClass38, wildcardClass47, wildcardClass49, wildcardClass58, wildcardClass63 };
        generator20.setClasses(classArray64);
        generator16.setDelegates((java.lang.Object[]) classArray64);
        generator11.setDelegates((java.lang.Object[]) classArray64);
        generator5.setDelegates((java.lang.Object[]) classArray64);
        generator0.setClasses(classArray64);
        generator0.setStyle((int) (byte) 0);
        java.lang.Class<?> wildcardClass72 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator59.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy61);
        generator0.setNamingPolicy(namingPolicy61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader64 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor2 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getAttemptLoad();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Class[] classArray17 = new java.lang.Class[] { wildcardClass14, wildcardClass16 };
        generator11.setClasses(classArray17);
        generator10.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        java.lang.ClassLoader classLoader23 = null;
        generator20.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator26.getStrategy();
        generator25.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        generator25.setDelegates((java.lang.Object[]) classArray36);
        generator20.setDelegates((java.lang.Object[]) classArray36);
        generator10.setDelegates((java.lang.Object[]) classArray36);
        generator0.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        generator42.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass53, wildcardClass55 };
        generator50.setClasses(classArray56);
        generator49.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        java.lang.ClassLoader classLoader62 = null;
        generator59.setClassLoader(classLoader62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator65.getStrategy();
        generator64.setStrategy(generatorStrategy67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        java.lang.Object obj71 = new java.lang.Object();
        java.lang.Class<?> wildcardClass72 = obj71.getClass();
        java.lang.Object obj73 = new java.lang.Object();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass72, wildcardClass74 };
        generator69.setClasses(classArray75);
        generator64.setDelegates((java.lang.Object[]) classArray75);
        generator59.setDelegates((java.lang.Object[]) classArray75);
        generator49.setDelegates((java.lang.Object[]) classArray75);
        generator42.setDelegates((java.lang.Object[]) classArray75);
        generator0.setClasses(classArray75);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin82 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator13.getStrategy();
        generator13.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        generator24.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Class[] classArray35 = new java.lang.Class[] { wildcardClass32, wildcardClass34 };
        generator29.setClasses(classArray35);
        java.lang.Class<?> wildcardClass37 = generator29.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator38.getNamingPolicy();
        java.lang.Class<?> wildcardClass42 = namingPolicy41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class[] classArray49 = new java.lang.Class[] { wildcardClass46, wildcardClass48 };
        generator43.setClasses(classArray49);
        java.lang.Class<?> wildcardClass51 = generator43.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass57, wildcardClass59 };
        generator54.setClasses(classArray60);
        java.lang.Class<?> wildcardClass62 = generator54.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator63.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator63.getNamingPolicy();
        java.lang.Class<?> wildcardClass67 = namingPolicy66.getClass();
        java.lang.Class[] classArray68 = new java.lang.Class[] { wildcardClass37, wildcardClass42, wildcardClass51, wildcardClass53, wildcardClass62, wildcardClass67 };
        generator24.setClasses(classArray68);
        generator13.setClasses(classArray68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator13.getStrategy();
        java.lang.ClassLoader classLoader72 = generator13.getClassLoader();
        generator13.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        boolean boolean77 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator75.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        java.lang.Object obj81 = new java.lang.Object();
        java.lang.Class<?> wildcardClass82 = obj81.getClass();
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        java.lang.Class[] classArray85 = new java.lang.Class[] { wildcardClass82, wildcardClass84 };
        generator79.setClasses(classArray85);
        generator75.setDelegates((java.lang.Object[]) classArray85);
        generator13.setClasses(classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(classArray85);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean54 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator55.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator55.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy59);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass63 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        java.lang.Class[] classArray16 = null;
        generator13.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass29 = generator0.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin6 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setClasses(classArray48);
        boolean boolean51 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor53 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        generator11.setDelegates((java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        boolean boolean29 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class[] classArray37 = new java.lang.Class[] { wildcardClass34, wildcardClass36 };
        generator31.setClasses(classArray37);
        generator27.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setUseCache(false);
        generator44.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass52, wildcardClass54 };
        generator49.setClasses(classArray55);
        java.lang.Class<?> wildcardClass57 = generator49.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator58.getNamingPolicy();
        java.lang.Class<?> wildcardClass62 = namingPolicy61.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass66, wildcardClass68 };
        generator63.setClasses(classArray69);
        java.lang.Class<?> wildcardClass71 = generator63.getClass();
        java.lang.Object obj72 = new java.lang.Object();
        java.lang.Class<?> wildcardClass73 = obj72.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getAttemptLoad();
        java.lang.Object obj76 = new java.lang.Object();
        java.lang.Class<?> wildcardClass77 = obj76.getClass();
        java.lang.Object obj78 = new java.lang.Object();
        java.lang.Class<?> wildcardClass79 = obj78.getClass();
        java.lang.Class[] classArray80 = new java.lang.Class[] { wildcardClass77, wildcardClass79 };
        generator74.setClasses(classArray80);
        java.lang.Class<?> wildcardClass82 = generator74.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator83.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator83.getNamingPolicy();
        java.lang.Class<?> wildcardClass87 = namingPolicy86.getClass();
        java.lang.Class[] classArray88 = new java.lang.Class[] { wildcardClass57, wildcardClass62, wildcardClass71, wildcardClass73, wildcardClass82, wildcardClass87 };
        generator44.setClasses(classArray88);
        generator40.setClasses(classArray88);
        java.lang.ClassLoader classLoader91 = generator40.getClassLoader();
        generator27.setClassLoader(classLoader91);
        generator0.setClassLoader(classLoader91);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin96 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = null;
        generator0.setStrategy(generatorStrategy97);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin99 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getAttemptLoad();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Class[] classArray9 = new java.lang.Class[] { wildcardClass6, wildcardClass8 };
        generator3.setClasses(classArray9);
        boolean boolean11 = generator3.getUseCache();
        boolean boolean12 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        boolean boolean19 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        generator22.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        generator22.setDelegates((java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        generator3.setDelegates((java.lang.Object[]) classArray33);
        java.lang.ClassLoader classLoader38 = generator3.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator40.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        boolean boolean46 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator44.getStrategy();
        generator40.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator40.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator53.getStrategy();
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        generator58.setStrategy(generatorStrategy61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass66, wildcardClass68 };
        generator63.setClasses(classArray69);
        generator58.setDelegates((java.lang.Object[]) classArray69);
        generator53.setDelegates((java.lang.Object[]) classArray69);
        generator50.setDelegates((java.lang.Object[]) classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator50.getStrategy();
        generator50.setStyle((int) (byte) 1);
        java.lang.Class[] classArray77 = new java.lang.Class[] {};
        generator50.setClasses(classArray77);
        generator40.setDelegates((java.lang.Object[]) classArray77);
        generator0.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        boolean boolean20 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy25);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        boolean boolean17 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        boolean boolean19 = generator15.getAttemptLoad();
        boolean boolean20 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setUseCache(false);
        generator22.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        boolean boolean30 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setUseCache(false);
        generator31.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Class[] classArray42 = new java.lang.Class[] { wildcardClass39, wildcardClass41 };
        generator36.setClasses(classArray42);
        java.lang.Class<?> wildcardClass44 = generator36.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator45.getNamingPolicy();
        java.lang.Class<?> wildcardClass49 = namingPolicy48.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass53, wildcardClass55 };
        generator50.setClasses(classArray56);
        java.lang.Class<?> wildcardClass58 = generator50.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        java.lang.Class<?> wildcardClass69 = generator61.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator70.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator70.getNamingPolicy();
        java.lang.Class<?> wildcardClass74 = namingPolicy73.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass44, wildcardClass49, wildcardClass58, wildcardClass60, wildcardClass69, wildcardClass74 };
        generator31.setClasses(classArray75);
        generator27.setDelegates((java.lang.Object[]) classArray75);
        generator22.setDelegates((java.lang.Object[]) classArray75);
        generator15.setDelegates((java.lang.Object[]) classArray75);
        generator0.setClasses(classArray75);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator9.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        generator24.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Object obj33 = new java.lang.Object();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        java.lang.Class[] classArray35 = new java.lang.Class[] { wildcardClass32, wildcardClass34 };
        generator29.setClasses(classArray35);
        generator24.setDelegates((java.lang.Object[]) classArray35);
        generator19.setDelegates((java.lang.Object[]) classArray35);
        generator9.setDelegates((java.lang.Object[]) classArray35);
        generator5.setClasses(classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        java.lang.Class<?> wildcardClass42 = classArray35.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator10.getStrategy();
        generator10.setStyle((int) (byte) 1);
        java.lang.Class[] classArray37 = new java.lang.Class[] {};
        generator10.setClasses(classArray37);
        generator0.setDelegates((java.lang.Object[]) classArray37);
        java.lang.Class<?> wildcardClass40 = classArray37.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = null;
        generator0.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator26.getStrategy();
        boolean boolean30 = generator26.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        boolean boolean33 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator31.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Class[] classArray42 = new java.lang.Class[] { wildcardClass39, wildcardClass41 };
        generator36.setClasses(classArray42);
        generator35.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        generator50.setDelegates((java.lang.Object[]) classArray61);
        generator45.setDelegates((java.lang.Object[]) classArray61);
        generator35.setDelegates((java.lang.Object[]) classArray61);
        generator31.setClasses(classArray61);
        generator26.setDelegates((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray61);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        generator5.setStyle(0);
        boolean boolean10 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        boolean boolean19 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setUseCache(false);
        generator20.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Class[] classArray31 = new java.lang.Class[] { wildcardClass28, wildcardClass30 };
        generator25.setClasses(classArray31);
        java.lang.Class<?> wildcardClass33 = generator25.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator34.getNamingPolicy();
        java.lang.Class<?> wildcardClass38 = namingPolicy37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        java.lang.Class<?> wildcardClass47 = generator39.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Class[] classArray56 = new java.lang.Class[] { wildcardClass53, wildcardClass55 };
        generator50.setClasses(classArray56);
        java.lang.Class<?> wildcardClass58 = generator50.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator59.getNamingPolicy();
        java.lang.Class<?> wildcardClass63 = namingPolicy62.getClass();
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass33, wildcardClass38, wildcardClass47, wildcardClass49, wildcardClass58, wildcardClass63 };
        generator20.setClasses(classArray64);
        generator16.setDelegates((java.lang.Object[]) classArray64);
        generator11.setDelegates((java.lang.Object[]) classArray64);
        generator5.setDelegates((java.lang.Object[]) classArray64);
        generator0.setClasses(classArray64);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = null;
        generator0.setNamingPolicy(namingPolicy70);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classArray64);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        generator5.setStyle(0);
        boolean boolean10 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator11.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator11.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        boolean boolean17 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        generator15.setDelegates((java.lang.Object[]) classArray25);
        generator5.setDelegates((java.lang.Object[]) classArray25);
        generator0.setDelegates((java.lang.Object[]) classArray25);
        java.lang.Class<?> wildcardClass30 = classArray25.getClass();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        java.lang.Class<?> wildcardClass16 = generator8.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator17.getNamingPolicy();
        java.lang.Class<?> wildcardClass21 = namingPolicy20.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Class[] classArray28 = new java.lang.Class[] { wildcardClass25, wildcardClass27 };
        generator22.setClasses(classArray28);
        java.lang.Class<?> wildcardClass30 = generator22.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        java.lang.Class<?> wildcardClass41 = generator33.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator42.getNamingPolicy();
        java.lang.Class<?> wildcardClass46 = namingPolicy45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass16, wildcardClass21, wildcardClass30, wildcardClass32, wildcardClass41, wildcardClass46 };
        generator3.setClasses(classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = generator0.create();
        boolean boolean51 = generator0.getAttemptLoad();
        boolean boolean52 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass53 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getAttemptLoad();
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Object obj60 = new java.lang.Object();
        java.lang.Class<?> wildcardClass61 = obj60.getClass();
        java.lang.Class[] classArray62 = new java.lang.Class[] { wildcardClass59, wildcardClass61 };
        generator56.setClasses(classArray62);
        boolean boolean64 = generator56.getUseCache();
        boolean boolean65 = generator56.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator66.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator66.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        boolean boolean72 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator70.getStrategy();
        generator66.setStrategy(generatorStrategy73);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator76.getStrategy();
        generator75.setStrategy(generatorStrategy78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.Object obj82 = new java.lang.Object();
        java.lang.Class<?> wildcardClass83 = obj82.getClass();
        java.lang.Object obj84 = new java.lang.Object();
        java.lang.Class<?> wildcardClass85 = obj84.getClass();
        java.lang.Class[] classArray86 = new java.lang.Class[] { wildcardClass83, wildcardClass85 };
        generator80.setClasses(classArray86);
        generator75.setDelegates((java.lang.Object[]) classArray86);
        generator66.setClasses(classArray86);
        generator56.setDelegates((java.lang.Object[]) classArray86);
        java.lang.ClassLoader classLoader91 = generator56.getClassLoader();
        generator0.setClassLoader(classLoader91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Class[] classArray21 = new java.lang.Class[] { wildcardClass18, wildcardClass20 };
        generator15.setClasses(classArray21);
        boolean boolean23 = generator15.getAttemptLoad();
        boolean boolean24 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator15.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        java.lang.Class<?> wildcardClass28 = namingPolicy26.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getAttemptLoad();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Class[] classArray17 = new java.lang.Class[] { wildcardClass14, wildcardClass16 };
        generator11.setClasses(classArray17);
        generator7.setDelegates((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Class[] classArray27 = new java.lang.Class[] { wildcardClass24, wildcardClass26 };
        generator21.setClasses(classArray27);
        generator20.setClasses(classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator36.getStrategy();
        generator35.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Class[] classArray46 = new java.lang.Class[] { wildcardClass43, wildcardClass45 };
        generator40.setClasses(classArray46);
        generator35.setDelegates((java.lang.Object[]) classArray46);
        generator30.setDelegates((java.lang.Object[]) classArray46);
        generator20.setDelegates((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader51 = generator20.getClassLoader();
        generator7.setClassLoader(classLoader51);
        generator0.setClassLoader(classLoader51);
        boolean boolean54 = generator0.getAttemptLoad();
        boolean boolean55 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean58 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin30 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(mixin29);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        boolean boolean20 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(mixin25);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass24 = generatorStrategy23.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        boolean boolean32 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        boolean boolean34 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setUseCache(false);
        boolean boolean38 = generator35.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator48.getStrategy();
        generator47.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.Object obj54 = new java.lang.Object();
        java.lang.Class<?> wildcardClass55 = obj54.getClass();
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass55, wildcardClass57 };
        generator52.setClasses(classArray58);
        generator47.setDelegates((java.lang.Object[]) classArray58);
        generator42.setDelegates((java.lang.Object[]) classArray58);
        generator39.setDelegates((java.lang.Object[]) classArray58);
        generator35.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        boolean boolean69 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator67.getStrategy();
        generator64.setStrategy(generatorStrategy70);
        generator35.setStrategy(generatorStrategy70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator73.getStrategy();
        java.lang.ClassLoader classLoader76 = null;
        generator73.setClassLoader(classLoader76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        generator78.setStrategy(generatorStrategy81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        java.lang.Object obj85 = new java.lang.Object();
        java.lang.Class<?> wildcardClass86 = obj85.getClass();
        java.lang.Object obj87 = new java.lang.Object();
        java.lang.Class<?> wildcardClass88 = obj87.getClass();
        java.lang.Class[] classArray89 = new java.lang.Class[] { wildcardClass86, wildcardClass88 };
        generator83.setClasses(classArray89);
        generator78.setDelegates((java.lang.Object[]) classArray89);
        generator73.setDelegates((java.lang.Object[]) classArray89);
        generator35.setClasses(classArray89);
        generator30.setClasses(classArray89);
        generator0.setClasses(classArray89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(classArray89);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setUseCache(false);
        generator6.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator11.getStrategy();
        boolean boolean14 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setUseCache(false);
        generator15.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        java.lang.Class<?> wildcardClass28 = generator20.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator29.getNamingPolicy();
        java.lang.Class<?> wildcardClass33 = namingPolicy32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Object obj49 = new java.lang.Object();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        java.lang.Class[] classArray51 = new java.lang.Class[] { wildcardClass48, wildcardClass50 };
        generator45.setClasses(classArray51);
        java.lang.Class<?> wildcardClass53 = generator45.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator54.getNamingPolicy();
        java.lang.Class<?> wildcardClass58 = namingPolicy57.getClass();
        java.lang.Class[] classArray59 = new java.lang.Class[] { wildcardClass28, wildcardClass33, wildcardClass42, wildcardClass44, wildcardClass53, wildcardClass58 };
        generator15.setClasses(classArray59);
        generator11.setDelegates((java.lang.Object[]) classArray59);
        generator6.setDelegates((java.lang.Object[]) classArray59);
        generator0.setDelegates((java.lang.Object[]) classArray59);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getAttemptLoad();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Class[] classArray9 = new java.lang.Class[] { wildcardClass6, wildcardClass8 };
        generator3.setClasses(classArray9);
        boolean boolean11 = generator3.getUseCache();
        boolean boolean12 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        boolean boolean19 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        generator22.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        generator22.setDelegates((java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        generator3.setDelegates((java.lang.Object[]) classArray33);
        java.lang.ClassLoader classLoader38 = generator3.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator40.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        boolean boolean46 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator44.getStrategy();
        generator40.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator40.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator53.getStrategy();
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        generator58.setStrategy(generatorStrategy61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass66, wildcardClass68 };
        generator63.setClasses(classArray69);
        generator58.setDelegates((java.lang.Object[]) classArray69);
        generator53.setDelegates((java.lang.Object[]) classArray69);
        generator50.setDelegates((java.lang.Object[]) classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator50.getStrategy();
        generator50.setStyle((int) (byte) 1);
        java.lang.Class[] classArray77 = new java.lang.Class[] {};
        generator50.setClasses(classArray77);
        generator40.setDelegates((java.lang.Object[]) classArray77);
        generator0.setDelegates((java.lang.Object[]) classArray77);
        generator0.setStyle((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classArray77);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setUseCache(false);
        generator38.setUseCache(false);
        boolean boolean43 = generator38.getAttemptLoad();
        generator38.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator46.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        generator50.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        java.lang.Class<?> wildcardClass63 = generator55.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator64.getNamingPolicy();
        java.lang.Class<?> wildcardClass68 = namingPolicy67.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        java.lang.Object obj71 = new java.lang.Object();
        java.lang.Class<?> wildcardClass72 = obj71.getClass();
        java.lang.Object obj73 = new java.lang.Object();
        java.lang.Class<?> wildcardClass74 = obj73.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass72, wildcardClass74 };
        generator69.setClasses(classArray75);
        java.lang.Class<?> wildcardClass77 = generator69.getClass();
        java.lang.Object obj78 = new java.lang.Object();
        java.lang.Class<?> wildcardClass79 = obj78.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.Object obj82 = new java.lang.Object();
        java.lang.Class<?> wildcardClass83 = obj82.getClass();
        java.lang.Object obj84 = new java.lang.Object();
        java.lang.Class<?> wildcardClass85 = obj84.getClass();
        java.lang.Class[] classArray86 = new java.lang.Class[] { wildcardClass83, wildcardClass85 };
        generator80.setClasses(classArray86);
        java.lang.Class<?> wildcardClass88 = generator80.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator89 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator89.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator89.getNamingPolicy();
        java.lang.Class<?> wildcardClass93 = namingPolicy92.getClass();
        java.lang.Class[] classArray94 = new java.lang.Class[] { wildcardClass63, wildcardClass68, wildcardClass77, wildcardClass79, wildcardClass88, wildcardClass93 };
        generator50.setClasses(classArray94);
        generator46.setClasses(classArray94);
        java.lang.ClassLoader classLoader97 = generator46.getClassLoader();
        generator38.setClassLoader(classLoader97);
        generator0.setClassLoader(classLoader97);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.Class<?> wildcardClass19 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getAttemptLoad();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Class[] classArray9 = new java.lang.Class[] { wildcardClass6, wildcardClass8 };
        generator3.setClasses(classArray9);
        generator2.setClasses(classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator2.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator2.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        generator0.setStyle(0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        generator18.setDelegates((java.lang.Object[]) classArray29);
        generator13.setDelegates((java.lang.Object[]) classArray29);
        generator10.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator10.getStrategy();
        generator10.setStyle((int) (byte) 1);
        java.lang.Class[] classArray37 = new java.lang.Class[] {};
        generator10.setClasses(classArray37);
        generator0.setDelegates((java.lang.Object[]) classArray37);
        boolean boolean40 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader41 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        generator5.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        boolean boolean13 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        generator14.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        java.lang.Class<?> wildcardClass27 = generator19.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator28.getNamingPolicy();
        java.lang.Class<?> wildcardClass32 = namingPolicy31.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        java.lang.Class<?> wildcardClass41 = generator33.getClass();
        java.lang.Object obj42 = new java.lang.Object();
        java.lang.Class<?> wildcardClass43 = obj42.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Class[] classArray50 = new java.lang.Class[] { wildcardClass47, wildcardClass49 };
        generator44.setClasses(classArray50);
        java.lang.Class<?> wildcardClass52 = generator44.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator53.getNamingPolicy();
        java.lang.Class<?> wildcardClass57 = namingPolicy56.getClass();
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass27, wildcardClass32, wildcardClass41, wildcardClass43, wildcardClass52, wildcardClass57 };
        generator14.setClasses(classArray58);
        generator10.setDelegates((java.lang.Object[]) classArray58);
        generator5.setDelegates((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean63 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator13.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator13.setDelegates((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader46 = generator0.getClassLoader();
        generator0.setStyle((int) (short) 0);
        boolean boolean49 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator4.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator4.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator10.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy12);
        generator0.setNamingPolicy(namingPolicy12);
        boolean boolean15 = generator0.getUseCache();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass10 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass4 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        generator7.setDelegates((java.lang.Object[]) classArray18);
        generator0.setClasses(classArray18);
        boolean boolean22 = generator0.getAttemptLoad();
        boolean boolean23 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        boolean boolean14 = generator0.getUseCache();
        boolean boolean15 = generator0.getAttemptLoad();
        boolean boolean16 = generator0.getAttemptLoad();
        boolean boolean17 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator0.setStrategy(generatorStrategy58);
        boolean boolean60 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        boolean boolean13 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator11.getStrategy();
        generator7.setStrategy(generatorStrategy14);
        boolean boolean16 = generator7.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        generator17.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        boolean boolean24 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy25);
        generator7.setNamingPolicy(namingPolicy25);
        generator5.setNamingPolicy(namingPolicy25);
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy31);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator20.setDelegates((java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        boolean boolean47 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator45.getStrategy();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.Object obj57 = new java.lang.Object();
        java.lang.Class<?> wildcardClass58 = obj57.getClass();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass58, wildcardClass60 };
        generator55.setClasses(classArray61);
        generator50.setDelegates((java.lang.Object[]) classArray61);
        generator45.setClasses(classArray61);
        generator0.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin67 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(generatorStrategy66);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        java.lang.Class[] classArray16 = null;
        generator13.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        boolean boolean18 = generator0.getAttemptLoad();
        boolean boolean19 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass20 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setUseCache(false);
        generator7.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass15, wildcardClass17 };
        generator12.setClasses(classArray18);
        java.lang.Class<?> wildcardClass20 = generator12.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator21.getNamingPolicy();
        java.lang.Class<?> wildcardClass25 = namingPolicy24.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Class[] classArray32 = new java.lang.Class[] { wildcardClass29, wildcardClass31 };
        generator26.setClasses(classArray32);
        java.lang.Class<?> wildcardClass34 = generator26.getClass();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Class[] classArray43 = new java.lang.Class[] { wildcardClass40, wildcardClass42 };
        generator37.setClasses(classArray43);
        java.lang.Class<?> wildcardClass45 = generator37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator46.getNamingPolicy();
        java.lang.Class<?> wildcardClass50 = namingPolicy49.getClass();
        java.lang.Class[] classArray51 = new java.lang.Class[] { wildcardClass20, wildcardClass25, wildcardClass34, wildcardClass36, wildcardClass45, wildcardClass50 };
        generator7.setClasses(classArray51);
        generator4.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy56);
        generator0.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getAttemptLoad();
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        java.lang.Object obj64 = new java.lang.Object();
        java.lang.Class<?> wildcardClass65 = obj64.getClass();
        java.lang.Class[] classArray66 = new java.lang.Class[] { wildcardClass63, wildcardClass65 };
        generator60.setClasses(classArray66);
        generator59.setClasses(classArray66);
        generator0.setClasses(classArray66);
        generator0.setAttemptLoad(true);
        boolean boolean72 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass17 = namingPolicy16.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class[] classArray14 = new java.lang.Class[] { wildcardClass11, wildcardClass13 };
        generator8.setClasses(classArray14);
        java.lang.Class<?> wildcardClass16 = generator8.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator17.getNamingPolicy();
        java.lang.Class<?> wildcardClass21 = namingPolicy20.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Class[] classArray28 = new java.lang.Class[] { wildcardClass25, wildcardClass27 };
        generator22.setClasses(classArray28);
        java.lang.Class<?> wildcardClass30 = generator22.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        java.lang.Class<?> wildcardClass41 = generator33.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator42.getNamingPolicy();
        java.lang.Class<?> wildcardClass46 = namingPolicy45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass16, wildcardClass21, wildcardClass30, wildcardClass32, wildcardClass41, wildcardClass46 };
        generator3.setClasses(classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        generator50.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator50.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator50.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator50.getStrategy();
        generator0.setStrategy(generatorStrategy59);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean10 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        boolean boolean12 = generator4.getUseCache();
        boolean boolean13 = generator4.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        generator23.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass31, wildcardClass33 };
        generator28.setClasses(classArray34);
        generator23.setDelegates((java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        generator4.setDelegates((java.lang.Object[]) classArray34);
        generator0.setClasses(classArray34);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classArray34);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin6 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator13.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator13.setDelegates((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader46 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.Object obj49 = new java.lang.Object();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass50, wildcardClass52 };
        generator47.setClasses(classArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator47.getStrategy();
        generator47.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader58 = generator47.getClassLoader();
        generator0.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        java.lang.ClassLoader classLoader61 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        boolean boolean64 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator62.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getAttemptLoad();
        java.lang.Object obj69 = new java.lang.Object();
        java.lang.Class<?> wildcardClass70 = obj69.getClass();
        java.lang.Object obj71 = new java.lang.Object();
        java.lang.Class<?> wildcardClass72 = obj71.getClass();
        java.lang.Class[] classArray73 = new java.lang.Class[] { wildcardClass70, wildcardClass72 };
        generator67.setClasses(classArray73);
        generator66.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator76.getStrategy();
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator82.getStrategy();
        generator81.setStrategy(generatorStrategy84);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getAttemptLoad();
        java.lang.Object obj88 = new java.lang.Object();
        java.lang.Class<?> wildcardClass89 = obj88.getClass();
        java.lang.Object obj90 = new java.lang.Object();
        java.lang.Class<?> wildcardClass91 = obj90.getClass();
        java.lang.Class[] classArray92 = new java.lang.Class[] { wildcardClass89, wildcardClass91 };
        generator86.setClasses(classArray92);
        generator81.setDelegates((java.lang.Object[]) classArray92);
        generator76.setDelegates((java.lang.Object[]) classArray92);
        generator66.setDelegates((java.lang.Object[]) classArray92);
        generator62.setClasses(classArray92);
        generator0.setClasses(classArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(classArray92);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        generator0.setAttemptLoad(true);
        boolean boolean15 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator13.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator28.setDelegates((java.lang.Object[]) classArray39);
        generator23.setDelegates((java.lang.Object[]) classArray39);
        generator13.setDelegates((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        boolean boolean47 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        boolean boolean57 = generator0.getUseCache();
        generator0.setStyle(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        generator8.setClasses(classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        generator8.setStrategy(generatorStrategy20);
        boolean boolean22 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader23 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader23);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        boolean boolean18 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator15.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy20);
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class[] classArray26 = new java.lang.Class[] { wildcardClass23, wildcardClass25 };
        generator20.setClasses(classArray26);
        generator15.setDelegates((java.lang.Object[]) classArray26);
        generator10.setDelegates((java.lang.Object[]) classArray26);
        generator7.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator7.getStrategy();
        generator7.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator34.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator34.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        boolean boolean40 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator38.getStrategy();
        generator34.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass51, wildcardClass53 };
        generator48.setClasses(classArray54);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        generator7.setDelegates((java.lang.Object[]) classArray54);
        generator0.setDelegates((java.lang.Object[]) classArray54);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classArray54);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        boolean boolean33 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator31.getStrategy();
        generator27.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean52 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass53 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        boolean boolean20 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor26 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass14 = classLoader13.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        generator11.setDelegates((java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(mixin27);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        generator13.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass21, wildcardClass23 };
        generator18.setClasses(classArray24);
        java.lang.Class<?> wildcardClass26 = generator18.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator27.getNamingPolicy();
        java.lang.Class<?> wildcardClass31 = namingPolicy30.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Class[] classArray38 = new java.lang.Class[] { wildcardClass35, wildcardClass37 };
        generator32.setClasses(classArray38);
        java.lang.Class<?> wildcardClass40 = generator32.getClass();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class[] classArray49 = new java.lang.Class[] { wildcardClass46, wildcardClass48 };
        generator43.setClasses(classArray49);
        java.lang.Class<?> wildcardClass51 = generator43.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator52.getNamingPolicy();
        java.lang.Class<?> wildcardClass56 = namingPolicy55.getClass();
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass26, wildcardClass31, wildcardClass40, wildcardClass42, wildcardClass51, wildcardClass56 };
        generator13.setClasses(classArray57);
        generator10.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        boolean boolean62 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator60.getStrategy();
        generator10.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setUseCache(false);
        boolean boolean68 = generator65.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator69.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator72.getStrategy();
        java.lang.ClassLoader classLoader75 = null;
        generator72.setClassLoader(classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator78.getStrategy();
        generator77.setStrategy(generatorStrategy80);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getAttemptLoad();
        java.lang.Object obj84 = new java.lang.Object();
        java.lang.Class<?> wildcardClass85 = obj84.getClass();
        java.lang.Object obj86 = new java.lang.Object();
        java.lang.Class<?> wildcardClass87 = obj86.getClass();
        java.lang.Class[] classArray88 = new java.lang.Class[] { wildcardClass85, wildcardClass87 };
        generator82.setClasses(classArray88);
        generator77.setDelegates((java.lang.Object[]) classArray88);
        generator72.setDelegates((java.lang.Object[]) classArray88);
        generator69.setDelegates((java.lang.Object[]) classArray88);
        generator65.setDelegates((java.lang.Object[]) classArray88);
        generator10.setDelegates((java.lang.Object[]) classArray88);
        generator0.setDelegates((java.lang.Object[]) classArray88);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(classArray88);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setStyle(0);
        generator0.setStyle((int) (byte) 1);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Class[] classArray11 = new java.lang.Class[] { wildcardClass8, wildcardClass10 };
        generator5.setClasses(classArray11);
        generator4.setClasses(classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class[] classArray30 = new java.lang.Class[] { wildcardClass27, wildcardClass29 };
        generator24.setClasses(classArray30);
        generator19.setDelegates((java.lang.Object[]) classArray30);
        generator14.setDelegates((java.lang.Object[]) classArray30);
        generator4.setDelegates((java.lang.Object[]) classArray30);
        generator0.setClasses(classArray30);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classArray30);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        generator56.setDelegates((java.lang.Object[]) classArray67);
        generator51.setClasses(classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator72.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        boolean boolean80 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator78.getStrategy();
        boolean boolean82 = generator78.getAttemptLoad();
        boolean boolean83 = generator78.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator78.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy84);
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass13, wildcardClass15 };
        generator10.setClasses(classArray16);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        boolean boolean20 = generator0.getUseCache();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.Class[] classArray6 = null;
        generator0.setClasses(classArray6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        generator8.setClasses(classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        generator8.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator8.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = generator8.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        generator24.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        generator31.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        java.lang.Class[] classArray42 = new java.lang.Class[] { wildcardClass39, wildcardClass41 };
        generator36.setClasses(classArray42);
        generator31.setDelegates((java.lang.Object[]) classArray42);
        generator24.setClasses(classArray42);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator24.getStrategy();
        generator8.setStrategy(generatorStrategy47);
        generator0.setStrategy(generatorStrategy47);
        java.lang.Class<?> wildcardClass50 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        generator14.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setUseCache(false);
        generator19.setStyle(0);
        boolean boolean24 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator25.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        boolean boolean31 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator29.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Class[] classArray39 = new java.lang.Class[] { wildcardClass36, wildcardClass38 };
        generator33.setClasses(classArray39);
        generator29.setDelegates((java.lang.Object[]) classArray39);
        generator19.setDelegates((java.lang.Object[]) classArray39);
        generator14.setDelegates((java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classArray39);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        boolean boolean8 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setUseCache(false);
        generator9.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        java.lang.Class<?> wildcardClass22 = generator14.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator23.getNamingPolicy();
        java.lang.Class<?> wildcardClass27 = namingPolicy26.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass31, wildcardClass33 };
        generator28.setClasses(classArray34);
        java.lang.Class<?> wildcardClass36 = generator28.getClass();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.Object obj41 = new java.lang.Object();
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass42, wildcardClass44 };
        generator39.setClasses(classArray45);
        java.lang.Class<?> wildcardClass47 = generator39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator48.getNamingPolicy();
        java.lang.Class<?> wildcardClass52 = namingPolicy51.getClass();
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass22, wildcardClass27, wildcardClass36, wildcardClass38, wildcardClass47, wildcardClass52 };
        generator9.setClasses(classArray53);
        generator5.setDelegates((java.lang.Object[]) classArray53);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Class[] classArray65 = new java.lang.Class[] { wildcardClass62, wildcardClass64 };
        generator59.setClasses(classArray65);
        generator58.setClasses(classArray65);
        generator57.setClasses(classArray65);
        generator0.setClasses(classArray65);
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classArray65);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Object obj8 = new java.lang.Object();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.lang.Class[] classArray10 = new java.lang.Class[] { wildcardClass7, wildcardClass9 };
        generator4.setClasses(classArray10);
        generator0.setDelegates((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setUseCache(false);
        generator16.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Class[] classArray27 = new java.lang.Class[] { wildcardClass24, wildcardClass26 };
        generator21.setClasses(classArray27);
        java.lang.Class<?> wildcardClass29 = generator21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator30.getNamingPolicy();
        java.lang.Class<?> wildcardClass34 = namingPolicy33.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass38, wildcardClass40 };
        generator35.setClasses(classArray41);
        java.lang.Class<?> wildcardClass43 = generator35.getClass();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        java.lang.Object obj48 = new java.lang.Object();
        java.lang.Class<?> wildcardClass49 = obj48.getClass();
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Class[] classArray52 = new java.lang.Class[] { wildcardClass49, wildcardClass51 };
        generator46.setClasses(classArray52);
        java.lang.Class<?> wildcardClass54 = generator46.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator55.getNamingPolicy();
        java.lang.Class<?> wildcardClass59 = namingPolicy58.getClass();
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass29, wildcardClass34, wildcardClass43, wildcardClass45, wildcardClass54, wildcardClass59 };
        generator16.setClasses(classArray60);
        generator13.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        boolean boolean65 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator63.getStrategy();
        generator13.setStrategy(generatorStrategy66);
        generator0.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy69);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        boolean boolean55 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin56 = generator0.create();
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass59 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        java.lang.Class[] classArray6 = new java.lang.Class[] { wildcardClass3, wildcardClass5 };
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        java.lang.Class<?> wildcardClass24 = generator16.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = namingPolicy28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        java.lang.Class<?> wildcardClass49 = generator41.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator50.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass24, wildcardClass29, wildcardClass38, wildcardClass40, wildcardClass49, wildcardClass54 };
        generator11.setClasses(classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        java.lang.ClassLoader classLoader59 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader59);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator15.getNamingPolicy();
        java.lang.ClassLoader classLoader19 = null;
        generator15.setClassLoader(classLoader19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        java.lang.Class<?> wildcardClass23 = generatorStrategy21.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Class[] classArray11 = new java.lang.Class[] { wildcardClass8, wildcardClass10 };
        generator5.setClasses(classArray11);
        java.lang.Class<?> wildcardClass13 = generator5.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator14.getNamingPolicy();
        java.lang.Class<?> wildcardClass18 = namingPolicy17.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.Object obj21 = new java.lang.Object();
        java.lang.Class<?> wildcardClass22 = obj21.getClass();
        java.lang.Object obj23 = new java.lang.Object();
        java.lang.Class<?> wildcardClass24 = obj23.getClass();
        java.lang.Class[] classArray25 = new java.lang.Class[] { wildcardClass22, wildcardClass24 };
        generator19.setClasses(classArray25);
        java.lang.Class<?> wildcardClass27 = generator19.getClass();
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass33, wildcardClass35 };
        generator30.setClasses(classArray36);
        java.lang.Class<?> wildcardClass38 = generator30.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator39.getNamingPolicy();
        java.lang.Class<?> wildcardClass43 = namingPolicy42.getClass();
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass13, wildcardClass18, wildcardClass27, wildcardClass29, wildcardClass38, wildcardClass43 };
        generator0.setClasses(classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setUseCache(false);
        java.lang.Class[] classArray49 = null;
        generator46.setClasses(classArray49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy52);
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator3.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        generator3.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.Object obj15 = new java.lang.Object();
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass16, wildcardClass18 };
        generator13.setClasses(classArray19);
        generator8.setDelegates((java.lang.Object[]) classArray19);
        generator3.setDelegates((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        boolean boolean27 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass44, wildcardClass46 };
        generator41.setClasses(classArray47);
        generator36.setDelegates((java.lang.Object[]) classArray47);
        generator31.setDelegates((java.lang.Object[]) classArray47);
        generator28.setDelegates((java.lang.Object[]) classArray47);
        generator24.setDelegates((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean54 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator55.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator55.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy59);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        boolean boolean16 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator11.getNamingPolicy();
        generator11.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        generator22.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.Object obj29 = new java.lang.Object();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass30, wildcardClass32 };
        generator27.setClasses(classArray33);
        generator22.setDelegates((java.lang.Object[]) classArray33);
        generator11.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy37);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        boolean boolean42 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] { wildcardClass4, wildcardClass6 };
        generator1.setClasses(classArray7);
        generator0.setClasses(classArray7);
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(classLoader10);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass12, wildcardClass14 };
        generator9.setClasses(classArray15);
        java.lang.Class<?> wildcardClass17 = generator9.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.Object obj25 = new java.lang.Object();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        java.lang.Object obj27 = new java.lang.Object();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        java.lang.Class[] classArray29 = new java.lang.Class[] { wildcardClass26, wildcardClass28 };
        generator23.setClasses(classArray29);
        java.lang.Class<?> wildcardClass31 = generator23.getClass();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        java.lang.Class<?> wildcardClass42 = generator34.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass17, wildcardClass22, wildcardClass31, wildcardClass33, wildcardClass42, wildcardClass47 };
        generator4.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.Object obj63 = new java.lang.Object();
        java.lang.Class<?> wildcardClass64 = obj63.getClass();
        java.lang.Object obj65 = new java.lang.Object();
        java.lang.Class<?> wildcardClass66 = obj65.getClass();
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass64, wildcardClass66 };
        generator61.setClasses(classArray67);
        generator56.setDelegates((java.lang.Object[]) classArray67);
        generator51.setClasses(classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator72.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        boolean boolean80 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        boolean boolean6 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass11 = generatorStrategy10.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        boolean boolean5 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Object obj20 = new java.lang.Object();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        java.lang.Class[] classArray22 = new java.lang.Class[] { wildcardClass19, wildcardClass21 };
        generator16.setClasses(classArray22);
        generator11.setDelegates((java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(generatorStrategy26);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        boolean boolean12 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass17, wildcardClass19 };
        generator14.setClasses(classArray20);
        generator10.setDelegates((java.lang.Object[]) classArray20);
        generator0.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        boolean boolean26 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator24.getStrategy();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class[] classArray40 = new java.lang.Class[] { wildcardClass37, wildcardClass39 };
        generator34.setClasses(classArray40);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        generator24.setClasses(classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        java.lang.ClassLoader classLoader50 = null;
        generator47.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator53.getStrategy();
        generator52.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        java.lang.Object obj59 = new java.lang.Object();
        java.lang.Class<?> wildcardClass60 = obj59.getClass();
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Class[] classArray63 = new java.lang.Class[] { wildcardClass60, wildcardClass62 };
        generator57.setClasses(classArray63);
        generator52.setDelegates((java.lang.Object[]) classArray63);
        generator47.setDelegates((java.lang.Object[]) classArray63);
        generator44.setDelegates((java.lang.Object[]) classArray63);
        generator24.setClasses(classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        boolean boolean71 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator69.getStrategy();
        boolean boolean73 = generator69.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        generator74.setStrategy(generatorStrategy77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        java.lang.Object obj81 = new java.lang.Object();
        java.lang.Class<?> wildcardClass82 = obj81.getClass();
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        java.lang.Class[] classArray85 = new java.lang.Class[] { wildcardClass82, wildcardClass84 };
        generator79.setClasses(classArray85);
        generator74.setDelegates((java.lang.Object[]) classArray85);
        generator69.setClasses(classArray85);
        generator24.setDelegates((java.lang.Object[]) classArray85);
        generator0.setClasses(classArray85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        boolean boolean15 = node2.isNE();
        boolean boolean16 = node2.isThrow();
        boolean boolean17 = node2.isNumber();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(30, node2, 48, 44);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node28.isOptionalArg();
        com.google.javascript.rhino.Node node37 = node28.getLastSibling();
        int int38 = node28.getCharno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        java.lang.String str46 = node7.getQualifiedName();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        node48.setVarArgs(false);
        boolean boolean55 = node48.isFromExterns();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet59);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet59);
        java.lang.Appendable appendable63 = null;
        // The following exception was thrown during execution in test generation
        try {
            node7.appendStringTree(appendable63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean5 = node4.isBlock();
        boolean boolean6 = node4.isNE();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.Node node12 = node8.getLastSibling();
        node8.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node8.setJSType(jSType15);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node8);
        boolean boolean18 = node4.isVar();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        boolean boolean21 = node20.isOnlyModifiesThisCall();
        boolean boolean22 = node20.isEmpty();
        boolean boolean23 = node20.isArrayLit();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isSetterDef();
        com.google.javascript.rhino.Node node28 = node20.srcref(node25);
        com.google.javascript.rhino.Node node29 = node28.getLastSibling();
        boolean boolean30 = node29.isIf();
        boolean boolean31 = node29.isArrayLit();
        boolean boolean32 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(39, 54, 4);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        boolean boolean44 = node39.isAssignAdd();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        com.google.javascript.rhino.Node node51 = node39.copyInformationFromForTree(node46);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        boolean boolean55 = node53.isEmpty();
        boolean boolean56 = node53.isArrayLit();
        com.google.javascript.rhino.Node node57 = node39.useSourceInfoFrom(node53);
        boolean boolean58 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        boolean boolean61 = node60.isOnlyModifiesThisCall();
        boolean boolean62 = node60.isEmpty();
        boolean boolean63 = node60.isArrayLit();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        boolean boolean66 = node65.isOnlyModifiesThisCall();
        boolean boolean67 = node65.isEmpty();
        boolean boolean68 = node65.isReturn();
        boolean boolean69 = node65.isNE();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(4095, node57, node60, node65, (int) (byte) 10, 32);
        node65.setSourceEncodedPositionForTree(43);
        java.lang.String str75 = node65.toString();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(10, 42, (int) (byte) 1);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("");
        boolean boolean82 = node81.isOnlyModifiesThisCall();
        boolean boolean83 = node81.isEmpty();
        boolean boolean84 = node81.isArrayLit();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("");
        boolean boolean87 = node86.isOnlyModifiesThisCall();
        boolean boolean88 = node86.isSetterDef();
        com.google.javascript.rhino.Node node89 = node81.srcref(node86);
        com.google.javascript.rhino.Node node90 = node89.getLastSibling();
        boolean boolean91 = node90.isSetterDef();
        com.google.javascript.rhino.Node node92 = node79.clonePropsFrom(node90);
        int int93 = node79.getSourceOffset();
        node65.addChildrenToFront(node79);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(32, node4, node29, node36, node79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "STRING  0" + "'", str75, "STRING  0");
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node28.isCase();
        boolean boolean37 = node28.hasMoreThanOneChild();
        boolean boolean38 = node28.isLocalResultCall();
        boolean boolean39 = node28.isReturn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node42.isScript();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node67.setIsSyntheticBlock(true);
        node42.addChildrenToFront(node67);
        boolean boolean71 = node42.isLocalResultCall();
        java.lang.String str72 = node42.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING  0\n    NUMBER 0.0 [synthetic: 1]\n" + "'", str72, "STRING  0\n    NUMBER 0.0 [synthetic: 1]\n");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        int int6 = node1.getLength();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = node1.getExistingIntProp(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 35");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        int int7 = node1.getLineno();
        node1.setSourceFileForTesting("STRING ");
        boolean boolean10 = node1.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean14 = node1.isThis();
        int int15 = node1.getCharno();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node17.isVarArgs();
        int int37 = node17.getType();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isArrayLit();
        com.google.javascript.rhino.Node node59 = node41.useSourceInfoFrom(node55);
        boolean boolean60 = node59.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isArrayLit();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.isNE();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(4095, node59, node62, node67, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(36, node74, node76, node83);
        boolean boolean85 = node83.isTypeOf();
        boolean boolean86 = node83.isGetterDef();
        boolean boolean87 = node83.isFor();
        boolean boolean88 = node17.isEquivalentToTyped(node83);
        com.google.javascript.rhino.Node node89 = node1.useSourceInfoIfMissingFrom(node17);
        boolean boolean90 = node17.isLabelName();
        com.google.javascript.rhino.Node node91 = node17.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4095 + "'", int15 == 4095);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        boolean boolean26 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node node33 = node21.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isArrayLit();
        com.google.javascript.rhino.Node node39 = node21.useSourceInfoFrom(node35);
        boolean boolean40 = node39.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isArrayLit();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        boolean boolean48 = node47.isOnlyModifiesThisCall();
        boolean boolean49 = node47.isEmpty();
        boolean boolean50 = node47.isReturn();
        boolean boolean51 = node47.isNE();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(4095, node39, node42, node47, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node55 = node18.useSourceInfoIfMissingFrom(node54);
        boolean boolean56 = node55.isNull();
        boolean boolean57 = node55.isFromExterns();
        boolean boolean58 = node1.isEquivalentTo(node55);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(10, 42, (int) (byte) 1);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        boolean boolean6 = node5.isOnlyModifiesThisCall();
        boolean boolean7 = node5.isEmpty();
        boolean boolean8 = node5.isArrayLit();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        boolean boolean12 = node10.isSetterDef();
        com.google.javascript.rhino.Node node13 = node5.srcref(node10);
        com.google.javascript.rhino.Node node14 = node13.getLastSibling();
        boolean boolean15 = node14.isSetterDef();
        com.google.javascript.rhino.Node node16 = node3.clonePropsFrom(node14);
        boolean boolean17 = node16.isDebugger();
        boolean boolean18 = node16.isDelProp();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node30 = node8.getLastChild();
        boolean boolean31 = node8.isRegExp();
        node8.removeProp(409700);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        java.lang.String str73 = node70.getString();
        int int74 = node70.getLineno();
        int int75 = node70.getCharno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isLabel();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isEmpty();
        boolean boolean9 = node6.isArrayLit();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        boolean boolean12 = node11.isOnlyModifiesThisCall();
        boolean boolean13 = node11.isSetterDef();
        com.google.javascript.rhino.Node node14 = node6.srcref(node11);
        com.google.javascript.rhino.Node node15 = node14.getLastSibling();
        boolean boolean16 = node15.isIf();
        node15.setLength(4);
        boolean boolean19 = node15.isFunction();
        com.google.javascript.rhino.Node node20 = node1.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            node20.addChildToBack(node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        java.lang.String str5 = node1.toStringTree();
        boolean boolean6 = node1.isDelProp();
        int int7 = node1.getType();
        int int9 = node1.getIntProp((int) '4');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 8.0\n" + "'", str5, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 39 + "'", int7 == 39);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 30, 0);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node18 = node12.removeFirstChild();
        boolean boolean19 = node12.isAnd();
        boolean boolean20 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isSetterDef();
        com.google.javascript.rhino.Node node30 = node22.srcref(node27);
        node12.addChildToFront(node22);
        com.google.javascript.rhino.Node node32 = node12.getLastChild();
        com.google.javascript.rhino.Node node33 = node3.useSourceInfoIfMissingFromForTree(node12);
        node3.addSuppression("STRING  0\n    NUMBER 0.0 [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        com.google.javascript.rhino.Node node5 = node1.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        com.google.javascript.rhino.Node node10 = node7.removeFirstChild();
        boolean boolean11 = node7.isIf();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.Node node17 = node7.srcrefTree(node13);
        boolean boolean18 = node7.isContinue();
        com.google.javascript.rhino.Node node19 = node1.srcrefTree(node7);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags21 = new com.google.javascript.rhino.Node.SideEffectFlags((-1));
        sideEffectFlags21.setMutatesArguments();
        // The following exception was thrown during execution in test generation
        try {
            node7.setSideEffectFlags(sideEffectFlags21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile76 = node4.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(staticSourceFile76);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node38.isIf();
        com.google.javascript.rhino.Node node40 = null;
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        boolean boolean60 = node56.isVarArgs();
        node56.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        com.google.javascript.rhino.Node node63 = node49.copyInformationFromForTree(node56);
        // The following exception was thrown during execution in test generation
        try {
            node38.addChildAfter(node40, node49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.clearAllFlags();
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        boolean boolean30 = node29.isStringKey();
        boolean boolean31 = node29.isNumber();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node29.getStaticSourceFile();
        boolean boolean33 = node29.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isContinue();
        com.google.javascript.rhino.jstype.JSType jSType16 = node13.getJSType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSType16);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        boolean boolean10 = node9.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isInc();
        boolean boolean8 = node1.isWhile();
        node1.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNew();
        node1.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        boolean boolean13 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node8.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node26 = node8.useSourceInfoFrom(node22);
        boolean boolean27 = node8.isVarArgs();
        int int28 = node8.getType();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        boolean boolean51 = node50.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        boolean boolean55 = node53.isEmpty();
        boolean boolean56 = node53.isArrayLit();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isReturn();
        boolean boolean62 = node58.isNE();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node50, node53, node58, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(36, node65, node67, node74);
        boolean boolean76 = node74.isTypeOf();
        boolean boolean77 = node74.isGetterDef();
        boolean boolean78 = node74.isFor();
        boolean boolean79 = node8.isEquivalentToTyped(node74);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("");
        node81.setSourceEncodedPosition(4095);
        boolean boolean84 = node81.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = node81.getStaticSourceFile();
        boolean boolean86 = node81.isAssignAdd();
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString("");
        node88.setSourceEncodedPosition(4095);
        boolean boolean91 = node88.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile92 = node88.getStaticSourceFile();
        com.google.javascript.rhino.Node node93 = node81.copyInformationFromForTree(node88);
        boolean boolean94 = node81.isWith();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildAfter(node74, node81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 40 + "'", int28 == 40);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(staticSourceFile85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(staticSourceFile92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node1.setJSType(jSType75);
        com.google.javascript.rhino.InputId inputId77 = null;
        node1.setInputId(inputId77);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        boolean boolean81 = node80.isOnlyModifiesThisCall();
        boolean boolean82 = node80.isEmpty();
        boolean boolean83 = node80.isReturn();
        boolean boolean84 = node80.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("");
        node86.setSourceEncodedPosition(4095);
        boolean boolean89 = node86.isNot();
        boolean boolean90 = node86.isBreak();
        boolean boolean91 = node86.isIn();
        com.google.javascript.rhino.Node node92 = node80.useSourceInfoIfMissingFromForTree(node86);
        node86.setSourceEncodedPositionForTree(39);
        boolean boolean95 = node86.isIf();
        node1.addChildToFront(node86);
        com.google.javascript.rhino.JSDocInfo jSDocInfo97 = null;
        node1.setJSDocInfo(jSDocInfo97);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node18.getLastChild();
        boolean boolean29 = node18.isNumber();
        int int30 = node18.getLength();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isNot();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor14 = ancestorIterable13.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertNotNull(nodeItor14);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        node2.putProp((int) '4', (java.lang.Object) node8);
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isVar();
        node8.setString("STRING ");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isSetterDef();
        com.google.javascript.rhino.Node node25 = node17.srcref(node22);
        com.google.javascript.rhino.Node node26 = node25.getLastSibling();
        boolean boolean27 = node26.isIf();
        node26.setLength(4);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        node46.setVarArgs(false);
        boolean boolean53 = node46.isFromExterns();
        boolean boolean54 = node46.isNull();
        boolean boolean55 = node46.isFalse();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node70 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node72 = node44.useSourceInfoFromForTree(node71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(45, node72);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(44, node8, node26, node73);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder75 = node26.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isLabel();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        boolean boolean27 = node23.isIf();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.Node node33 = node23.srcrefTree(node29);
        boolean boolean34 = node33.isFromExterns();
        node1.addChildrenToFront(node33);
        boolean boolean36 = node33.isComma();
        boolean boolean37 = node33.isEmpty();
        int int39 = node33.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = node33.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        int int14 = node13.getSideEffectFlags();
        boolean boolean15 = node13.isStringKey();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean14 = node13.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 8.0\n", 10, 49);
        boolean boolean4 = node3.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isGetProp();
        boolean boolean14 = node10.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(43);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        boolean boolean8 = node1.isInstanceOf();
        boolean boolean9 = node1.isGetElem();
        node1.putBooleanProp(8, true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        node9.detachChildren();
        java.lang.String str11 = node9.getQualifiedName();
        int int12 = node9.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node8.getLastChild();
        boolean boolean29 = node8.isInstanceOf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        boolean boolean36 = node31.isAssignAdd();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node38.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node31.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isArrayLit();
        com.google.javascript.rhino.Node node49 = node31.useSourceInfoFrom(node45);
        boolean boolean50 = node31.isVarArgs();
        int int51 = node31.getType();
        node8.addChildToBack(node31);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder53 = node31.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 40 + "'", int51 == 40);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(32, nodeArray62);
        int int65 = node63.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        boolean boolean77 = node73.isBreak();
        boolean boolean78 = node73.isIn();
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        com.google.javascript.rhino.Node node80 = node63.useSourceInfoFrom(node73);
        boolean boolean81 = node73.isNE();
        java.lang.String str82 = node39.checkTreeEquals(node73);
        int int84 = node39.getIntProp(32);
        boolean boolean85 = node39.isEmpty();
        com.google.javascript.rhino.Node node86 = node39.getParent();
        node39.setSourceFileForTesting("STRING NUMBER 8.0\n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n" + "'", str82, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(node86);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isLabel();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node1.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        java.lang.Appendable appendable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isInc();
        com.google.javascript.rhino.Node node8 = node1.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node24.removeProp(53);
        node24.setLength(4095);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = node72.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        com.google.javascript.rhino.Node node6 = node3.getAncestor(40992);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        com.google.javascript.rhino.Node node11 = node8.removeFirstChild();
        boolean boolean12 = node8.isIf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.Node node18 = node8.srcrefTree(node14);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        boolean boolean25 = node20.isAssignAdd();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        node27.setSourceEncodedPosition(4095);
        boolean boolean30 = node27.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node27.getStaticSourceFile();
        com.google.javascript.rhino.Node node32 = node20.copyInformationFromForTree(node27);
        com.google.javascript.rhino.Node node33 = node27.removeFirstChild();
        boolean boolean34 = node27.isAnd();
        node27.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node39 = node27.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node39.siblings();
        node39.putIntProp(12, 43);
        com.google.javascript.rhino.Node node44 = node18.useSourceInfoFromForTree(node39);
        com.google.javascript.rhino.Node node45 = node39.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node46 = node3.srcrefTree(node45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node32.isNE();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(41);
        boolean boolean43 = node42.isTry();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        boolean boolean48 = node45.isNot();
        boolean boolean49 = node45.isBreak();
        boolean boolean50 = node45.isTypeOf();
        int int51 = node45.getCharno();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        int int55 = node53.getSourceOffset();
        boolean boolean56 = node53.isExprResult();
        com.google.javascript.rhino.Node node57 = node45.srcref(node53);
        com.google.javascript.rhino.InputId inputId58 = null;
        node57.setInputId(inputId58);
        com.google.javascript.rhino.Node node60 = node57.removeFirstChild();
        node57.detachChildren();
        // The following exception was thrown during execution in test generation
        try {
            node32.addChildAfter(node42, node57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4095 + "'", int51 == 4095);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node60);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        com.google.javascript.rhino.jstype.JSType jSType32 = node15.getJSType();
        boolean boolean33 = node15.isGetterDef();
        boolean boolean34 = node15.isIn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 32, 40);
        boolean boolean4 = node3.isOnlyModifiesThisCall();
        boolean boolean5 = node3.isGetterDef();
        boolean boolean6 = node3.isCall();
        com.google.javascript.rhino.Node node7 = node3.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node32.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node58 = node32.removeFirstChild();
        node32.detachChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder57);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 10);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        node1.setLength(0);
        node1.addSuppression("TRUE\n    STRING STRING \n    STRING  [length: 4]\n    SHEQ\n        STRING  0\n");
        node1.setType(42);
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: THIS  0 [jsdoc_info: JSDocInfo] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node30 = node8.getLastChild();
        boolean boolean31 = node8.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        boolean boolean53 = node49.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node54 = node36.srcref(node49);
        boolean boolean55 = node54.isNoSideEffectsCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node54.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(staticSourceFile56);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node1.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        boolean boolean6 = node5.isOnlyModifiesThisCall();
        boolean boolean7 = node5.isEmpty();
        boolean boolean8 = node5.isCatch();
        int int9 = node5.getSourceOffset();
        boolean boolean10 = node5.isHook();
        node1.addChildToBack(node5);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isCatch();
        int int21 = node17.getSourceOffset();
        boolean boolean22 = node17.isHook();
        node13.addChildToBack(node17);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNew();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isSetterDef();
        com.google.javascript.rhino.Node node34 = node30.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        com.google.javascript.rhino.Node node39 = node36.removeFirstChild();
        boolean boolean40 = node36.isIf();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.Node node46 = node36.srcrefTree(node42);
        boolean boolean47 = node36.isContinue();
        com.google.javascript.rhino.Node node48 = node30.srcrefTree(node36);
        boolean boolean49 = node25.isEquivalentTo(node48);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node17, node48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        boolean boolean9 = node6.isIf();
        int int10 = node6.getSourcePosition();
        double double11 = node6.getDouble();
        boolean boolean12 = node6.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 409700 + "'", int10 == 409700);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 37.0d + "'", double11 == 37.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        boolean boolean16 = node1.isNot();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        java.lang.String str47 = node38.toString();
        node38.setSourceEncodedPositionForTree(31);
        // The following exception was thrown during execution in test generation
        try {
            node38.setSideEffectFlags(46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "STRING  0" + "'", str47, "STRING  0");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        boolean boolean32 = node21.isDelProp();
        com.google.javascript.rhino.Node node34 = node21.getAncestor(43);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        int int11 = node7.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        boolean boolean19 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = node14.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isArrayLit();
        com.google.javascript.rhino.Node node32 = node14.useSourceInfoFrom(node28);
        boolean boolean33 = node32.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isArrayLit();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isReturn();
        boolean boolean44 = node40.isNE();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(4095, node32, node35, node40, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node32.getIndexOfChild(node48);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node53 = node32.clonePropsFrom(node51);
        int int54 = node51.getSideEffectFlags();
        node7.addChildToBack(node51);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isReturn();
        boolean boolean61 = node57.isRegExp();
        java.lang.String str62 = node57.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable63 = node57.getAncestors();
        boolean boolean64 = node57.isScript();
        boolean boolean65 = node7.isEquivalentTo(node57);
        int int66 = node7.getLength();
        int int67 = node7.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "STRING \n" + "'", str62, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(50);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100);
        boolean boolean2 = node1.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        node1.setSourceFileForTesting("STRING ");
        boolean boolean17 = node1.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.isVar();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node71 = node65.removeFirstChild();
        boolean boolean72 = node65.isAnd();
        node65.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node77 = node65.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable78 = node77.siblings();
        node77.putIntProp(12, 43);
        node77.setType(49);
        // The following exception was thrown during execution in test generation
        try {
            node32.removeChild(node77);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(nodeIterable78);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNew();
        boolean boolean19 = node15.isGetElem();
        java.lang.String str20 = node15.getString();
        boolean boolean21 = node1.isEquivalentTo(node15);
        boolean boolean22 = node1.isLabelName();
        int int23 = node1.getSourcePosition();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4095 + "'", int23 == 4095);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node13.cloneTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isLabel();
        boolean boolean22 = node1.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node1.setJSType(jSType75);
        java.lang.String str77 = node1.getQualifiedName();
        com.google.javascript.rhino.Node node78 = node1.cloneNode();
        boolean boolean79 = node1.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.wasEmptyNode();
        boolean boolean7 = node3.isTypeOf();
        node3.setVarArgs(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int5 = node4.getLength();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(51, 4095, 42);
        int int10 = node9.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node25 = node19.removeFirstChild();
        boolean boolean26 = node19.isAnd();
        boolean boolean27 = node19.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isArrayLit();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        boolean boolean35 = node34.isOnlyModifiesThisCall();
        boolean boolean36 = node34.isSetterDef();
        com.google.javascript.rhino.Node node37 = node29.srcref(node34);
        node19.addChildToFront(node29);
        boolean boolean39 = node19.isVar();
        boolean boolean40 = node19.isIf();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(32, nodeArray62);
        int int65 = node63.getIntProp((int) (byte) 100);
        boolean boolean67 = node63.getBooleanProp(0);
        com.google.javascript.rhino.Node node68 = node19.useSourceInfoIfMissingFromForTree(node63);
        boolean boolean69 = node63.isAssignAdd();
        boolean boolean70 = node63.isTrue();
        com.google.javascript.rhino.Node node71 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(10, node4, node9, node63, node71, 12, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4095 + "'", int10 == 4095);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node28.isOptionalArg();
        com.google.javascript.rhino.Node node37 = node28.getLastSibling();
        java.util.Set<java.lang.String> strSet38 = node28.getDirectives();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(strSet38);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        boolean boolean48 = node36.isCall();
        java.util.Set<java.lang.String> strSet49 = node36.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean10 = node9.isTypeOf();
        boolean boolean11 = node9.isInc();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFrom(node12);
        int int14 = node2.getChildCount();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        node1.detachChildren();
        boolean boolean8 = node1.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        boolean boolean42 = node39.isTrue();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable39 = node38.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator40 = ancestorIterable39.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(ancestorIterable39);
        org.junit.Assert.assertNotNull(nodeSpliterator40);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node13.isNE();
        java.lang.String str15 = node13.toStringTree();
        boolean boolean16 = node13.isFromExterns();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING \n" + "'", str15, "STRING \n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        java.lang.String str9 = node2.toString(true, true, false);
        boolean boolean10 = node2.isWith();
        node2.putIntProp((int) (byte) 10, 0);
        node2.setSourceEncodedPositionForTree(409700);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 100, node2);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node16.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isEmpty();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        boolean boolean13 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node8.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node26 = node8.useSourceInfoFrom(node22);
        boolean boolean27 = node26.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isArrayLit();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        boolean boolean35 = node34.isOnlyModifiesThisCall();
        boolean boolean36 = node34.isEmpty();
        boolean boolean37 = node34.isReturn();
        boolean boolean38 = node34.isNE();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(4095, node26, node29, node34, (int) (byte) 10, 32);
        boolean boolean42 = node34.isCase();
        com.google.javascript.rhino.Node node43 = node1.srcref(node34);
        boolean boolean44 = node43.isRegExp();
        boolean boolean45 = node43.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        boolean boolean7 = node6.isReturn();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean12 = node11.isTypeOf();
        boolean boolean13 = node11.isInc();
        com.google.javascript.rhino.Node node14 = node11.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node14.new FileLevelJsDocBuilder();
        int int16 = node14.getSourceOffset();
        boolean boolean17 = node14.isIf();
        boolean boolean18 = node14.isName();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        boolean boolean21 = node20.isOnlyModifiesThisCall();
        boolean boolean22 = node20.isEmpty();
        boolean boolean23 = node20.isReturn();
        boolean boolean24 = node20.isRegExp();
        java.lang.String str25 = node20.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable26 = node20.getAncestors();
        boolean boolean27 = node20.isScript();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node29.getStaticSourceFile();
        boolean boolean34 = node29.isAssignAdd();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node36.getStaticSourceFile();
        com.google.javascript.rhino.Node node41 = node29.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node42 = node36.removeFirstChild();
        boolean boolean43 = node36.isAnd();
        boolean boolean44 = node36.isDec();
        int int45 = node36.getType();
        node20.addChildToFront(node36);
        // The following exception was thrown during execution in test generation
        try {
            node6.replaceChild(node14, node36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The new child node already has a parent.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING \n" + "'", str25, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(staticSourceFile33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 40 + "'", int45 == 40);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.wasEmptyNode();
        boolean boolean7 = node3.isTypeOf();
        boolean boolean8 = node3.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(0);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(32, nodeArray62);
        int int65 = node63.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        boolean boolean77 = node73.isBreak();
        boolean boolean78 = node73.isIn();
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        com.google.javascript.rhino.Node node80 = node63.useSourceInfoFrom(node73);
        boolean boolean81 = node73.isNE();
        java.lang.String str82 = node39.checkTreeEquals(node73);
        int int84 = node39.getIntProp(32);
        boolean boolean85 = node39.isEmpty();
        com.google.javascript.rhino.Node node86 = node39.getParent();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node87 = node86.getFirstChild();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n" + "'", str82, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(node86);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isArrayLit();
        com.google.javascript.rhino.Node node23 = node5.useSourceInfoFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] { node5 };
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(32, nodeArray24);
        int int27 = node25.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        boolean boolean39 = node35.isBreak();
        boolean boolean40 = node35.isIn();
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoFrom(node35);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        boolean boolean47 = node44.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node44.getStaticSourceFile();
        boolean boolean49 = node44.isAssignAdd();
        java.util.Set<java.lang.String> strSet50 = node44.getDirectives();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        node52.setSourceEncodedPosition(4095);
        boolean boolean55 = node52.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node52.getStaticSourceFile();
        node52.setVarArgs(false);
        boolean boolean59 = node52.isFromExterns();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        node61.setSourceEncodedPosition(4095);
        boolean boolean64 = node61.isNot();
        com.google.javascript.rhino.Node node65 = node61.getLastSibling();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(37, node25, node44, node52, node65);
        int int67 = node25.getSideEffectFlags();
        boolean boolean68 = node25.isFromExterns();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        boolean boolean71 = node70.isOnlyModifiesThisCall();
        boolean boolean72 = node70.isEmpty();
        com.google.javascript.rhino.Node node73 = node70.removeFirstChild();
        com.google.javascript.rhino.Node node74 = node25.useSourceInfoFrom(node70);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        boolean boolean77 = node76.isOnlyModifiesThisCall();
        boolean boolean78 = node76.isEmpty();
        boolean boolean79 = node76.isReturn();
        boolean boolean80 = node76.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable81 = node76.siblings();
        com.google.javascript.rhino.Node node82 = node74.copyInformationFrom(node76);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("");
        boolean boolean85 = node84.isOnlyModifiesThisCall();
        boolean boolean86 = node84.isEmpty();
        boolean boolean87 = node84.isCatch();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(48, node76, node84);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(29, node84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(nodeIterable81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        com.google.javascript.rhino.Node node66 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean71 = node70.isTypeOf();
        boolean boolean72 = node70.isInc();
        com.google.javascript.rhino.Node node73 = node70.cloneTree();
        node66.addChildToBack(node70);
        boolean boolean75 = node70.isOr();
        boolean boolean76 = node70.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isVar();
        boolean boolean32 = node28.isParamList();
        boolean boolean33 = node28.isOptionalArg();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isSetterDef();
        com.google.javascript.rhino.Node node39 = node35.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node39.new FileLevelJsDocBuilder();
        boolean boolean41 = node39.isTrue();
        com.google.javascript.rhino.Node node42 = node28.clonePropsFrom(node39);
        boolean boolean43 = node39.isParamList();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isArrayLit();
        boolean boolean6 = node2.isVarArgs();
        boolean boolean7 = node2.isObjectLit();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        boolean boolean15 = node9.isLabel();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(32, nodeArray37);
        int int40 = node38.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isReturn();
        boolean boolean46 = node42.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        boolean boolean52 = node48.isBreak();
        boolean boolean53 = node48.isIn();
        com.google.javascript.rhino.Node node54 = node42.useSourceInfoIfMissingFromForTree(node48);
        com.google.javascript.rhino.Node node55 = node38.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        boolean boolean70 = node57.isWith();
        node48.addChildToFront(node57);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node73.getStaticSourceFile();
        boolean boolean78 = node73.isAssignAdd();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node80.getStaticSourceFile();
        com.google.javascript.rhino.Node node85 = node73.copyInformationFromForTree(node80);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("");
        boolean boolean88 = node87.isOnlyModifiesThisCall();
        boolean boolean89 = node87.isEmpty();
        boolean boolean90 = node87.isArrayLit();
        com.google.javascript.rhino.Node node91 = node73.useSourceInfoFrom(node87);
        boolean boolean92 = node87.hasChildren();
        com.google.javascript.rhino.Node node93 = node48.copyInformationFrom(node87);
        boolean boolean94 = node48.isThis();
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node(37, node2, node9, node48, 53, 37);
        boolean boolean98 = node2.isNE();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(staticSourceFile77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(staticSourceFile84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        boolean boolean88 = node87.isBlock();
        boolean boolean89 = node87.isSetterDef();
        boolean boolean90 = node87.isFunction();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node45.isTypeOf();
        boolean boolean48 = node45.isGetterDef();
        boolean boolean49 = node45.isFor();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node45.setJSType(jSType50);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        boolean boolean55 = node53.isEmpty();
        boolean boolean56 = node53.isArrayLit();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isSetterDef();
        com.google.javascript.rhino.Node node61 = node53.srcref(node58);
        com.google.javascript.rhino.Node node62 = node61.getLastSibling();
        boolean boolean63 = node62.isIf();
        node45.addChildToFront(node62);
        boolean boolean65 = node62.isNull();
        java.lang.Appendable appendable66 = null;
        // The following exception was thrown during execution in test generation
        try {
            node62.appendStringTree(appendable66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        boolean boolean2 = node1.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        boolean boolean15 = node14.isDelProp();
        boolean boolean16 = node14.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node18.getLastChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isWhile();
        com.google.javascript.rhino.Node node33 = node30.getNext();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        boolean boolean44 = node39.isAssignAdd();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        com.google.javascript.rhino.Node node51 = node39.copyInformationFromForTree(node46);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        boolean boolean55 = node53.isEmpty();
        boolean boolean56 = node53.isArrayLit();
        com.google.javascript.rhino.Node node57 = node39.useSourceInfoFrom(node53);
        boolean boolean58 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        boolean boolean61 = node60.isOnlyModifiesThisCall();
        boolean boolean62 = node60.isEmpty();
        boolean boolean63 = node60.isArrayLit();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        boolean boolean66 = node65.isOnlyModifiesThisCall();
        boolean boolean67 = node65.isEmpty();
        boolean boolean68 = node65.isReturn();
        boolean boolean69 = node65.isNE();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(4095, node57, node60, node65, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node73 = node36.useSourceInfoIfMissingFrom(node72);
        boolean boolean74 = node73.isNull();
        // The following exception was thrown during execution in test generation
        try {
            node18.addChildAfter(node30, node73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        node2.putProp((int) '4', (java.lang.Object) node8);
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isVar();
        node8.setString("STRING ");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isSetterDef();
        com.google.javascript.rhino.Node node25 = node17.srcref(node22);
        com.google.javascript.rhino.Node node26 = node25.getLastSibling();
        boolean boolean27 = node26.isIf();
        node26.setLength(4);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        node46.setVarArgs(false);
        boolean boolean53 = node46.isFromExterns();
        boolean boolean54 = node46.isNull();
        boolean boolean55 = node46.isFalse();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node70 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node72 = node44.useSourceInfoFromForTree(node71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(45, node72);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(44, node8, node26, node73);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        boolean boolean79 = node76.isNot();
        boolean boolean80 = node76.isBreak();
        boolean boolean81 = node76.isTypeOf();
        int int82 = node76.getCharno();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("");
        boolean boolean85 = node84.isOnlyModifiesThisCall();
        int int86 = node84.getSourceOffset();
        boolean boolean87 = node84.isExprResult();
        com.google.javascript.rhino.Node node88 = node76.srcref(node84);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString("");
        node90.setSourceEncodedPosition(4095);
        boolean boolean93 = node90.isCall();
        boolean boolean94 = node76.isEquivalentTo(node90);
        com.google.javascript.rhino.Node node95 = node90.getLastSibling();
        int int96 = node73.getIndexOfChild(node95);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4095 + "'", int82 == 4095);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        boolean boolean2 = node1.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node((int) (short) -1, node1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        node9.detachChildren();
        int int11 = node9.getSourcePosition();
        node9.setLength(31);
        node9.setLength(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        boolean boolean78 = node4.isComma();
        // The following exception was thrown during execution in test generation
        try {
            int int80 = node4.getExistingIntProp(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 2");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        int int6 = node3.getSourcePosition();
        boolean boolean7 = node3.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 409700 + "'", int6 == 409700);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(32, nodeArray23);
        int int26 = node24.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        boolean boolean38 = node34.isBreak();
        boolean boolean39 = node34.isIn();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFrom(node34);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        java.util.Set<java.lang.String> strSet49 = node43.getDirectives();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        node51.setVarArgs(false);
        boolean boolean58 = node51.isFromExterns();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.Node node64 = node60.getLastSibling();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(37, node24, node43, node51, node64);
        boolean boolean66 = node65.isExprResult();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(49, node65, (int) (byte) 10, (int) (short) 10);
        boolean boolean70 = node69.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node18.getLastChild();
        boolean boolean29 = node18.isNumber();
        boolean boolean30 = node18.isAnd();
        java.lang.Appendable appendable31 = null;
        // The following exception was thrown during execution in test generation
        try {
            node18.appendStringTree(appendable31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        boolean boolean6 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isNumber();
        boolean boolean22 = node15.isVarArgs();
        boolean boolean23 = node15.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.InputId inputId14 = null;
        node13.setInputId(inputId14);
        boolean boolean16 = node13.isBlock();
        node13.setType(32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        boolean boolean73 = node23.isEmpty();
        node23.setType(40);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.isRegExp();
        java.lang.String str7 = node2.toStringTree();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean12 = node11.isTypeOf();
        boolean boolean13 = node11.isInc();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        boolean boolean19 = node15.isBreak();
        boolean boolean20 = node15.isTypeOf();
        int int21 = node15.getCharno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        int int25 = node23.getSourceOffset();
        boolean boolean26 = node23.isExprResult();
        com.google.javascript.rhino.Node node27 = node15.srcref(node23);
        boolean boolean28 = node15.isAssign();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(2, node2, node11, node15, (int) (short) 1, 42);
        boolean boolean32 = node15.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "STRING \n" + "'", str7, "STRING \n");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4095 + "'", int21 == 4095);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) -1);
        boolean boolean2 = node1.isFromExterns();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node34 = node16.useSourceInfoFrom(node30);
        boolean boolean35 = node16.isInc();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node38.getStaticSourceFile();
        boolean boolean43 = node38.isAssignAdd();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        boolean boolean48 = node45.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node45.getStaticSourceFile();
        com.google.javascript.rhino.Node node50 = node38.copyInformationFromForTree(node45);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isEmpty();
        boolean boolean55 = node52.isArrayLit();
        com.google.javascript.rhino.Node node56 = node38.useSourceInfoFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node38 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, nodeArray57);
        int int60 = node58.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        node68.setSourceEncodedPosition(4095);
        boolean boolean71 = node68.isNot();
        boolean boolean72 = node68.isBreak();
        boolean boolean73 = node68.isIn();
        com.google.javascript.rhino.Node node74 = node62.useSourceInfoIfMissingFromForTree(node68);
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoFrom(node68);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(29, node7, node9, node16, node75);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildToFront(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node71.isCase();
        boolean boolean79 = node71.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        com.google.javascript.rhino.Node node96 = node89.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(node96);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        boolean boolean7 = node6.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        com.google.javascript.rhino.Node node6 = node3.getAncestor(40992);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = node6.getLineno();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 8);
        boolean boolean58 = node57.isStringKey();
        node32.addChildrenToFront(node57);
        boolean boolean60 = node32.isScript();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        com.google.javascript.rhino.Node node20 = node15.getLastSibling();
        boolean boolean21 = node15.isQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        node1.setIsSyntheticBlock(true);
        int int23 = node1.getIntProp(0);
        node1.putIntProp(35, (int) 'a');
        com.google.javascript.rhino.Node node27 = node1.removeFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  0\n    NUMBER 0.0 [synthetic: 1]\n", 15, (int) (short) 1);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 100.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        boolean boolean57 = node56.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setThrows();
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        boolean boolean30 = node8.isGetElem();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node8.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node16.hasChildren();
        boolean boolean22 = node16.isNumber();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        boolean boolean39 = node31.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isArrayLit();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isSetterDef();
        com.google.javascript.rhino.Node node49 = node41.srcref(node46);
        node31.addChildToFront(node41);
        com.google.javascript.rhino.Node node51 = node31.getLastChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isTypeOf();
        int int59 = node53.getCharno();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        int int63 = node61.getSourceOffset();
        boolean boolean64 = node61.isExprResult();
        com.google.javascript.rhino.Node node65 = node53.srcref(node61);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isCall();
        boolean boolean71 = node53.isEquivalentTo(node67);
        node53.setIsSyntheticBlock(true);
        node53.setSourceFileForTesting("STRING \n");
        boolean boolean76 = node53.isSwitch();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        node78.setSourceEncodedPosition(4095);
        boolean boolean81 = node78.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = node78.getStaticSourceFile();
        boolean boolean83 = node78.isAssignAdd();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        node85.setSourceEncodedPosition(4095);
        boolean boolean88 = node85.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node85.getStaticSourceFile();
        com.google.javascript.rhino.Node node90 = node78.copyInformationFromForTree(node85);
        boolean boolean91 = node78.isNE();
        boolean boolean92 = node78.isThrow();
        boolean boolean93 = node78.wasEmptyNode();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(50, node16, node31, node53, node78);
        boolean boolean95 = node53.isGetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4095 + "'", int59 == 4095);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(staticSourceFile82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(staticSourceFile89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node24.removeProp(53);
        java.util.Set<java.lang.String> strSet31 = node24.getDirectives();
        boolean boolean32 = node24.isQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node24.new FileLevelJsDocBuilder();
        java.lang.String str34 = node24.getSourceFileName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        java.lang.String str8 = node1.toString(true, true, false);
        node1.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = null;
        node27.setJSDocInfo(jSDocInfo30);
        int int32 = node27.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 40 + "'", int32 == 40);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        java.lang.String str8 = node1.toString(true, true, false);
        boolean boolean9 = node1.isWith();
        node1.putIntProp((int) (byte) 10, 0);
        boolean boolean13 = node1.isContinue();
        boolean boolean14 = node1.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        node67.setVarArgs(false);
        boolean boolean75 = node67.isNumber();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = node3.getStaticSourceFile();
        org.junit.Assert.assertNull(staticSourceFile4);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        int int13 = node10.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.InputId inputId14 = null;
        node13.setInputId(inputId14);
        node13.setSourceEncodedPosition(4095);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node13.isNE();
        java.lang.String str15 = node13.toStringTree();
        com.google.javascript.rhino.Node node16 = node13.cloneTree();
        boolean boolean17 = node13.isRegExp();
        boolean boolean18 = node13.hasChildren();
        boolean boolean19 = node13.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING \n" + "'", str15, "STRING \n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        java.lang.String str5 = node1.toStringTree();
        boolean boolean6 = node1.isDelProp();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node9 };
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(32, nodeArray28);
        int int31 = node29.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isReturn();
        boolean boolean37 = node33.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        boolean boolean43 = node39.isBreak();
        boolean boolean44 = node39.isIn();
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node46 = node29.useSourceInfoFrom(node39);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        boolean boolean53 = node48.isAssignAdd();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        node55.setSourceEncodedPosition(4095);
        boolean boolean58 = node55.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = node55.getStaticSourceFile();
        com.google.javascript.rhino.Node node60 = node48.copyInformationFromForTree(node55);
        boolean boolean61 = node48.isWith();
        node39.addChildToFront(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node39.children();
        com.google.javascript.rhino.Node node64 = node1.srcrefTree(node39);
        int int65 = node64.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 8.0\n" + "'", str5, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(staticSourceFile59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 0L);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean10 = node9.isTypeOf();
        boolean boolean11 = node9.isInc();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        boolean boolean37 = node36.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        boolean boolean45 = node44.isOnlyModifiesThisCall();
        boolean boolean46 = node44.isEmpty();
        boolean boolean47 = node44.isReturn();
        boolean boolean48 = node44.isNE();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(4095, node36, node39, node44, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node52 = node15.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node52.isNull();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isReturn();
        boolean boolean59 = node55.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType60 = node55.getJSType();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        boolean boolean66 = node62.isBreak();
        boolean boolean67 = node62.isTypeOf();
        boolean boolean68 = node62.isInc();
        boolean boolean69 = node62.isWhile();
        node62.setSourceEncodedPosition((-1));
        boolean boolean72 = node55.hasChild(node62);
        com.google.javascript.rhino.Node node73 = node52.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = node12.srcrefTree(node52);
        boolean boolean75 = node12.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        boolean boolean57 = node56.isBlock();
        boolean boolean58 = node56.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        boolean boolean67 = node23.isThis();
        // The following exception was thrown during execution in test generation
        try {
            node23.setSideEffectFlags(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got TYPEOF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        int int96 = node78.getCharno();
        boolean boolean97 = node78.isVarArgs();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable98 = node78.getAncestors();
        boolean boolean99 = node78.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(ancestorIterable98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(46, "OR", 35, 24);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        boolean boolean9 = node1.getBooleanProp(45);
        boolean boolean10 = node1.isVoid();
        boolean boolean11 = node1.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isIf();
        com.google.javascript.rhino.Node node9 = node1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = node9.isString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isArrayLit();
        com.google.javascript.rhino.Node node23 = node5.useSourceInfoFrom(node19);
        boolean boolean24 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isArrayLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.isNE();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node23, node26, node31, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node39.isOptionalArg();
        com.google.javascript.rhino.Node node41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(44, node39, node41, 4, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean14 = node1.isThis();
        int int15 = node1.getCharno();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node17.isVarArgs();
        int int37 = node17.getType();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isArrayLit();
        com.google.javascript.rhino.Node node59 = node41.useSourceInfoFrom(node55);
        boolean boolean60 = node59.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isArrayLit();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.isNE();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(4095, node59, node62, node67, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(36, node74, node76, node83);
        boolean boolean85 = node83.isTypeOf();
        boolean boolean86 = node83.isGetterDef();
        boolean boolean87 = node83.isFor();
        boolean boolean88 = node17.isEquivalentToTyped(node83);
        com.google.javascript.rhino.Node node89 = node1.useSourceInfoIfMissingFrom(node17);
        boolean boolean90 = node17.isLabelName();
        // The following exception was thrown during execution in test generation
        try {
            node17.setDouble(37.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4095 + "'", int15 == 4095);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node7.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isArrayLit();
        com.google.javascript.rhino.Node node25 = node7.useSourceInfoFrom(node21);
        boolean boolean26 = node25.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isArrayLit();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isReturn();
        boolean boolean37 = node33.isNE();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(4095, node25, node28, node33, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(36, node40, node42, node49);
        boolean boolean51 = node50.isObjectLit();
        com.google.javascript.rhino.Node node52 = node1.srcrefTree(node50);
        boolean boolean53 = node1.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node7.isDebugger();
        boolean boolean12 = node7.isVar();
        node7.setString("STRING ");
        int int15 = node7.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        java.lang.Class<?> wildcardClass46 = node7.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(10, node33);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isWhile();
        com.google.javascript.rhino.Node node4 = node1.getNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node4.children();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        int int30 = node29.getCharno();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(39, "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n", 36, 0);
        boolean boolean36 = node35.isTry();
        node35.setType(409700);
        boolean boolean39 = node29.isEquivalentToTyped(node35);
        java.lang.String str40 = node29.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4095 + "'", int30 == 4095);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "STRING  0" + "'", str40, "STRING  0");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        boolean boolean78 = node4.isDec();
        node4.setLength(54);
        com.google.javascript.rhino.Node node82 = node4.getChildAtIndex(0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node82);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        boolean boolean6 = node5.isLabelName();
        // The following exception was thrown during execution in test generation
        try {
            node5.setDouble((double) 16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR 54 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        com.google.javascript.rhino.Node node75 = node13.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile76 = node75.getStaticSourceFile();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node75);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        java.lang.String str6 = node1.toStringTree();
        int int7 = node1.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING \n" + "'", str6, "STRING \n");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int61 = node60.getLength();
        com.google.javascript.rhino.Node node62 = node60.getFirstChild();
        boolean boolean63 = node32.isEquivalentToTyped(node60);
        boolean boolean64 = node32.isIn();
        boolean boolean65 = node32.isStringKey();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node38.isNull();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isReturn();
        boolean boolean45 = node41.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType46 = node41.getJSType();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        boolean boolean52 = node48.isBreak();
        boolean boolean53 = node48.isTypeOf();
        boolean boolean54 = node48.isInc();
        boolean boolean55 = node48.isWhile();
        node48.setSourceEncodedPosition((-1));
        boolean boolean58 = node41.hasChild(node48);
        com.google.javascript.rhino.Node node59 = node38.copyInformationFrom(node48);
        com.google.javascript.rhino.jstype.JSType jSType60 = node59.getJSType();
        boolean boolean61 = node59.isCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.wasEmptyNode();
        boolean boolean7 = node3.hasOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        boolean boolean76 = node74.isEmpty();
        boolean boolean77 = node74.isReturn();
        boolean boolean78 = node74.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node74.siblings();
        com.google.javascript.rhino.Node node80 = node72.copyInformationFrom(node74);
        boolean boolean82 = node80.getBooleanProp((int) 'a');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        boolean boolean46 = node1.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isNull();
        boolean boolean41 = node39.isDebugger();
        int int42 = node39.getSideEffectFlags();
        boolean boolean43 = node39.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isArrayLit();
        boolean boolean6 = node2.isVarArgs();
        boolean boolean7 = node2.isObjectLit();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        boolean boolean15 = node9.isLabel();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(32, nodeArray37);
        int int40 = node38.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isReturn();
        boolean boolean46 = node42.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        boolean boolean52 = node48.isBreak();
        boolean boolean53 = node48.isIn();
        com.google.javascript.rhino.Node node54 = node42.useSourceInfoIfMissingFromForTree(node48);
        com.google.javascript.rhino.Node node55 = node38.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        boolean boolean70 = node57.isWith();
        node48.addChildToFront(node57);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node73.getStaticSourceFile();
        boolean boolean78 = node73.isAssignAdd();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node80.getStaticSourceFile();
        com.google.javascript.rhino.Node node85 = node73.copyInformationFromForTree(node80);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("");
        boolean boolean88 = node87.isOnlyModifiesThisCall();
        boolean boolean89 = node87.isEmpty();
        boolean boolean90 = node87.isArrayLit();
        com.google.javascript.rhino.Node node91 = node73.useSourceInfoFrom(node87);
        boolean boolean92 = node87.hasChildren();
        com.google.javascript.rhino.Node node93 = node48.copyInformationFrom(node87);
        boolean boolean94 = node48.isThis();
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node(37, node2, node9, node48, 53, 37);
        boolean boolean98 = node97.isThrow();
        boolean boolean99 = node97.isTrue();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(staticSourceFile77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(staticSourceFile84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        boolean boolean6 = node5.isLocalResultCall();
        node5.setSourceEncodedPositionForTree(48);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(10, 42, (int) (byte) 1);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        boolean boolean6 = node5.isOnlyModifiesThisCall();
        boolean boolean7 = node5.isEmpty();
        boolean boolean8 = node5.isArrayLit();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        boolean boolean12 = node10.isSetterDef();
        com.google.javascript.rhino.Node node13 = node5.srcref(node10);
        com.google.javascript.rhino.Node node14 = node13.getLastSibling();
        boolean boolean15 = node14.isSetterDef();
        com.google.javascript.rhino.Node node16 = node3.clonePropsFrom(node14);
        boolean boolean17 = node16.isDebugger();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        boolean boolean23 = node19.isBreak();
        boolean boolean24 = node19.isTypeOf();
        int int25 = node19.getCharno();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        int int29 = node27.getSourceOffset();
        boolean boolean30 = node27.isExprResult();
        com.google.javascript.rhino.Node node31 = node19.srcref(node27);
        boolean boolean32 = node31.isNE();
        java.lang.String str33 = node31.toStringTree();
        com.google.javascript.rhino.Node node34 = node31.cloneTree();
        boolean boolean35 = node31.isRegExp();
        boolean boolean36 = node31.hasChildren();
        node16.addChildrenToBack(node31);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        boolean boolean44 = node39.isAssignAdd();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        com.google.javascript.rhino.Node node51 = node39.copyInformationFromForTree(node46);
        com.google.javascript.rhino.Node node52 = node46.removeFirstChild();
        boolean boolean53 = node46.isAnd();
        boolean boolean54 = node46.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        boolean boolean63 = node61.isSetterDef();
        com.google.javascript.rhino.Node node64 = node56.srcref(node61);
        node46.addChildToFront(node56);
        com.google.javascript.rhino.Node node66 = node56.getLastChild();
        boolean boolean67 = node56.isNumber();
        boolean boolean68 = node31.hasChild(node56);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4095 + "'", int25 == 4095);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "STRING \n" + "'", str33, "STRING \n");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setThrows();
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        node8.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node20 = node8.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.siblings();
        node20.putIntProp(12, 43);
        node20.setType(49);
        boolean boolean27 = node20.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        com.google.javascript.rhino.Node node66 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean71 = node70.isTypeOf();
        boolean boolean72 = node70.isInc();
        com.google.javascript.rhino.Node node73 = node70.cloneTree();
        node66.addChildToBack(node70);
        // The following exception was thrown during execution in test generation
        try {
            node70.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isDec();
        int int17 = node8.getType();
        com.google.javascript.rhino.Node node18 = node8.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((-1));
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(52, "TRUE\n    STRING STRING \n    STRING  [length: 4]\n    SHEQ\n        STRING  0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        com.google.javascript.rhino.Node node96 = node95.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 100);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isDebugger();
        com.google.javascript.rhino.Node node14 = node10.getFirstChild();
        com.google.javascript.rhino.Node node15 = node10.cloneNode();
        node15.removeProp(54);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        boolean boolean76 = node4.isCase();
        boolean boolean77 = node4.isCase();
        // The following exception was thrown during execution in test generation
        try {
            double double78 = node4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NEG 35 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        boolean boolean41 = node33.isNE();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isRegExp();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(52, node33, node43);
        boolean boolean49 = node33.isContinue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(54);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(32, nodeArray23);
        int int26 = node24.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        boolean boolean38 = node34.isBreak();
        boolean boolean39 = node34.isIn();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFrom(node34);
        boolean boolean42 = node41.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        boolean boolean48 = node45.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node45.getStaticSourceFile();
        boolean boolean50 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        node52.setSourceEncodedPosition(4095);
        boolean boolean55 = node52.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node node57 = node45.copyInformationFromForTree(node52);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isArrayLit();
        com.google.javascript.rhino.Node node63 = node45.useSourceInfoFrom(node59);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] { node45 };
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(32, nodeArray64);
        int int67 = node65.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        boolean boolean70 = node69.isOnlyModifiesThisCall();
        boolean boolean71 = node69.isEmpty();
        boolean boolean72 = node69.isReturn();
        boolean boolean73 = node69.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        node75.setSourceEncodedPosition(4095);
        boolean boolean78 = node75.isNot();
        boolean boolean79 = node75.isBreak();
        boolean boolean80 = node75.isIn();
        com.google.javascript.rhino.Node node81 = node69.useSourceInfoIfMissingFromForTree(node75);
        com.google.javascript.rhino.Node node82 = node65.useSourceInfoFrom(node75);
        boolean boolean83 = node75.isNE();
        java.lang.String str84 = node41.checkTreeEquals(node75);
        node1.addChildToFront(node41);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n" + "'", str84, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        boolean boolean30 = node29.isStringKey();
        boolean boolean31 = node29.isOptionalArg();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node36.getStaticSourceFile();
        boolean boolean41 = node36.isAssignAdd();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        com.google.javascript.rhino.Node node48 = node36.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        boolean boolean51 = node50.isOnlyModifiesThisCall();
        boolean boolean52 = node50.isEmpty();
        boolean boolean53 = node50.isArrayLit();
        com.google.javascript.rhino.Node node54 = node36.useSourceInfoFrom(node50);
        boolean boolean55 = node54.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.isNE();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(4095, node54, node57, node62, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node70 = node33.useSourceInfoIfMissingFrom(node69);
        boolean boolean71 = node70.isNull();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        boolean boolean74 = node73.isOnlyModifiesThisCall();
        boolean boolean75 = node73.isEmpty();
        boolean boolean76 = node73.isReturn();
        boolean boolean77 = node73.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType78 = node73.getJSType();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        node80.setSourceEncodedPosition((-1));
        boolean boolean90 = node73.hasChild(node80);
        com.google.javascript.rhino.Node node91 = node70.copyInformationFrom(node80);
        com.google.javascript.rhino.Node node92 = node29.useSourceInfoFromForTree(node80);
        boolean boolean93 = node92.isTypeOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSType78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isDefaultCase();
        int int3 = node1.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        int int7 = node1.getLineno();
        node1.setSourceFileForTesting("STRING ");
        boolean boolean10 = node1.isStringKey();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node1.setStaticSourceFile(staticSourceFile11);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.hasMoreThanOneChild();
        node10.setVarArgs(true);
        boolean boolean15 = node10.isDo();
        com.google.javascript.rhino.InputId inputId16 = null;
        node10.setInputId(inputId16);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        java.lang.String str15 = node8.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray6, 12, 100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(53, nodeArray6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, nodeArray6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(36, nodeArray6, (int) ' ', (int) (byte) 100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(54, nodeArray6, 4, 39);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(4, nodeArray6, 42, 10);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node42.isScript();
        java.lang.String str69 = node42.toString(true, false, true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "STRING  0" + "'", str69, "STRING  0");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isUnscopedQualifiedName();
        node19.putIntProp((int) (short) 0, 42);
        boolean boolean24 = node19.isObjectLit();
        boolean boolean25 = node19.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node36 = node30.removeFirstChild();
        boolean boolean37 = node30.isAnd();
        boolean boolean38 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node48 = node40.srcref(node45);
        node30.addChildToFront(node40);
        com.google.javascript.rhino.Node node50 = node30.getLastChild();
        boolean boolean51 = node30.isInstanceOf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        boolean boolean72 = node53.isVarArgs();
        int int73 = node53.getType();
        node30.addChildToBack(node53);
        int int75 = node1.getIndexOfChild(node53);
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node1.setJSType(jSType76);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(35, nodeArray1, 1, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isLabel();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        boolean boolean27 = node23.isIf();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.Node node33 = node23.srcrefTree(node29);
        boolean boolean34 = node33.isFromExterns();
        node1.addChildrenToFront(node33);
        node1.putIntProp(54, 31);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        boolean boolean15 = node13.isLabelName();
        boolean boolean16 = node13.isDebugger();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node1.setJSType(jSType75);
        com.google.javascript.rhino.InputId inputId77 = null;
        node1.setInputId(inputId77);
        boolean boolean79 = node1.isAssignAdd();
        boolean boolean80 = node1.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        com.google.javascript.rhino.Node node66 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean71 = node70.isTypeOf();
        boolean boolean72 = node70.isInc();
        com.google.javascript.rhino.Node node73 = node70.cloneTree();
        node66.addChildToBack(node70);
        com.google.javascript.rhino.Node node75 = node70.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node75);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isInc();
        boolean boolean8 = node1.isWhile();
        boolean boolean9 = node1.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        node7.setSourceEncodedPositionForTree(39);
        boolean boolean16 = node7.isIf();
        boolean boolean17 = node7.isContinue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean5 = node4.isBlock();
        boolean boolean6 = node4.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(40992, node4);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        boolean boolean88 = node87.isBlock();
        node87.addSuppression("NUMBER 37.0 100\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node45.isTypeOf();
        boolean boolean48 = node45.isGetterDef();
        boolean boolean49 = node45.isFor();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node45.setJSType(jSType50);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        boolean boolean55 = node53.isEmpty();
        boolean boolean56 = node53.isArrayLit();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isSetterDef();
        com.google.javascript.rhino.Node node61 = node53.srcref(node58);
        com.google.javascript.rhino.Node node62 = node61.getLastSibling();
        boolean boolean63 = node62.isIf();
        node45.addChildToFront(node62);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder65 = node62.getJsDocBuilderForNode();
        fileLevelJsDocBuilder65.append("TYPEOF 0\n    STRING \n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder65);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isWhile();
        com.google.javascript.rhino.Node node4 = node1.getNext();
        com.google.javascript.rhino.InputId inputId5 = null;
        node1.setInputId(inputId5);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node50.getSourcePosition();
        node50.detachChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4095 + "'", int65 == 4095);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNew();
        node1.setIsSyntheticBlock(true);
        boolean boolean7 = node1.isBreak();
        int int9 = node1.getIntProp(50);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        com.google.javascript.rhino.Node node5 = node2.removeFirstChild();
        boolean boolean6 = node2.isIf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.Node node12 = node2.srcrefTree(node8);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        boolean boolean19 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = node14.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node27 = node21.removeFirstChild();
        boolean boolean28 = node21.isAnd();
        node21.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node33 = node21.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node33.siblings();
        node33.putIntProp(12, 43);
        com.google.javascript.rhino.Node node38 = node12.useSourceInfoFromForTree(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, node33);
        boolean boolean41 = node33.isFunction();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, nodeArray5);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(36, nodeArray5, (int) ' ', (int) (byte) 100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(46, nodeArray5, 1, (int) (short) 0);
        int int17 = node16.getCharno();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node39 = node38.getLastSibling();
        boolean boolean40 = node38.isArrayLit();
        // The following exception was thrown during execution in test generation
        try {
            node38.setDouble((double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        int int16 = node1.getSourcePosition();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = node1.getExistingIntProp((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 35");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        boolean boolean78 = node4.isHook();
        // The following exception was thrown during execution in test generation
        try {
            node4.setString("STRING  0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NEG 35 [length: 4095] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        int int6 = node1.getType();
        boolean boolean7 = node1.isFalse();
        boolean boolean8 = node1.isTry();
        boolean boolean9 = node1.isGetElem();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = node70.getJSDocInfo();
        boolean boolean74 = node70.isCase();
        com.google.javascript.rhino.Node node75 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node76 = node70.srcrefTree(node75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesArguments();
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING \n");
        boolean boolean2 = node1.isExprResult();
        boolean boolean3 = node1.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(32, nodeArray51);
        int int54 = node52.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isReturn();
        boolean boolean60 = node56.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        boolean boolean66 = node62.isBreak();
        boolean boolean67 = node62.isIn();
        com.google.javascript.rhino.Node node68 = node56.useSourceInfoIfMissingFromForTree(node62);
        com.google.javascript.rhino.Node node69 = node52.useSourceInfoFrom(node62);
        boolean boolean70 = node52.isAnd();
        boolean boolean71 = node52.isComma();
        java.lang.String str72 = node52.toStringTree();
        boolean boolean73 = node52.isInc();
        com.google.javascript.rhino.Node node74 = node8.clonePropsFrom(node52);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "TYPEOF 0\n    STRING \n" + "'", str72, "TYPEOF 0\n    STRING \n");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        node15.setVarArgs(false);
        boolean boolean22 = node15.isFromExterns();
        boolean boolean23 = node15.isNull();
        boolean boolean24 = node15.isFalse();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        boolean boolean31 = node26.isAssignAdd();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node38 = node26.copyInformationFromForTree(node33);
        com.google.javascript.rhino.Node node39 = node33.removeFirstChild();
        com.google.javascript.rhino.Node node40 = node15.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node41 = node13.useSourceInfoFromForTree(node40);
        boolean boolean42 = node41.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        int int40 = node39.getChildCount();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node39.setStaticSourceFile(staticSourceFile41);
        node39.setSourceEncodedPosition((int) (byte) 0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isObjectLit();
        boolean boolean14 = node10.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        boolean boolean20 = node16.isBreak();
        boolean boolean21 = node16.isTypeOf();
        boolean boolean22 = node16.isDec();
        boolean boolean23 = node16.isInstanceOf();
        com.google.javascript.rhino.Node node24 = node10.clonePropsFrom(node16);
        int int25 = node10.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 40 + "'", int25 == 40);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node22.isNew();
        com.google.javascript.rhino.jstype.JSType jSType41 = node22.getJSType();
        java.lang.String str45 = node22.toString(true, true, false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSType41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "TYPEOF 0" + "'", str45, "TYPEOF 0");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        boolean boolean11 = node9.isEmpty();
        boolean boolean12 = node9.isReturn();
        boolean boolean13 = node9.isRegExp();
        java.lang.String str14 = node9.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node9.getAncestors();
        com.google.javascript.rhino.Node node16 = node1.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        node18.setVarArgs(false);
        boolean boolean25 = node18.isFromExterns();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node9.useSourceInfoFromForTree(node18);
        java.lang.Object obj34 = node18.getProp(37);
        boolean boolean35 = node18.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING \n" + "'", str14, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        com.google.javascript.rhino.Node node46 = node1.removeChildren();
        boolean boolean47 = node46.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(43, nodeArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearSideEffectFlags();
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = node2.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING STRING  0 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node1.setStaticSourceFile(staticSourceFile13);
        com.google.javascript.rhino.Node node15 = node1.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node17 = node15.getAncestor((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(45, "TRUE\n    STRING STRING \n    STRING  [length: 4]\n    SHEQ\n        STRING  0\n");
        boolean boolean3 = node2.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isDec();
        com.google.javascript.rhino.Node node32 = node28.getParent();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node28.setStaticSourceFile(staticSourceFile33);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        node50.putBooleanProp((int) (byte) 0, false);
        node50.setSourceEncodedPosition((int) 'a');
        boolean boolean70 = node50.isSwitch();
        boolean boolean71 = node50.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node22.isCall();
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        boolean boolean32 = node31.isNew();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node31.setStaticSourceFile(staticSourceFile33);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n", 0, 42);
        int int4 = node3.getSourceOffset();
        boolean boolean5 = node3.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node24.removeProp(53);
        java.util.Set<java.lang.String> strSet31 = node24.getDirectives();
        boolean boolean32 = node24.isTrue();
        node24.detachChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(32, nodeArray23);
        int int26 = node24.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        boolean boolean38 = node34.isBreak();
        boolean boolean39 = node34.isIn();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFrom(node34);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        java.util.Set<java.lang.String> strSet49 = node43.getDirectives();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        node51.setVarArgs(false);
        boolean boolean58 = node51.isFromExterns();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.Node node64 = node60.getLastSibling();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(37, node24, node43, node51, node64);
        boolean boolean66 = node65.isExprResult();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(49, node65, (int) (byte) 10, (int) (short) 10);
        boolean boolean70 = node69.isTry();
        boolean boolean71 = node69.isTrue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isFromExterns();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node7.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isArrayLit();
        com.google.javascript.rhino.Node node25 = node7.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node7 };
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(32, nodeArray26);
        int int29 = node27.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        boolean boolean41 = node37.isBreak();
        boolean boolean42 = node37.isIn();
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node44 = node27.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        boolean boolean51 = node46.isAssignAdd();
        java.util.Set<java.lang.String> strSet52 = node46.getDirectives();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        node54.setVarArgs(false);
        boolean boolean61 = node54.isFromExterns();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(37, node27, node46, node54, node67);
        boolean boolean69 = node68.isExprResult();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(49, node68, (int) (byte) 10, (int) (short) 10);
        com.google.javascript.rhino.Node node73 = node1.useSourceInfoFrom(node72);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        boolean boolean30 = node29.isStringKey();
        boolean boolean31 = node29.isOptionalArg();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node36.getStaticSourceFile();
        boolean boolean41 = node36.isAssignAdd();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        com.google.javascript.rhino.Node node48 = node36.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        boolean boolean51 = node50.isOnlyModifiesThisCall();
        boolean boolean52 = node50.isEmpty();
        boolean boolean53 = node50.isArrayLit();
        com.google.javascript.rhino.Node node54 = node36.useSourceInfoFrom(node50);
        boolean boolean55 = node54.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.isNE();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(4095, node54, node57, node62, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node70 = node33.useSourceInfoIfMissingFrom(node69);
        boolean boolean71 = node70.isNull();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        boolean boolean74 = node73.isOnlyModifiesThisCall();
        boolean boolean75 = node73.isEmpty();
        boolean boolean76 = node73.isReturn();
        boolean boolean77 = node73.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType78 = node73.getJSType();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        node80.setSourceEncodedPosition((-1));
        boolean boolean90 = node73.hasChild(node80);
        com.google.javascript.rhino.Node node91 = node70.copyInformationFrom(node80);
        com.google.javascript.rhino.Node node92 = node29.useSourceInfoFromForTree(node80);
        boolean boolean93 = node80.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSType78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        com.google.javascript.rhino.Node node96 = node78.getParent();
        com.google.javascript.rhino.Node node97 = node96.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        boolean boolean8 = node1.isUnscopedQualifiedName();
        boolean boolean9 = node1.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        node1.detachChildren();
        com.google.javascript.rhino.Node node8 = node1.getFirstChild();
        boolean boolean9 = node1.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        java.lang.String str4 = node1.getSourceFileName();
        com.google.javascript.rhino.Node node6 = node1.getAncestor((int) (byte) 10);
        node1.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isDefaultCase();
        boolean boolean3 = node1.isDec();
        node1.setString("STRING ");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNew();
        boolean boolean19 = node15.isGetElem();
        java.lang.String str20 = node15.getString();
        boolean boolean21 = node1.isEquivalentTo(node15);
        boolean boolean22 = node15.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        node1.removeProp(4);
        boolean boolean9 = node1.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        node6.setLineno((int) (short) 1);
        com.google.javascript.rhino.Node node77 = node6.removeChildren();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        boolean boolean76 = node74.isEmpty();
        boolean boolean77 = node74.isReturn();
        boolean boolean78 = node74.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node74.siblings();
        com.google.javascript.rhino.Node node80 = node72.copyInformationFrom(node74);
        com.google.javascript.rhino.Node node82 = node74.getAncestor(49);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.InputId inputId83 = node82.getInputId();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node82);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        boolean boolean7 = node6.isReturn();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node6.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        java.lang.String str8 = node1.toString(true, true, false);
        boolean boolean9 = node1.isWith();
        boolean boolean10 = node1.isGetElem();
        boolean boolean11 = node1.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node15 = node9.removeFirstChild();
        boolean boolean16 = node9.isAnd();
        node9.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node21 = node9.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node21.siblings();
        node21.putIntProp(12, 43);
        node21.setType(49);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node21, 38, (int) (short) 10);
        boolean boolean31 = node21.isAnd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        boolean boolean28 = node15.isNE();
        boolean boolean29 = node15.isThrow();
        boolean boolean30 = node15.isFor();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node65.isNE();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        boolean boolean76 = node75.isOnlyModifiesThisCall();
        boolean boolean77 = node75.isEmpty();
        boolean boolean78 = node75.isReturn();
        boolean boolean79 = node75.isRegExp();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(52, node65, node75);
        com.google.javascript.rhino.Node node81 = node31.useSourceInfoIfMissingFrom(node65);
        java.util.Set<java.lang.String> strSet82 = node81.getDirectives();
        com.google.javascript.rhino.jstype.JSType jSType83 = null;
        node81.setJSType(jSType83);
        boolean boolean85 = node81.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 12, (int) (short) -1);
        com.google.javascript.rhino.Node node79 = node72.copyInformationFromForTree(node78);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable80 = node79.children();
        node79.setCharno(29);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(nodeIterable80);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        boolean boolean78 = node4.isComma();
        boolean boolean79 = node4.isGetterDef();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 4, 32);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        boolean boolean86 = node85.isOnlyModifiesThisCall();
        boolean boolean87 = node85.isEmpty();
        boolean boolean88 = node85.isArrayLit();
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString("");
        boolean boolean91 = node90.isOnlyModifiesThisCall();
        boolean boolean92 = node90.isSetterDef();
        com.google.javascript.rhino.Node node93 = node85.srcref(node90);
        com.google.javascript.rhino.Node node94 = node93.getLastSibling();
        boolean boolean95 = node94.isIf();
        boolean boolean96 = node94.isArrayLit();
        boolean boolean97 = node94.isSyntheticBlock();
        int int98 = node83.getIndexOfChild(node94);
        com.google.javascript.rhino.Node node99 = node4.useSourceInfoIfMissingFrom(node83);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertNotNull(node99);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(32, nodeArray51);
        int int54 = node52.getIntProp((int) (byte) 100);
        boolean boolean56 = node52.getBooleanProp(0);
        com.google.javascript.rhino.Node node57 = node8.useSourceInfoIfMissingFromForTree(node52);
        node8.setCharno(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        com.google.javascript.rhino.Node node6 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(36, node43, node45, node52);
        int int54 = node1.getIndexOfChild(node52);
        com.google.javascript.rhino.Node node55 = node52.cloneNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        node4.setLength(54);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean84 = node83.isTypeOf();
        boolean boolean85 = node83.isInc();
        com.google.javascript.rhino.Node node86 = node4.useSourceInfoIfMissingFrom(node83);
        boolean boolean87 = node83.isLocalResultCall();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(46, node1, (int) (byte) -1, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isInc();
        boolean boolean21 = node1.isLocalResultCall();
        java.lang.String str22 = node1.getString();
        java.lang.Appendable appendable23 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 1L);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean2 = node1.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = null;
        node1.setJSDocInfo(jSDocInfo3);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isLabel();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        boolean boolean27 = node23.isIf();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.Node node33 = node23.srcrefTree(node29);
        boolean boolean34 = node33.isFromExterns();
        node1.addChildrenToFront(node33);
        boolean boolean36 = node33.isComma();
        boolean boolean37 = node33.isEmpty();
        int int39 = node33.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray45, 12, 100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(53, nodeArray45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100, nodeArray45);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray45);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) 'a', nodeArray45);
        int int53 = node33.getIndexOfChild(node52);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) -1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        boolean boolean5 = node1.isIf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.Node node11 = node1.srcrefTree(node7);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node26 = node20.removeFirstChild();
        boolean boolean27 = node20.isAnd();
        node20.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node32 = node20.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node32.siblings();
        node32.putIntProp(12, 43);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node32);
        boolean boolean38 = node11.isLabel();
        boolean boolean39 = node11.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        java.lang.String str5 = node1.getSourceFileName();
        boolean boolean6 = node1.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node22.isRegExp();
        com.google.javascript.rhino.Node node41 = node22.getLastChild();
        boolean boolean42 = node41.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isNumber();
        boolean boolean22 = node15.isTry();
        node15.setLength(29);
        int int25 = node15.getChildCount();
        node15.setSourceEncodedPositionForTree((int) (byte) 1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isAssign();
        node1.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        node1.setVarArgs(false);
        boolean boolean9 = node1.isSwitch();
        boolean boolean10 = node1.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        int int11 = node7.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isArrayLit();
        com.google.javascript.rhino.Node node33 = node15.useSourceInfoFrom(node29);
        boolean boolean34 = node33.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isArrayLit();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isReturn();
        boolean boolean45 = node41.isNE();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(4095, node33, node36, node41, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(36, node48, node50, node57);
        boolean boolean59 = node57.isTypeOf();
        boolean boolean60 = node57.isGetterDef();
        boolean boolean61 = node57.isFor();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node57.setJSType(jSType62);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        boolean boolean66 = node65.isOnlyModifiesThisCall();
        boolean boolean67 = node65.isEmpty();
        boolean boolean68 = node65.isArrayLit();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        boolean boolean71 = node70.isOnlyModifiesThisCall();
        boolean boolean72 = node70.isSetterDef();
        com.google.javascript.rhino.Node node73 = node65.srcref(node70);
        com.google.javascript.rhino.Node node74 = node73.getLastSibling();
        boolean boolean75 = node74.isIf();
        node57.addChildToFront(node74);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node77 = node7.removeChildAfter(node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node22.isRegExp();
        com.google.javascript.rhino.Node node41 = node22.getLastChild();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder42 = node22.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder42.append("STRING NUMBER 8.0\n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node32.isNE();
        boolean boolean41 = node32.isNE();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isNE();
        boolean boolean48 = node43.isContinue();
        boolean boolean49 = node43.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isRegExp();
        java.lang.String str56 = node51.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable57 = node51.getAncestors();
        com.google.javascript.rhino.Node node58 = node43.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        node60.setVarArgs(false);
        boolean boolean67 = node60.isFromExterns();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        node60.setDirectives((java.util.Set<java.lang.String>) strSet71);
        com.google.javascript.rhino.Node node74 = node51.useSourceInfoFromForTree(node60);
        java.lang.Object obj76 = node60.getProp(37);
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node60);
        boolean boolean78 = node77.isVar();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "STRING \n" + "'", str56, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isDefaultCase();
        boolean boolean3 = node1.isDec();
        boolean boolean4 = node1.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        boolean boolean16 = node1.isReturn();
        node1.setCharno(45);
        boolean boolean19 = node1.isExprResult();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isArrayLit();
        com.google.javascript.rhino.Node node41 = node23.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] { node23 };
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(32, nodeArray42);
        int int45 = node43.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        boolean boolean48 = node47.isOnlyModifiesThisCall();
        boolean boolean49 = node47.isEmpty();
        boolean boolean50 = node47.isReturn();
        boolean boolean51 = node47.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isIn();
        com.google.javascript.rhino.Node node59 = node47.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node60 = node43.useSourceInfoFrom(node53);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node62.getStaticSourceFile();
        boolean boolean67 = node62.isAssignAdd();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        node69.setSourceEncodedPosition(4095);
        boolean boolean72 = node69.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = node69.getStaticSourceFile();
        com.google.javascript.rhino.Node node74 = node62.copyInformationFromForTree(node69);
        boolean boolean75 = node62.isWith();
        node53.addChildToFront(node62);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable77 = node53.children();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(2, node53, 54, 0);
        boolean boolean81 = node1.isEquivalentTo(node80);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(staticSourceFile73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeIterable77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("TRUE\n    STRING STRING \n    STRING  [length: 4]\n    SHEQ\n        STRING  0\n");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 1, node2);
        boolean boolean4 = node2.isStringKey();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        com.google.javascript.rhino.Node node7 = node1.cloneNode();
        boolean boolean8 = node1.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable29 = node22.getAncestors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(ancestorIterable29);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isHook();
        boolean boolean22 = node1.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        int int5 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        int int3 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = null;
        node1.setStaticSourceFile(staticSourceFile7);
        boolean boolean9 = node1.isNumber();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.clearAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isDefaultCase();
        node1.addSuppression("STRING \n");
        boolean boolean5 = node1.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isFunction();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isReturn();
        boolean boolean39 = node35.isNE();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(4095, node27, node30, node35, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(36, node42, node44, node51);
        com.google.javascript.rhino.Node node53 = node3.copyInformationFromForTree(node44);
        node53.setType(52);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(32, nodeArray51);
        int int54 = node52.getIntProp((int) (byte) 100);
        boolean boolean56 = node52.getBooleanProp(0);
        com.google.javascript.rhino.Node node57 = node8.useSourceInfoIfMissingFromForTree(node52);
        int int58 = node52.getSourcePosition();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node32.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        boolean boolean47 = node44.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node44.getStaticSourceFile();
        boolean boolean49 = node44.isAssignAdd();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node node56 = node44.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isArrayLit();
        com.google.javascript.rhino.Node node62 = node44.useSourceInfoFrom(node58);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node44.new FileLevelJsDocBuilder();
        boolean boolean64 = node44.isDefaultCase();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 0, node44, (int) ' ', 53);
        boolean boolean68 = node44.isQuotedString();
        node32.putProp(409700, (java.lang.Object) boolean68);
        com.google.javascript.rhino.Node node71 = node32.getAncestor(36);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = node71.isBlock();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(node71);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        node8.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node20 = node8.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.siblings();
        node20.putIntProp(12, 43);
        int int25 = node20.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 40 + "'", int25 == 40);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        boolean boolean30 = node29.isStringKey();
        com.google.javascript.rhino.Node node31 = node29.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        int int5 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node45.isTypeOf();
        boolean boolean48 = node45.isGetterDef();
        boolean boolean49 = node45.isFor();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node45.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable50);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        node1.setVarArgs(true);
        boolean boolean8 = node1.isFor();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        node10.setString("STRING \n");
        node1.addChildToBack(node10);
        int int16 = node10.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(32, nodeArray51);
        int int54 = node52.getIntProp((int) (byte) 100);
        boolean boolean56 = node52.getBooleanProp(0);
        com.google.javascript.rhino.Node node57 = node8.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean58 = node52.isLocalResultCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        java.lang.String str6 = node1.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node1.getAncestors();
        boolean boolean8 = node1.isScript();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node23 = node17.removeFirstChild();
        boolean boolean24 = node17.isAnd();
        boolean boolean25 = node17.isDec();
        int int26 = node17.getType();
        node1.addChildToFront(node17);
        java.util.Set<java.lang.String> strSet28 = node1.getDirectives();
        node1.setSourceEncodedPositionForTree(35);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING \n" + "'", str6, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 40 + "'", int26 == 40);
        org.junit.Assert.assertNull(strSet28);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node2.new FileLevelJsDocBuilder();
        boolean boolean22 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, (int) ' ', 53);
        boolean boolean26 = node2.isQuotedString();
        boolean boolean27 = node2.isDelProp();
        com.google.javascript.rhino.Node node28 = node2.detachFromParent();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        java.lang.String str5 = node1.getSourceFileName();
        node1.setType((int) ' ');
        node1.setSourceFileForTesting("TYPEOF 0\n    STRING \n");
        // The following exception was thrown during execution in test generation
        try {
            int int11 = node1.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        boolean boolean4 = node3.isOnlyModifiesThisCall();
        boolean boolean5 = node3.isEmpty();
        com.google.javascript.rhino.Node node6 = node3.removeFirstChild();
        boolean boolean7 = node3.isIf();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.Node node13 = node3.srcrefTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node28 = node22.removeFirstChild();
        boolean boolean29 = node22.isAnd();
        node22.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node34 = node22.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node34.siblings();
        node34.putIntProp(12, 43);
        com.google.javascript.rhino.Node node39 = node13.useSourceInfoFromForTree(node34);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isSetterDef();
        com.google.javascript.rhino.Node node46 = node42.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        boolean boolean49 = node48.isOnlyModifiesThisCall();
        boolean boolean50 = node48.isEmpty();
        com.google.javascript.rhino.Node node51 = node48.removeFirstChild();
        boolean boolean52 = node48.isIf();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.Node node58 = node48.srcrefTree(node54);
        boolean boolean59 = node48.isContinue();
        com.google.javascript.rhino.Node node60 = node42.srcrefTree(node48);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(42, node1, node34, node48, 40, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node2.useSourceInfoIfMissingFromForTree(node8);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        boolean boolean29 = node16.isNE();
        boolean boolean30 = node16.isThrow();
        boolean boolean31 = node16.isFor();
        com.google.javascript.rhino.Node node32 = node8.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node36.getStaticSourceFile();
        boolean boolean41 = node36.isAssignAdd();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        com.google.javascript.rhino.Node node48 = node36.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        boolean boolean51 = node50.isOnlyModifiesThisCall();
        boolean boolean52 = node50.isEmpty();
        boolean boolean53 = node50.isArrayLit();
        com.google.javascript.rhino.Node node54 = node36.useSourceInfoFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] { node36 };
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(32, nodeArray55);
        int int58 = node56.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        boolean boolean61 = node60.isOnlyModifiesThisCall();
        boolean boolean62 = node60.isEmpty();
        boolean boolean63 = node60.isReturn();
        boolean boolean64 = node60.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        node66.setSourceEncodedPosition(4095);
        boolean boolean69 = node66.isNot();
        boolean boolean70 = node66.isBreak();
        boolean boolean71 = node66.isIn();
        com.google.javascript.rhino.Node node72 = node60.useSourceInfoIfMissingFromForTree(node66);
        com.google.javascript.rhino.Node node73 = node56.useSourceInfoFrom(node66);
        boolean boolean74 = node66.isNE();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        boolean boolean77 = node76.isOnlyModifiesThisCall();
        boolean boolean78 = node76.isEmpty();
        boolean boolean79 = node76.isReturn();
        boolean boolean80 = node76.isRegExp();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(52, node66, node76);
        com.google.javascript.rhino.Node node82 = node32.useSourceInfoIfMissingFrom(node66);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) 49, 39, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(32, node66, node86, (int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node3 = node2.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isCase();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node25 };
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(32, nodeArray44);
        int int47 = node45.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isReturn();
        boolean boolean53 = node49.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        node55.setSourceEncodedPosition(4095);
        boolean boolean58 = node55.isNot();
        boolean boolean59 = node55.isBreak();
        boolean boolean60 = node55.isIn();
        com.google.javascript.rhino.Node node61 = node49.useSourceInfoIfMissingFromForTree(node55);
        com.google.javascript.rhino.Node node62 = node45.useSourceInfoFrom(node55);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        boolean boolean69 = node64.isAssignAdd();
        java.util.Set<java.lang.String> strSet70 = node64.getDirectives();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        node72.setSourceEncodedPosition(4095);
        boolean boolean75 = node72.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile76 = node72.getStaticSourceFile();
        node72.setVarArgs(false);
        boolean boolean79 = node72.isFromExterns();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("");
        node81.setSourceEncodedPosition(4095);
        boolean boolean84 = node81.isNot();
        com.google.javascript.rhino.Node node85 = node81.getLastSibling();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(37, node45, node64, node72, node85);
        boolean boolean87 = node86.isExprResult();
        com.google.javascript.rhino.Node node88 = node86.removeFirstChild();
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean93 = node92.isTypeOf();
        boolean boolean94 = node92.isInc();
        com.google.javascript.rhino.Node node95 = node92.cloneTree();
        node88.addChildToBack(node92);
        boolean boolean97 = node92.isOr();
        com.google.javascript.rhino.Node node98 = node1.srcrefTree(node92);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(staticSourceFile76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        boolean boolean30 = node29.isStringKey();
        boolean boolean31 = node29.isNumber();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node29.getStaticSourceFile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node29.setStaticSourceFile(staticSourceFile33);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        com.google.javascript.rhino.Node node46 = node1.removeChildren();
        boolean boolean47 = node46.isGetElem();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(31);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        node39.setQuotedString();
        java.lang.String[] strArray45 = new java.lang.String[] { "STRING ", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet46);
        boolean boolean49 = node39.isCase();
        boolean boolean50 = node39.isGetElem();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        com.google.javascript.rhino.Node node6 = node3.getAncestor(40992);
        node3.putBooleanProp((int) (byte) 1, false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", (int) (byte) 100, 12);
        boolean boolean4 = node3.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 30, 10, 46);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isGetElem();
        boolean boolean29 = node8.isReturn();
        boolean boolean30 = node8.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node32.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node58 = node32.removeFirstChild();
        com.google.javascript.rhino.Node node60 = node32.getAncestor(0);
        node32.detachChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node6 = node3.removeFirstChild();
        boolean boolean7 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = null;
        node3.setJSDocInfo(jSDocInfo8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        boolean boolean15 = node11.isBreak();
        boolean boolean16 = node11.isIn();
        boolean boolean17 = node11.isLabel();
        java.lang.String str18 = node3.checkTreeEquals(node11);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node19 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 37.0 100\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER 37.0 100\n\n\nSubtree2: STRING  0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER 37.0 100\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER 37.0 100\n\n\nSubtree2: STRING  0\n");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        java.lang.String str46 = node7.getQualifiedName();
        boolean boolean47 = node7.isAssignAdd();
        node7.setType(2);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", (int) (byte) 100, 12);
        boolean boolean4 = node3.isCatch();
        com.google.javascript.rhino.Node node5 = node3.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        boolean boolean75 = node1.isSyntheticBlock();
        node1.setLength(35);
        boolean boolean78 = node1.isEmpty();
        boolean boolean79 = node1.isStringKey();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        node39.setQuotedString();
        boolean boolean43 = node39.isTypeOf();
        boolean boolean44 = node39.isGetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        com.google.javascript.rhino.Node node5 = node1.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        com.google.javascript.rhino.Node node10 = node7.removeFirstChild();
        boolean boolean11 = node7.isIf();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.Node node17 = node7.srcrefTree(node13);
        boolean boolean18 = node7.isContinue();
        com.google.javascript.rhino.Node node19 = node1.srcrefTree(node7);
        boolean boolean20 = node1.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        boolean boolean96 = node80.isNew();
        java.lang.String str97 = node80.getString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node2.new FileLevelJsDocBuilder();
        boolean boolean22 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, (int) ' ', 53);
        node2.removeProp((int) (byte) -1);
        boolean boolean28 = node2.isLocalResultCall();
        boolean boolean29 = node2.isThrow();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node42.isScript();
        java.util.Set<java.lang.String> strSet66 = node42.getDirectives();
        boolean boolean67 = node42.isOr();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node38.isIf();
        boolean boolean40 = node38.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        int int6 = node3.getSourcePosition();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node3.new FileLevelJsDocBuilder();
        boolean boolean8 = node3.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 409700 + "'", int6 == 409700);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        node1.setLength((int) '#');
        boolean boolean9 = node1.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node36 = node30.removeFirstChild();
        boolean boolean37 = node30.isAnd();
        boolean boolean38 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node48 = node40.srcref(node45);
        node30.addChildToFront(node40);
        com.google.javascript.rhino.Node node50 = node30.getLastChild();
        boolean boolean51 = node30.isInstanceOf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        boolean boolean72 = node53.isVarArgs();
        int int73 = node53.getType();
        node30.addChildToBack(node53);
        int int75 = node1.getIndexOfChild(node53);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int80 = node79.getLength();
        boolean boolean81 = node79.isStringKey();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = node1.clonePropsFrom(node79);
        boolean boolean85 = node1.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        boolean boolean6 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] { node10 };
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(32, nodeArray29);
        int int32 = node30.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        boolean boolean35 = node34.isOnlyModifiesThisCall();
        boolean boolean36 = node34.isEmpty();
        boolean boolean37 = node34.isReturn();
        boolean boolean38 = node34.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        boolean boolean44 = node40.isBreak();
        boolean boolean45 = node40.isIn();
        com.google.javascript.rhino.Node node46 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node47 = node30.useSourceInfoFrom(node40);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        boolean boolean54 = node49.isAssignAdd();
        java.util.Set<java.lang.String> strSet55 = node49.getDirectives();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        node57.setVarArgs(false);
        boolean boolean64 = node57.isFromExterns();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        node66.setSourceEncodedPosition(4095);
        boolean boolean69 = node66.isNot();
        com.google.javascript.rhino.Node node70 = node66.getLastSibling();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(37, node30, node49, node57, node70);
        int int72 = node30.getSideEffectFlags();
        boolean boolean73 = node30.isFromExterns();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        boolean boolean76 = node75.isOnlyModifiesThisCall();
        boolean boolean77 = node75.isEmpty();
        com.google.javascript.rhino.Node node78 = node75.removeFirstChild();
        com.google.javascript.rhino.Node node79 = node30.useSourceInfoFrom(node75);
        boolean boolean80 = node30.isBlock();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenToBack(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        int int42 = node39.getSideEffectFlags();
        com.google.javascript.rhino.Node node43 = node39.cloneNode();
        node43.setType((int) (short) 0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isNull();
        node39.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node49 = node45.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder50 = node49.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder50.append("STRING \n");
        node39.putProp(0, (java.lang.Object) "STRING \n");
        boolean boolean54 = node39.isReturn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        boolean boolean32 = node21.isDelProp();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node21.setJSType(jSType33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node21.children();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        node39.setQuotedString();
        java.lang.String[] strArray45 = new java.lang.String[] { "STRING ", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet46);
        boolean boolean49 = node39.isCase();
        boolean boolean50 = node39.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        node39.setJSDocInfo(jSDocInfo51);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        com.google.javascript.rhino.InputId inputId5 = node3.getInputId();
        boolean boolean6 = node3.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(inputId5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isHook();
        int int22 = node1.getType();
        boolean boolean23 = node1.isGetProp();
        boolean boolean24 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 40 + "'", int22 == 40);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 12, (int) (short) -1);
        com.google.javascript.rhino.Node node79 = node72.copyInformationFromForTree(node78);
        boolean boolean80 = node72.isFalse();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        boolean boolean5 = node1.isVarArgs();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node1.setStaticSourceFile(staticSourceFile6);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        boolean boolean28 = node15.isNE();
        boolean boolean29 = node15.isThrow();
        boolean boolean30 = node15.isFor();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoFrom(node15);
        boolean boolean32 = node7.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        node7.setSourceEncodedPositionForTree(50);
        boolean boolean13 = node7.isNoSideEffectsCall();
        int int14 = node7.getLineno();
        boolean boolean15 = node7.isScript();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        boolean boolean9 = node1.isNull();
        boolean boolean10 = node1.isFalse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node25 = node19.removeFirstChild();
        com.google.javascript.rhino.Node node26 = node1.useSourceInfoIfMissingFrom(node19);
        boolean boolean27 = node26.isNumber();
        boolean boolean28 = node26.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isVarArgs();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isReturn();
        boolean boolean39 = node35.isNE();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(4095, node27, node30, node35, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(36, node42, node44, node51);
        node1.putProp(12, (java.lang.Object) node44);
        boolean boolean54 = node44.isGetterDef();
        boolean boolean55 = node44.isLabelName();
        com.google.javascript.rhino.Node node56 = node44.getParent();
        boolean boolean57 = node56.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        boolean boolean9 = node1.isNull();
        boolean boolean10 = node1.isFalse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node25 = node19.removeFirstChild();
        com.google.javascript.rhino.Node node26 = node1.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node node27 = node26.cloneNode();
        boolean boolean28 = node26.isLocalResultCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        boolean boolean7 = node1.isGetProp();
        com.google.javascript.rhino.Node node8 = node1.getLastSibling();
        java.lang.Appendable appendable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 43, 10, 47);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n", 0, 42);
        int int9 = node8.getSourceOffset();
        node3.putProp(44, (java.lang.Object) int9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isVar();
        node28.putIntProp(409700, (int) (short) 10);
        boolean boolean35 = node28.hasOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node20.siblings();
        boolean boolean39 = node20.isAnd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        boolean boolean45 = node40.isAssignAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node40.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node58 = node40.useSourceInfoFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node40 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(32, nodeArray59);
        node20.addChildrenToFront(node60);
        boolean boolean62 = node60.isDelProp();
        com.google.javascript.rhino.InputId inputId63 = node60.getInputId();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(inputId63);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node32.isGetterDef();
        boolean boolean79 = node32.isQualifiedName();
        boolean boolean81 = node32.getBooleanProp(45);
        boolean boolean82 = node32.isNumber();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isReturn();
        boolean boolean6 = node3.isName();
        boolean boolean7 = node3.isGetElem();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        node21.addSuppression("NUMBER 8.0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isNull();
        boolean boolean41 = node39.isDebugger();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node39.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator43 = nodeIterable42.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(nodeSpliterator43);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        java.lang.String str5 = node1.getSourceFileName();
        node1.setType((int) ' ');
        boolean boolean8 = node1.isIn();
        boolean boolean9 = node1.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        node6.setLineno((int) (short) 1);
        int int77 = node6.getCharno();
        boolean boolean78 = node6.isOptionalArg();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4095 + "'", int77 == 4095);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isFromExterns();
        boolean boolean3 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 8.0\n");
        boolean boolean2 = node1.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        boolean boolean32 = node21.isDelProp();
        java.lang.String str33 = node21.getString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isArrayLit();
        com.google.javascript.rhino.Node node23 = node5.useSourceInfoFrom(node19);
        boolean boolean24 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isArrayLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.isNE();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node23, node26, node31, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(36, node38, node40, node47);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        boolean boolean55 = node50.isAssignAdd();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        com.google.javascript.rhino.Node node62 = node50.copyInformationFromForTree(node57);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        boolean boolean65 = node64.isOnlyModifiesThisCall();
        boolean boolean66 = node64.isEmpty();
        boolean boolean67 = node64.isArrayLit();
        com.google.javascript.rhino.Node node68 = node50.useSourceInfoFrom(node64);
        boolean boolean69 = node64.hasChildren();
        boolean boolean70 = node64.isNumber();
        boolean boolean71 = node64.isTry();
        com.google.javascript.rhino.Node node72 = node64.cloneTree();
        com.google.javascript.rhino.Node node73 = node40.srcrefTree(node72);
        node72.putBooleanProp(409700, true);
        int int77 = node1.getIndexOfChild(node72);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node32.new FileLevelJsDocBuilder();
        boolean boolean41 = node32.isExprResult();
        com.google.javascript.rhino.Node node42 = node32.getNext();
        com.google.javascript.rhino.Node node43 = node32.getNext();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node43);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isInc();
        boolean boolean21 = node1.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean14 = node1.isThis();
        java.lang.String str15 = node1.getSourceFileName();
        boolean boolean16 = node1.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setThrows();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        int int4 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        boolean boolean19 = node15.isVarArgs();
        node15.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        com.google.javascript.rhino.Node node22 = node8.copyInformationFromForTree(node15);
        boolean boolean23 = node15.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isNull();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = null;
        node39.setJSDocInfo(jSDocInfo41);
        boolean boolean43 = node39.isFalse();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isWhile();
        node1.setSourceFileForTesting("");
        boolean boolean6 = node1.isTypeOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        node8.setVarArgs(false);
        boolean boolean15 = node8.isFromExterns();
        boolean boolean16 = node8.isNull();
        boolean boolean17 = node8.isFalse();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        boolean boolean24 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node19.copyInformationFromForTree(node26);
        com.google.javascript.rhino.Node node32 = node26.removeFirstChild();
        com.google.javascript.rhino.Node node33 = node8.useSourceInfoIfMissingFrom(node26);
        int int34 = node26.getLength();
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node26);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(0);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        com.google.javascript.rhino.Node node73 = node56.cloneTree();
        boolean boolean74 = node56.isOptionalArg();
        java.lang.Appendable appendable75 = null;
        // The following exception was thrown during execution in test generation
        try {
            node56.appendStringTree(appendable75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, nodeArray5);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(36, nodeArray5, (int) ' ', (int) (byte) 100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(54, nodeArray5, 4, 39);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        boolean boolean24 = node18.isStringKey();
        int int25 = node18.getChildCount();
        java.lang.String str26 = node18.getString();
        node16.addChildToFront(node18);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        boolean boolean73 = node67.isWhile();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder74 = node67.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder74);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNew();
        boolean boolean19 = node15.isGetElem();
        java.lang.String str20 = node15.getString();
        boolean boolean21 = node1.isEquivalentTo(node15);
        com.google.javascript.rhino.Node node22 = node1.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node22.setDouble((double) 50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        com.google.javascript.rhino.Node node6 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(36, node43, node45, node52);
        int int54 = node1.getIndexOfChild(node52);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node1.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(jSDocInfo55);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        boolean boolean41 = node33.isNE();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isRegExp();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(52, node33, node43);
        boolean boolean49 = node43.isInstanceOf();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNew();
        node51.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node57 = node43.copyInformationFromForTree(node51);
        java.util.Set<java.lang.String> strSet58 = node51.getDirectives();
        java.lang.Appendable appendable59 = null;
        // The following exception was thrown during execution in test generation
        try {
            node51.appendStringTree(appendable59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(strSet58);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node42.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(36);
        boolean boolean2 = node1.isComma();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        int int25 = node22.getLength();
        node22.addSuppression("STRING ");
        boolean boolean28 = node22.isLabel();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        int int42 = node39.getSideEffectFlags();
        node39.setOptionalArg(true);
        boolean boolean45 = node39.isSyntheticBlock();
        // The following exception was thrown during execution in test generation
        try {
            node39.setSideEffectFlags(45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node1.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder20.append("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        fileLevelJsDocBuilder20.append("GT 0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(43, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n", 32, (int) 'a');
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node7.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isArrayLit();
        com.google.javascript.rhino.Node node25 = node7.useSourceInfoFrom(node21);
        boolean boolean26 = node25.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isArrayLit();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isReturn();
        boolean boolean37 = node33.isNE();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(4095, node25, node28, node33, (int) (byte) 10, 32);
        boolean boolean41 = node33.isOptionalArg();
        java.lang.String str42 = node33.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = node4.removeChildAfter(node33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(32, nodeArray51);
        int int54 = node52.getIntProp((int) (byte) 100);
        boolean boolean56 = node52.getBooleanProp(0);
        com.google.javascript.rhino.Node node57 = node8.useSourceInfoIfMissingFromForTree(node52);
        int int58 = node57.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 40 + "'", int58 == 40);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray5);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(409700, nodeArray5, 53, 2);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("STRING  0\n");
        node14.addChildrenToFront(node16);
        boolean boolean18 = node16.isOr();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        java.lang.String str5 = node1.toStringTree();
        int int6 = node1.getLength();
        java.lang.Object obj8 = node1.getProp((int) (short) 1);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        boolean boolean23 = node10.isNE();
        node10.setVarArgs(false);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isSetterDef();
        com.google.javascript.rhino.Node node35 = node27.srcref(node32);
        com.google.javascript.rhino.Node node36 = node35.getLastSibling();
        boolean boolean37 = node36.isIf();
        boolean boolean38 = node36.hasMoreThanOneChild();
        node36.setVarArgs(true);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildAfter(node10, node36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 8.0\n" + "'", str5, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNew();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node6.getStaticSourceFile();
        boolean boolean11 = node6.isAssignAdd();
        boolean boolean12 = node6.isStringKey();
        boolean boolean13 = node6.isDec();
        boolean boolean14 = node1.isEquivalentTo(node6);
        node6.setQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node32.isThis();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(2, "", 38, 44);
        com.google.javascript.rhino.Node node84 = node32.srcrefTree(node83);
        boolean boolean85 = node32.isVar();
        boolean boolean86 = node32.isLabel();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node17.new FileLevelJsDocBuilder();
        boolean boolean37 = node17.isDefaultCase();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 0, node17, (int) ' ', 53);
        boolean boolean41 = node17.isQuotedString();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node46 = node43.getLastSibling();
        node43.setSourceFileForTesting("");
        node17.addChildrenToFront(node43);
        boolean boolean50 = node13.isEquivalentToTyped(node17);
        node13.addSuppression("STRING  0\n    NUMBER 0.0 [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0, (int) (short) 10, (-1));
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isIn();
        boolean boolean7 = node1.isLabel();
        boolean boolean8 = node1.isLabel();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node1.getAncestors();
        boolean boolean10 = node1.isNE();
        int int11 = node1.getChildCount();
        node1.setString("STRING NUMBER 8.0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node38.isNull();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isReturn();
        boolean boolean45 = node41.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType46 = node41.getJSType();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        boolean boolean52 = node48.isBreak();
        boolean boolean53 = node48.isTypeOf();
        boolean boolean54 = node48.isInc();
        boolean boolean55 = node48.isWhile();
        node48.setSourceEncodedPosition((-1));
        boolean boolean58 = node41.hasChild(node48);
        com.google.javascript.rhino.Node node59 = node38.copyInformationFrom(node48);
        boolean boolean60 = node59.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isDec();
        com.google.javascript.rhino.Node node32 = node28.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = node32.isNew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 'a');
        boolean boolean2 = node1.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        java.lang.String str61 = node39.checkTreeEquals(node42);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isReturn();
        boolean boolean67 = node63.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node63.siblings();
        com.google.javascript.rhino.Node node69 = node39.clonePropsFrom(node63);
        node63.setIsSyntheticBlock(false);
        boolean boolean72 = node63.isString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n" + "'", str61, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n", 0, 42);
        int int4 = node3.getSourceOffset();
        java.lang.String str5 = node3.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        boolean boolean73 = node23.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        java.lang.Class<?> wildcardClass39 = node38.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.jstype.JSType jSType14 = node13.getJSType();
        java.lang.String str15 = node13.getString();
        boolean boolean16 = node13.isName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '4');
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(32, nodeArray23);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoFromForTree(node26);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node30.getStaticSourceFile();
        java.lang.String str35 = node30.toString(true, true, true);
        node1.addChildrenToBack(node30);
        boolean boolean37 = node30.isAssign();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "TYPEOF" + "'", str35, "TYPEOF");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isInc();
        boolean boolean8 = node1.isWhile();
        node1.setSourceEncodedPosition((-1));
        boolean boolean11 = node1.hasOneChild();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node1.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder12);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node36 = node30.removeFirstChild();
        boolean boolean37 = node30.isAnd();
        boolean boolean38 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node48 = node40.srcref(node45);
        node30.addChildToFront(node40);
        com.google.javascript.rhino.Node node50 = node30.getLastChild();
        boolean boolean51 = node30.isInstanceOf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        boolean boolean72 = node53.isVarArgs();
        int int73 = node53.getType();
        node30.addChildToBack(node53);
        int int75 = node1.getIndexOfChild(node53);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int80 = node79.getLength();
        boolean boolean81 = node79.isStringKey();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = node1.clonePropsFrom(node79);
        node79.setSourceEncodedPosition((int) '4');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isVar();
        node28.putIntProp(409700, (int) (short) 10);
        boolean boolean35 = node28.isContinue();
        boolean boolean36 = node28.isReturn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        node39.setQuotedString();
        java.lang.String[] strArray45 = new java.lang.String[] { "STRING ", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet46);
        boolean boolean49 = node39.isCase();
        boolean boolean50 = node39.isInstanceOf();
        node39.setSourceEncodedPositionForTree(0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        java.lang.Class<?> wildcardClass10 = node6.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(41);
        boolean boolean2 = node1.isTry();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node7.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isArrayLit();
        com.google.javascript.rhino.Node node25 = node7.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node7 };
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(32, nodeArray26);
        int int29 = node27.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        boolean boolean41 = node37.isBreak();
        boolean boolean42 = node37.isIn();
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node44 = node27.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        boolean boolean51 = node46.isAssignAdd();
        java.util.Set<java.lang.String> strSet52 = node46.getDirectives();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        node54.setVarArgs(false);
        boolean boolean61 = node54.isFromExterns();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(37, node27, node46, node54, node67);
        boolean boolean69 = node68.isExprResult();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(49, node68, (int) (byte) 10, (int) (short) 10);
        boolean boolean73 = node72.isAssign();
        com.google.javascript.rhino.Node node75 = node72.getAncestor(0);
        boolean boolean76 = node1.isEquivalentToTyped(node75);
        boolean boolean77 = node1.isObjectLit();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean2 = node1.isExprResult();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node34 = node16.useSourceInfoFrom(node30);
        boolean boolean35 = node16.isInc();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node38.getStaticSourceFile();
        boolean boolean43 = node38.isAssignAdd();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        boolean boolean48 = node45.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node45.getStaticSourceFile();
        com.google.javascript.rhino.Node node50 = node38.copyInformationFromForTree(node45);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isEmpty();
        boolean boolean55 = node52.isArrayLit();
        com.google.javascript.rhino.Node node56 = node38.useSourceInfoFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node38 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, nodeArray57);
        int int60 = node58.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        node68.setSourceEncodedPosition(4095);
        boolean boolean71 = node68.isNot();
        boolean boolean72 = node68.isBreak();
        boolean boolean73 = node68.isIn();
        com.google.javascript.rhino.Node node74 = node62.useSourceInfoIfMissingFromForTree(node68);
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoFrom(node68);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(29, node7, node9, node16, node75);
        com.google.javascript.rhino.Node node78 = node16.getFirstChild();
        com.google.javascript.rhino.Node node79 = node1.srcrefTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node16.setStaticSourceFile(staticSourceFile80);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node45.isTypeOf();
        boolean boolean48 = node45.isGetterDef();
        boolean boolean49 = node45.isFor();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node45.setJSType(jSType50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = node45.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 4, 32);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        boolean boolean9 = node5.isBreak();
        boolean boolean10 = node5.isTypeOf();
        int int11 = node5.getCharno();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        boolean boolean14 = node13.isOnlyModifiesThisCall();
        int int15 = node13.getSourceOffset();
        boolean boolean16 = node13.isExprResult();
        com.google.javascript.rhino.Node node17 = node5.srcref(node13);
        boolean boolean18 = node17.isNE();
        java.lang.String str19 = node17.toStringTree();
        com.google.javascript.rhino.Node node20 = node3.srcref(node17);
        com.google.javascript.rhino.jstype.JSType jSType21 = node20.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4095 + "'", int11 == 4095);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING \n" + "'", str19, "STRING \n");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(jSType21);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        node22.setVarArgs(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node7.getNext();
        node7.setLength(38);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) -1, (int) (short) 100, 0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        java.lang.String str75 = node6.toString();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "STRING  0" + "'", str75, "STRING  0");
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        java.lang.String str5 = node1.getSourceFileName();
        node1.setType((int) ' ');
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node14 = node13.cloneTree();
        int int15 = node1.getIndexOfChild(node13);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = null;
        node50.setJSDocInfo(jSDocInfo65);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.isRegExp();
        java.lang.String str7 = node2.toStringTree();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean12 = node11.isTypeOf();
        boolean boolean13 = node11.isInc();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        boolean boolean19 = node15.isBreak();
        boolean boolean20 = node15.isTypeOf();
        int int21 = node15.getCharno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        int int25 = node23.getSourceOffset();
        boolean boolean26 = node23.isExprResult();
        com.google.javascript.rhino.Node node27 = node15.srcref(node23);
        boolean boolean28 = node15.isAssign();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(2, node2, node11, node15, (int) (short) 1, 42);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable32 = node31.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor33 = ancestorIterable32.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor34 = ancestorIterable32.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "STRING \n" + "'", str7, "STRING \n");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4095 + "'", int21 == 4095);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(ancestorIterable32);
        org.junit.Assert.assertNotNull(nodeItor33);
        org.junit.Assert.assertNotNull(nodeItor34);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean3 = node2.isExprResult();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        boolean boolean14 = node10.isBreak();
        boolean boolean15 = node10.isIn();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node17.isInc();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        boolean boolean44 = node39.isAssignAdd();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        com.google.javascript.rhino.Node node51 = node39.copyInformationFromForTree(node46);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        boolean boolean55 = node53.isEmpty();
        boolean boolean56 = node53.isArrayLit();
        com.google.javascript.rhino.Node node57 = node39.useSourceInfoFrom(node53);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] { node39 };
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(32, nodeArray58);
        int int61 = node59.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isReturn();
        boolean boolean67 = node63.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        node69.setSourceEncodedPosition(4095);
        boolean boolean72 = node69.isNot();
        boolean boolean73 = node69.isBreak();
        boolean boolean74 = node69.isIn();
        com.google.javascript.rhino.Node node75 = node63.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node76 = node59.useSourceInfoFrom(node69);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(29, node8, node10, node17, node76);
        com.google.javascript.rhino.Node node79 = node17.getFirstChild();
        com.google.javascript.rhino.Node node80 = node2.srcrefTree(node17);
        node80.setDouble((double) 47);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(47, node80, 47, (int) 'a');
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        boolean boolean73 = node56.isLabelName();
        boolean boolean74 = node56.isName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 2, 0);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isReturn();
        boolean boolean22 = node15.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("TYPEOF", 45, 35);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node32.isThis();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(2, "", 38, 44);
        com.google.javascript.rhino.Node node84 = node32.srcrefTree(node83);
        boolean boolean85 = node84.isSwitch();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("");
        boolean boolean88 = node87.isOnlyModifiesThisCall();
        boolean boolean89 = node87.isEmpty();
        boolean boolean90 = node87.isCatch();
        java.lang.String str91 = node87.getSourceFileName();
        node87.setType((int) ' ');
        node87.setSourceFileForTesting("TYPEOF 0\n    STRING \n");
        com.google.javascript.rhino.Node node96 = node84.clonePropsFrom(node87);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        boolean boolean13 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node8.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node26 = node8.useSourceInfoFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] { node8 };
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, nodeArray27);
        int int30 = node28.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isReturn();
        boolean boolean36 = node32.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isIn();
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node45 = node28.useSourceInfoFrom(node38);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        boolean boolean52 = node47.isAssignAdd();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        com.google.javascript.rhino.Node node59 = node47.copyInformationFromForTree(node54);
        boolean boolean60 = node47.isWith();
        node38.addChildToFront(node47);
        com.google.javascript.rhino.Node node62 = node38.getLastSibling();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        boolean boolean68 = node64.isBreak();
        boolean boolean69 = node64.isTypeOf();
        int int70 = node64.getCharno();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        int int74 = node72.getSourceOffset();
        boolean boolean75 = node72.isExprResult();
        com.google.javascript.rhino.Node node76 = node64.srcref(node72);
        boolean boolean77 = node76.isNE();
        com.google.javascript.rhino.Node node78 = node62.srcrefTree(node76);
        com.google.javascript.rhino.Node node79 = node3.useSourceInfoFromForTree(node62);
        node3.addSuppression("STRING  0\n    NUMBER 0.0 [synthetic: 1]\n");
        boolean boolean82 = node3.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4095 + "'", int70 == 4095);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node1.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        boolean boolean6 = node5.isOnlyModifiesThisCall();
        boolean boolean7 = node5.isEmpty();
        boolean boolean8 = node5.isCatch();
        int int9 = node5.getSourceOffset();
        boolean boolean10 = node5.isHook();
        node1.addChildToBack(node5);
        boolean boolean12 = node1.isCase();
        com.google.javascript.rhino.Node node13 = node1.cloneTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        int int73 = node56.getLength();
        java.lang.String str74 = node56.toStringTree();
        boolean boolean75 = node56.isNew();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "STRING \n    STRING \n" + "'", str74, "STRING \n    STRING \n");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(32, nodeArray51);
        int int54 = node52.getIntProp((int) (byte) 100);
        boolean boolean56 = node52.getBooleanProp(0);
        com.google.javascript.rhino.Node node57 = node8.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean58 = node52.isAssignAdd();
        boolean boolean59 = node52.isDebugger();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node7.isDebugger();
        boolean boolean12 = node7.isName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node7.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor14 = ancestorIterable13.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator15 = ancestorIterable13.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor16 = ancestorIterable13.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator17 = ancestorIterable13.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertNotNull(nodeItor14);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertNotNull(nodeItor16);
        org.junit.Assert.assertNotNull(nodeSpliterator17);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isObjectLit();
        boolean boolean14 = node10.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        boolean boolean20 = node16.isBreak();
        boolean boolean21 = node16.isTypeOf();
        boolean boolean22 = node16.isDec();
        boolean boolean23 = node16.isInstanceOf();
        com.google.javascript.rhino.Node node24 = node10.clonePropsFrom(node16);
        com.google.javascript.rhino.InputId inputId25 = node10.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(inputId25);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isNot();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node2.useSourceInfoIfMissingFromForTree(node8);
        node8.setSourceEncodedPositionForTree(39);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isReturn();
        boolean boolean22 = node18.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        boolean boolean28 = node24.isBreak();
        boolean boolean29 = node24.isIn();
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        boolean boolean45 = node32.isNE();
        boolean boolean46 = node32.isThrow();
        boolean boolean47 = node32.isFor();
        com.google.javascript.rhino.Node node48 = node24.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node50.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isCatch();
        int int58 = node54.getSourceOffset();
        boolean boolean59 = node54.isHook();
        node50.addChildToBack(node54);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node63.getStaticSourceFile();
        boolean boolean68 = node63.isAssignAdd();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        com.google.javascript.rhino.Node node75 = node63.copyInformationFromForTree(node70);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isArrayLit();
        com.google.javascript.rhino.Node node81 = node63.useSourceInfoFrom(node77);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] { node63 };
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(32, nodeArray82);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        boolean boolean86 = node85.isOnlyModifiesThisCall();
        boolean boolean87 = node85.isEmpty();
        boolean boolean88 = node85.isReturn();
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoFromForTree(node85);
        boolean boolean90 = node85.isAdd();
        node85.putBooleanProp(38, false);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (short) 10, node8, node48, node50, node85);
        node48.putBooleanProp(0, true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isNumber();
        boolean boolean22 = node15.isTry();
        node15.setLineno((int) (byte) 10);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        com.google.javascript.rhino.Node node9 = node6.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean2 = node1.isExprResult();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node34 = node16.useSourceInfoFrom(node30);
        boolean boolean35 = node16.isInc();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node38.getStaticSourceFile();
        boolean boolean43 = node38.isAssignAdd();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        boolean boolean48 = node45.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node45.getStaticSourceFile();
        com.google.javascript.rhino.Node node50 = node38.copyInformationFromForTree(node45);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isEmpty();
        boolean boolean55 = node52.isArrayLit();
        com.google.javascript.rhino.Node node56 = node38.useSourceInfoFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node38 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, nodeArray57);
        int int60 = node58.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        node68.setSourceEncodedPosition(4095);
        boolean boolean71 = node68.isNot();
        boolean boolean72 = node68.isBreak();
        boolean boolean73 = node68.isIn();
        com.google.javascript.rhino.Node node74 = node62.useSourceInfoIfMissingFromForTree(node68);
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoFrom(node68);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(29, node7, node9, node16, node75);
        com.google.javascript.rhino.Node node78 = node16.getFirstChild();
        com.google.javascript.rhino.Node node79 = node1.srcrefTree(node16);
        boolean boolean80 = node79.isSwitch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(10, 42, (int) (byte) 1);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        boolean boolean6 = node5.isOnlyModifiesThisCall();
        boolean boolean7 = node5.isEmpty();
        boolean boolean8 = node5.isArrayLit();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        boolean boolean12 = node10.isSetterDef();
        com.google.javascript.rhino.Node node13 = node5.srcref(node10);
        com.google.javascript.rhino.Node node14 = node13.getLastSibling();
        boolean boolean15 = node14.isSetterDef();
        com.google.javascript.rhino.Node node16 = node3.clonePropsFrom(node14);
        boolean boolean17 = node14.isDo();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        node1.setLength(8);
        boolean boolean11 = node1.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "TYPEOF 0", 0, (int) (byte) 100);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesThis();
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        boolean boolean5 = node1.isCall();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        node7.setString("STRING \n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = null;
        node7.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(42);
        int int16 = node15.getSourcePosition();
        boolean boolean17 = node15.isCase();
        boolean boolean18 = node15.isInc();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildBefore(node7, node15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        int int11 = node7.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        boolean boolean19 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = node14.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isArrayLit();
        com.google.javascript.rhino.Node node32 = node14.useSourceInfoFrom(node28);
        boolean boolean33 = node32.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isArrayLit();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isReturn();
        boolean boolean44 = node40.isNE();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(4095, node32, node35, node40, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node32.getIndexOfChild(node48);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node53 = node32.clonePropsFrom(node51);
        int int54 = node51.getSideEffectFlags();
        node7.addChildToBack(node51);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isReturn();
        boolean boolean61 = node57.isRegExp();
        java.lang.String str62 = node57.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable63 = node57.getAncestors();
        boolean boolean64 = node57.isScript();
        boolean boolean65 = node7.isEquivalentTo(node57);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node57.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "STRING \n" + "'", str62, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeIterable66);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray2, 12, 100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(52, nodeArray2, 8, 36);
        org.junit.Assert.assertNotNull(nodeArray2);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node22.isRegExp();
        com.google.javascript.rhino.Node node41 = node22.getLastChild();
        boolean boolean42 = node41.isDo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  0\n    NUMBER 0.0 [synthetic: 1]\n", (int) (byte) -1, 43);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        boolean boolean45 = node40.isAssignAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node40.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node58 = node40.useSourceInfoFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node40 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(32, nodeArray59);
        node20.addChildrenToFront(node60);
        com.google.javascript.rhino.Node node62 = node20.detachFromParent();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(42);
        int int65 = node64.getSourcePosition();
        boolean boolean66 = node64.isCase();
        boolean boolean67 = node20.hasChild(node64);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        boolean boolean9 = node1.isNull();
        boolean boolean10 = node1.isFalse();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean15 = node14.isTypeOf();
        boolean boolean16 = node14.isInc();
        boolean boolean17 = node14.isSwitch();
        boolean boolean18 = node1.hasChild(node14);
        boolean boolean19 = node14.hasOneChild();
        boolean boolean20 = node14.isNumber();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        com.google.javascript.rhino.Node node6 = node1.getLastSibling();
        com.google.javascript.rhino.Node node7 = node1.getLastSibling();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        boolean boolean7 = node3.isNot();
        boolean boolean8 = node3.isDec();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node3.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 32, 40);
        boolean boolean4 = node3.isOnlyModifiesThisCall();
        boolean boolean5 = node3.isGetterDef();
        boolean boolean6 = node3.isDefaultCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        boolean boolean75 = node1.isSyntheticBlock();
        node1.setLength(35);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        boolean boolean81 = node79.isEmpty();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node79.siblings();
        boolean boolean85 = node79.isGetProp();
        com.google.javascript.rhino.Node node86 = node1.useSourceInfoIfMissingFromForTree(node79);
        com.google.javascript.rhino.InputId inputId87 = node86.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(inputId87);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node2.new FileLevelJsDocBuilder();
        boolean boolean22 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, (int) ' ', 53);
        boolean boolean26 = node2.isQuotedString();
        boolean boolean27 = node2.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 8.0\n", 10, 49);
        boolean boolean4 = node3.isCase();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 4, 32);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        boolean boolean9 = node5.isBreak();
        boolean boolean10 = node5.isTypeOf();
        int int11 = node5.getCharno();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        boolean boolean14 = node13.isOnlyModifiesThisCall();
        int int15 = node13.getSourceOffset();
        boolean boolean16 = node13.isExprResult();
        com.google.javascript.rhino.Node node17 = node5.srcref(node13);
        boolean boolean18 = node17.isNE();
        java.lang.String str19 = node17.toStringTree();
        com.google.javascript.rhino.Node node20 = node3.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100);
        int int23 = node22.getSideEffectFlags();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        boolean boolean31 = node26.isAssignAdd();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node38 = node26.copyInformationFromForTree(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node44 = node26.useSourceInfoFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] { node26 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(32, nodeArray45);
        int int48 = node46.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        boolean boolean51 = node50.isOnlyModifiesThisCall();
        boolean boolean52 = node50.isEmpty();
        boolean boolean53 = node50.isReturn();
        boolean boolean54 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        node56.setSourceEncodedPosition(4095);
        boolean boolean59 = node56.isNot();
        boolean boolean60 = node56.isBreak();
        boolean boolean61 = node56.isIn();
        com.google.javascript.rhino.Node node62 = node50.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.Node node63 = node46.useSourceInfoFrom(node56);
        boolean boolean64 = node63.isNull();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = null;
        node63.setJSDocInfo(jSDocInfo65);
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenAfter(node22, node63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4095 + "'", int11 == 4095);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING \n" + "'", str19, "STRING \n");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        java.lang.String str5 = node1.getSourceFileName();
        node1.setType((int) ' ');
        node1.setSourceFileForTesting("TYPEOF 0\n    STRING \n");
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got TYPEOF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        int int30 = node29.getCharno();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(39, "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n", 36, 0);
        boolean boolean36 = node35.isTry();
        node35.setType(409700);
        boolean boolean39 = node29.isEquivalentToTyped(node35);
        int int40 = node35.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4095 + "'", int30 == 4095);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node8.getLastChild();
        boolean boolean29 = node8.isInstanceOf();
        boolean boolean30 = node8.isBlock();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        node8.addChildToBack(node32);
        com.google.javascript.rhino.Node node35 = node8.cloneTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        boolean boolean78 = node4.isDec();
        boolean boolean79 = node4.isFunction();
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        node4.setJSType(jSType80);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node2.new FileLevelJsDocBuilder();
        boolean boolean22 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, (int) ' ', 53);
        boolean boolean26 = node2.isQuotedString();
        boolean boolean27 = node2.isBreak();
        boolean boolean28 = node2.isReturn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isDec();
        int int17 = node8.getType();
        boolean boolean18 = node8.isInc();
        java.lang.String str19 = node8.getString();
        boolean boolean20 = node8.isBreak();
        int int21 = node8.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isDefaultCase();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable67 = node23.siblings();
        node23.addSuppression("STRING \n    STRING \n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeIterable67);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 32, 40);
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        boolean boolean76 = node74.isEmpty();
        boolean boolean77 = node74.isReturn();
        boolean boolean78 = node74.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node74.siblings();
        com.google.javascript.rhino.Node node80 = node72.copyInformationFrom(node74);
        com.google.javascript.rhino.Node node82 = node74.getAncestor(49);
        boolean boolean83 = node74.isOr();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node1.setJSType(jSType75);
        com.google.javascript.rhino.Node node77 = node1.getParent();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node78 = node77.cloneTree();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        int int73 = node56.getLength();
        // The following exception was thrown during execution in test generation
        try {
            node56.setDouble((double) 36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) -1);
        boolean boolean2 = node1.isArrayLit();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        com.google.javascript.rhino.Node node66 = node64.removeFirstChild();
        node66.setLineno(38);
        boolean boolean69 = node66.isSetterDef();
        boolean boolean70 = node66.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean10 = node9.isTypeOf();
        boolean boolean11 = node9.isInc();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        boolean boolean37 = node36.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        boolean boolean45 = node44.isOnlyModifiesThisCall();
        boolean boolean46 = node44.isEmpty();
        boolean boolean47 = node44.isReturn();
        boolean boolean48 = node44.isNE();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(4095, node36, node39, node44, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node52 = node15.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node52.isNull();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isReturn();
        boolean boolean59 = node55.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType60 = node55.getJSType();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        boolean boolean66 = node62.isBreak();
        boolean boolean67 = node62.isTypeOf();
        boolean boolean68 = node62.isInc();
        boolean boolean69 = node62.isWhile();
        node62.setSourceEncodedPosition((-1));
        boolean boolean72 = node55.hasChild(node62);
        com.google.javascript.rhino.Node node73 = node52.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = node12.srcrefTree(node52);
        boolean boolean75 = node12.isAdd();
        boolean boolean76 = node12.isDelProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        int int29 = node22.getType();
        int int30 = node22.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        java.util.Set<java.lang.String> strSet7 = node1.getDirectives();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node10 = node1.copyInformationFrom(node9);
        boolean boolean11 = node9.isTrue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isFromExterns();
        boolean boolean6 = node1.isAnd();
        node1.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        java.lang.String str33 = node29.toString(false, false, false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "STRING " + "'", str33, "STRING ");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        boolean boolean28 = node24.isBreak();
        boolean boolean29 = node24.isTypeOf();
        boolean boolean30 = node24.isInc();
        boolean boolean31 = node24.isWhile();
        node24.setSourceEncodedPosition((-1));
        com.google.javascript.rhino.Node node34 = node24.getNext();
        boolean boolean35 = node24.isCall();
        node21.addChildrenToFront(node24);
        node21.detachChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.hasMoreThanOneChild();
        boolean boolean13 = node10.isIf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isIf();
        boolean boolean9 = node1.isComma();
        com.google.javascript.rhino.Node node10 = node1.getLastSibling();
        boolean boolean11 = node10.isThis();
        java.lang.String str12 = node10.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0\n" + "'", str12, "STRING  0\n");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.children();
        com.google.javascript.rhino.Node node23 = node15.getAncestor((int) (byte) 0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        node16.setVarArgs(false);
        boolean boolean23 = node16.isFromExterns();
        boolean boolean24 = node16.isNull();
        boolean boolean25 = node16.isFalse();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        node27.setSourceEncodedPosition(4095);
        boolean boolean30 = node27.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node27.getStaticSourceFile();
        boolean boolean32 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node27.copyInformationFromForTree(node34);
        com.google.javascript.rhino.Node node40 = node34.removeFirstChild();
        com.google.javascript.rhino.Node node41 = node16.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node node42 = node14.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(45, node42);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        boolean boolean51 = node46.isAssignAdd();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        com.google.javascript.rhino.Node node58 = node46.copyInformationFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        boolean boolean61 = node60.isOnlyModifiesThisCall();
        boolean boolean62 = node60.isEmpty();
        boolean boolean63 = node60.isArrayLit();
        com.google.javascript.rhino.Node node64 = node46.useSourceInfoFrom(node60);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] { node46 };
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(32, nodeArray65);
        int int68 = node66.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        boolean boolean71 = node70.isOnlyModifiesThisCall();
        boolean boolean72 = node70.isEmpty();
        boolean boolean73 = node70.isReturn();
        boolean boolean74 = node70.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        boolean boolean79 = node76.isNot();
        boolean boolean80 = node76.isBreak();
        boolean boolean81 = node76.isIn();
        com.google.javascript.rhino.Node node82 = node70.useSourceInfoIfMissingFromForTree(node76);
        com.google.javascript.rhino.Node node83 = node66.useSourceInfoFrom(node76);
        boolean boolean84 = node83.isLabelName();
        boolean boolean85 = node83.isName();
        node42.addChildrenToFront(node83);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable87 = node42.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node42.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(nodeIterable87);
        org.junit.Assert.assertNull(jSDocInfo88);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isNumber();
        boolean boolean22 = node15.isTry();
        node15.setLength(29);
        int int25 = node15.getChildCount();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable26 = node15.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor27 = ancestorIterable26.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator28 = ancestorIterable26.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable26);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertNotNull(nodeSpliterator28);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        boolean boolean5 = node3.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        node1.setIsSyntheticBlock(true);
        node1.setSourceFileForTesting("STRING \n");
        boolean boolean24 = node1.isVarArgs();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        int int73 = node56.getLength();
        java.lang.String str74 = node56.toStringTree();
        node56.setLength(53);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "STRING \n    STRING \n" + "'", str74, "STRING \n    STRING \n");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.InputId inputId14 = null;
        node13.setInputId(inputId14);
        com.google.javascript.rhino.Node node16 = node13.removeFirstChild();
        node13.detachChildren();
        java.lang.String str18 = node13.getSourceFileName();
        boolean boolean19 = node13.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 32, 40);
        boolean boolean4 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setVarArgs(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        java.lang.String str5 = node1.toStringTree();
        boolean boolean6 = node1.isDelProp();
        node1.setLineno(32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 8.0\n" + "'", str5, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setThrows();
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        int int8 = node1.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        boolean boolean12 = node10.isEmpty();
        boolean boolean13 = node10.isReturn();
        boolean boolean14 = node10.isEmpty();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node35.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        boolean boolean39 = node38.isOnlyModifiesThisCall();
        boolean boolean40 = node38.isEmpty();
        boolean boolean41 = node38.isArrayLit();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isNE();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(4095, node35, node38, node43, (int) (byte) 10, 32);
        boolean boolean51 = node43.isCase();
        com.google.javascript.rhino.Node node52 = node10.srcref(node43);
        java.lang.String str53 = node1.checkTreeEquals(node52);
        boolean boolean54 = node1.isGetterDef();
        boolean boolean55 = node1.isVar();
        boolean boolean56 = node1.isFalse();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        boolean boolean6 = node1.isIf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        int int8 = node1.getChildCount();
        java.lang.String str9 = node1.getString();
        int int10 = node1.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isArrayLit();
        com.google.javascript.rhino.Node node23 = node5.useSourceInfoFrom(node19);
        boolean boolean24 = node5.isVarArgs();
        boolean boolean25 = node5.isLabel();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        com.google.javascript.rhino.Node node30 = node27.removeFirstChild();
        boolean boolean31 = node27.isIf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        com.google.javascript.rhino.Node node37 = node27.srcrefTree(node33);
        boolean boolean38 = node37.isFromExterns();
        node5.addChildrenToFront(node37);
        boolean boolean40 = node37.isComma();
        boolean boolean41 = node37.isEmpty();
        int int43 = node37.getIntProp((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(10, node2, node37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 37.0 100\n", 41, 41);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node28.isComma();
        int int37 = node28.getChildCount();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isDefaultCase();
        boolean boolean3 = node1.isDec();
        int int4 = node1.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        java.lang.String str5 = node1.toStringTree();
        boolean boolean6 = node1.isDelProp();
        boolean boolean7 = node1.isInc();
        boolean boolean8 = node1.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 8.0\n" + "'", str5, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.wasEmptyNode();
        boolean boolean7 = node3.isTypeOf();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = null;
        int int45 = node28.getIndexOfChild(node44);
        boolean boolean46 = node28.isNE();
        com.google.javascript.rhino.Node node47 = node3.srcrefTree(node28);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        node1.setSourceFileForTesting("STRING ");
        boolean boolean17 = node1.isAssign();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 49, 39, (int) '#');
        com.google.javascript.rhino.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean27 = node26.isObjectLit();
        boolean boolean28 = node26.isFunction();
        boolean boolean29 = node26.wasEmptyNode();
        boolean boolean30 = node26.isTypeOf();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node22, node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isIn();
        boolean boolean15 = node1.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        node1.setVarArgs(true);
        boolean boolean8 = node1.isExprResult();
        boolean boolean9 = node1.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 [var_args_name: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        boolean boolean81 = node79.isEmpty();
        boolean boolean82 = node79.isArrayLit();
        boolean boolean83 = node79.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node84 = node71.srcref(node79);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node85 = node71.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        node8.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node20 = node8.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.siblings();
        node20.putIntProp(12, 43);
        node20.setSourceFileForTesting("Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeIterable21);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        int int25 = node22.getLength();
        node22.addSuppression("STRING ");
        boolean boolean28 = node22.isDec();
        node22.setType(41);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        java.lang.String str6 = node1.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor8 = ancestorIterable7.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator9 = ancestorIterable7.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor10 = ancestorIterable7.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor11 = ancestorIterable7.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator12 = ancestorIterable7.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING \n" + "'", str6, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertNotNull(nodeItor10);
        org.junit.Assert.assertNotNull(nodeItor11);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        java.lang.String str5 = node1.getSourceFileName();
        node1.setType((int) ' ');
        node1.setSourceFileForTesting("TYPEOF 0\n    STRING \n");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        node11.setVarArgs(false);
        boolean boolean18 = node11.isFromExterns();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet22);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        boolean boolean48 = node36.isCall();
        com.google.javascript.rhino.Node node49 = node36.cloneTree();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100, node52, 54, 35);
        java.lang.String str59 = node55.toString(false, false, true);
        com.google.javascript.rhino.Node node60 = node49.useSourceInfoIfMissingFromForTree(node55);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR" + "'", str59, "OR");
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable2 = node1.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(ancestorIterable2);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node22.isRegExp();
        com.google.javascript.rhino.Node node41 = node22.getLastSibling();
        boolean boolean42 = node22.isSwitch();
        boolean boolean43 = node22.isCatch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 44, (int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node7.isDebugger();
        boolean boolean12 = node7.isName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node7.getAncestors();
        com.google.javascript.rhino.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            node7.addChildrenToBack(node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ancestorIterable13);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isNumber();
        boolean boolean22 = node15.isTry();
        com.google.javascript.rhino.Node node23 = node15.cloneTree();
        com.google.javascript.rhino.Node node24 = node15.cloneNode();
        java.lang.Appendable appendable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            node15.appendStringTree(appendable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = null;
        node8.setJSDocInfo(jSDocInfo14);
        boolean boolean16 = node8.isWhile();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        boolean boolean24 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node19.copyInformationFromForTree(node26);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isArrayLit();
        com.google.javascript.rhino.Node node37 = node19.useSourceInfoFrom(node33);
        boolean boolean38 = node37.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isReturn();
        boolean boolean49 = node45.isNE();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(4095, node37, node40, node45, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node37.getIndexOfChild(node53);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node58 = node37.clonePropsFrom(node56);
        node56.setQuotedString();
        java.lang.String[] strArray62 = new java.lang.String[] { "STRING ", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet63);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet63);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node23.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        java.lang.String str61 = node39.checkTreeEquals(node42);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isReturn();
        boolean boolean67 = node63.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node63.siblings();
        com.google.javascript.rhino.Node node69 = node39.clonePropsFrom(node63);
        node63.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node72 = node63.getParent();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n" + "'", str61, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        node37.setLength(409700);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean10 = node9.isTypeOf();
        boolean boolean11 = node9.isInc();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        boolean boolean37 = node36.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        boolean boolean45 = node44.isOnlyModifiesThisCall();
        boolean boolean46 = node44.isEmpty();
        boolean boolean47 = node44.isReturn();
        boolean boolean48 = node44.isNE();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(4095, node36, node39, node44, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node52 = node15.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node52.isNull();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isReturn();
        boolean boolean59 = node55.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType60 = node55.getJSType();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        boolean boolean66 = node62.isBreak();
        boolean boolean67 = node62.isTypeOf();
        boolean boolean68 = node62.isInc();
        boolean boolean69 = node62.isWhile();
        node62.setSourceEncodedPosition((-1));
        boolean boolean72 = node55.hasChild(node62);
        com.google.javascript.rhino.Node node73 = node52.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = node12.srcrefTree(node52);
        boolean boolean75 = node74.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        node1.setSourceEncodedPositionForTree(51);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node8.getLastChild();
        boolean boolean29 = node8.isInstanceOf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        boolean boolean36 = node31.isAssignAdd();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node38.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node31.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isArrayLit();
        com.google.javascript.rhino.Node node49 = node31.useSourceInfoFrom(node45);
        boolean boolean50 = node31.isVarArgs();
        int int51 = node31.getType();
        node8.addChildToBack(node31);
        java.lang.Class<?> wildcardClass53 = node8.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 40 + "'", int51 == 40);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isName();
        boolean boolean42 = node39.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        boolean boolean78 = node4.isDec();
        int int79 = node4.getType();
        boolean boolean80 = node4.isVoid();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 29 + "'", int79 == 29);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        com.google.javascript.rhino.jstype.JSType jSType76 = node4.getJSType();
        boolean boolean77 = node4.isFalse();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 4, 32);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isTypeOf();
        int int12 = node6.getCharno();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        boolean boolean15 = node14.isOnlyModifiesThisCall();
        int int16 = node14.getSourceOffset();
        boolean boolean17 = node14.isExprResult();
        com.google.javascript.rhino.Node node18 = node6.srcref(node14);
        boolean boolean19 = node18.isNE();
        java.lang.String str20 = node18.toStringTree();
        com.google.javascript.rhino.Node node21 = node4.srcref(node18);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(40, node4, 30, 0);
        java.lang.Appendable appendable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.appendStringTree(appendable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4095 + "'", int12 == 4095);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING \n" + "'", str20, "STRING \n");
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        com.google.javascript.rhino.Node node66 = node64.removeFirstChild();
        node66.setCharno((int) (byte) -1);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node66.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(nodeIterable69);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 37.0 100\n");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable2 = node1.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeIterable2);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20);
        int int25 = node20.getLineno();
        node16.addChildToFront(node20);
        boolean boolean27 = node20.hasSideEffects();
        boolean boolean28 = node20.hasChildren();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node31.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        boolean boolean39 = node36.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(0, node36);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        boolean boolean46 = node43.hasSideEffects();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("");
        node52.removeProp(23);
        node48.addChildToFront(node52);
        com.google.javascript.rhino.head.Node node56 = node48.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment57 = node48.getJsDocNode();
        node43.addChildToBack(node48);
        boolean boolean59 = node48.hasConsistentReturnUsage();
        node36.putProp((int) (short) 1, (java.lang.Object) node48);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) '#', node31, node48);
        node20.addChildrenToBack(node61);
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        boolean boolean66 = node64.hasConsistentReturnUsage();
        boolean boolean67 = node64.hasSideEffects();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str70 = node69.toString();
        boolean boolean71 = node69.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newString("");
        node73.removeProp(23);
        node69.addChildToFront(node73);
        com.google.javascript.rhino.head.Node node77 = node69.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment78 = node69.getJsDocNode();
        node64.addChildToBack(node69);
        java.lang.String str80 = node64.toString();
        com.google.javascript.rhino.head.Node node82 = node64.setType(25);
        int int85 = node64.getIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node87 = node64.setType(10);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(41, node61, node64, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = node89.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(comment57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(comment78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "40" + "'", str80, "40");
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        int int5 = node1.getIntProp((int) (byte) 0, 16);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            node1.labelId(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        int int26 = node19.getType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = null;
        java.lang.String str28 = node19.toStringTree(scriptNode27);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        boolean boolean35 = node32.hasSideEffects();
        node30.addChildrenToFront(node32);
        boolean boolean37 = node32.hasSideEffects();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor38 = node32.iterator();
        node19.addChildrenToBack(node32);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator40 = node32.new NodeIterator();
        boolean boolean41 = nodeIterator40.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator40.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 40 + "'", int26 == 40);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeItor38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, node15, (int) (short) 10);
        com.google.javascript.rhino.head.Node node20 = node19.getLastChild();
        com.google.javascript.rhino.head.Node node21 = node19.getNext();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString("");
        node27.removeProp(23);
        node23.addChildToFront(node27);
        com.google.javascript.rhino.head.Node node31 = node23.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node21.removeChild(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1" + "'", str16, "-1");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "40" + "'", str24, "40");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("hi!");
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = node1.spliterator();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        node5.removeProp(4);
        com.google.javascript.rhino.head.Node node20 = node5.setType(23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = null;
        java.lang.String str22 = node20.toStringTree(scriptNode21);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator23 = node20.spliterator();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean37 = node36.hasChildren();
        node27.addChildrenToFront(node36);
        int int39 = node36.getLineno();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("");
        node45.removeProp(23);
        node41.addChildToFront(node45);
        com.google.javascript.rhino.head.Node node49 = node41.getFirstChild();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, node36, node41, 9);
        boolean boolean52 = node36.hasSideEffects();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        boolean boolean59 = node56.hasSideEffects();
        node54.addChildrenToFront(node56);
        node56.removeChildren();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("hi!");
        node56.addChildrenToBack(node63);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newString("");
        node70.removeProp(23);
        node66.addChildToFront(node70);
        com.google.javascript.rhino.head.Node node74 = node66.getFirstChild();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node74.addChildrenToBack(node76);
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node36, node56, node76);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator79 = node78.new NodeIterator();
        com.google.javascript.rhino.head.Node node80 = nodeIterator79.next();
        node1.addChildAfter(node20, node80);
        com.google.javascript.rhino.head.Node node82 = node80.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "40" + "'", str42, "40");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node82);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str5 = node4.toString();
        com.google.javascript.rhino.head.Node node6 = node4.getLastChild();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = node10.new NodeIterator();
        node10.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator14 = node10.spliterator();
        java.lang.String str15 = node10.toString();
        node4.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(13, node4);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(6, node4);
        // The following exception was thrown during execution in test generation
        try {
            node4.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeSpliterator14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "23" + "'", str15, "23");
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(0);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(12);
        node19.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(6, node19);
        com.google.javascript.rhino.head.Node node24 = node23.getLastChild();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasChildren();
        node28.addChildrenToFront(node37);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasChildren();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) -1, node37, node41, (int) (short) 10);
        com.google.javascript.rhino.head.Node node46 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) 'a', node51);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) -1, node51, node61, node63, (int) (short) -1);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (short) 1, node63, 12);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(23);
        node71.removeProp(25);
        boolean boolean74 = node71.hasChildren();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-1), node46, node63, node71);
        node24.addChildToBack(node46);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (short) -1, node2, node16, node46);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("-1");
        node79.removeProp(25);
        node2.addChildToBack(node79);
        java.lang.String str83 = node79.toString();
        java.lang.Object obj85 = node79.getProp(4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "40" + "'", str64, "40");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "41" + "'", str83, "41");
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(8, 18);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        node1.removeProp(23);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(0, node6);
        node1.addChildrenToBack(node10);
        int int12 = node1.getLineno();
        node1.putIntProp(15, 0);
        node1.removeProp(17);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("23");
        java.lang.Object obj4 = node2.getProp(17);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(3, node2);
        com.google.javascript.rhino.head.ast.Comment comment6 = null;
        node2.setJsDocNode(comment6);
        com.google.javascript.rhino.head.Node node8 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildToBack(node8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.Node node85 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str86 = node85.toString();
        boolean boolean87 = node85.hasConsistentReturnUsage();
        boolean boolean88 = node85.hasSideEffects();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node85);
        com.google.javascript.rhino.head.ast.Comment comment90 = node85.getJsDocNode();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(18, node17, node85);
        double double92 = node85.getDouble();
        node85.setLineno((int) (short) 1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "40" + "'", str86, "40");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(comment90);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 32.0d + "'", double92 == 32.0d);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        int int7 = node2.getLineno();
        node2.removeProp(0);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node21 = node13.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment22 = node13.getJsDocNode();
        int int23 = node13.getType();
        node13.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        java.lang.String str35 = node31.getString();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(10, node13, node31, node38, 14);
        java.lang.String str41 = node40.getJsDoc();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node(17, node40, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node44 = node40.getLastChild();
        node2.addChildrenToBack(node40);
        com.google.javascript.rhino.head.Node node46 = node40.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = null;
        java.lang.String str48 = node40.toStringTree(scriptNode47);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(comment22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 40 + "'", int23 == 40);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        boolean boolean19 = node16.hasSideEffects();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment30 = node21.getJsDocNode();
        node16.addChildToBack(node21);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(15, node3, node16);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str36 = node35.toString();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node(0, node39, node42);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(24, node3, node35, node43);
        com.google.javascript.rhino.head.ast.Scope scope45 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.setScope(scope45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(comment30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "23" + "'", str36, "23");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(3, 3);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(9, node2);
        int int16 = node2.getIntProp((int) (short) -1, 14);
        com.google.javascript.rhino.head.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.removeChild(node17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(1, 26);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope3 = node2.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        com.google.javascript.rhino.head.Node node1 = null;
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setLineno(18);
        boolean boolean14 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = node11.getLastChild();
        com.google.javascript.rhino.head.ast.Scope scope16 = null;
        node11.setScope(scope16);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        int int22 = node19.getIntProp(17, (int) (byte) -1);
        java.lang.String str23 = node19.getJsDoc();
        com.google.javascript.rhino.head.Node node24 = node19.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(9, node1, node11, node24, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 22);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        boolean boolean12 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = node3.getFirstChild();
        boolean boolean14 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = node3.new NodeIterator();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("12");
        node3.addChildToBack(node17);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        int int19 = node16.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 10, node11, node16);
        com.google.javascript.rhino.head.Node node22 = node11.setType(18);
        com.google.javascript.rhino.head.Node node23 = node11.getNext();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor24 = node11.iterator();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(17, node11, node30, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = node11.getExistingIntProp(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeItor24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (short) 100, 25);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean16 = node15.hasChildren();
        node6.addChildrenToFront(node15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = null;
        java.lang.String str19 = node6.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasConsistentReturnUsage();
        boolean boolean26 = node23.hasSideEffects();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(0, node23);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        boolean boolean33 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment44 = node35.getJsDocNode();
        node30.addChildToBack(node35);
        boolean boolean46 = node35.hasConsistentReturnUsage();
        node23.putProp((int) (short) 1, (java.lang.Object) node35);
        com.google.javascript.rhino.head.ast.Comment comment48 = null;
        node35.setJsDocNode(comment48);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((-1.0d));
        node51.putIntProp((int) (byte) -1, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(17, node35, node51, 41);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(12, node3, (com.google.javascript.rhino.head.Node) scriptNode18, node35, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "40" + "'", str24, "40");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(comment44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(26, node3, node6, 20);
        int int15 = node14.getType();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean18 = node17.hasChildren();
        node14.addChildrenToBack(node17);
        // The following exception was thrown during execution in test generation
        try {
            node17.setString("2");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26 + "'", int15 == 26);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str5 = node4.toString();
        com.google.javascript.rhino.head.Node node6 = node4.getLastChild();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = node10.new NodeIterator();
        node10.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator14 = node10.spliterator();
        java.lang.String str15 = node10.toString();
        node4.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(13, node4);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(6, node4);
        node18.removeChildren();
        node18.removeProp(100);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeSpliterator14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "23" + "'", str15, "23");
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        java.lang.String str24 = node18.getString();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean36 = node35.hasChildren();
        node26.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator38 = node35.new NodeIterator();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        com.google.javascript.rhino.head.Node node42 = node40.getLastSibling();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        node53.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope56 = node53.getScope();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) ' ', node53, 2);
        com.google.javascript.rhino.head.Node node59 = node53.getLastSibling();
        node42.addChildToFront(node59);
        node35.addChildrenToFront(node42);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node35, node63, 24);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = node18.getExistingIntProp((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(scope56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "100" + "'", str64, "100");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 41);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(12);
        node4.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        node4.addChildToBack(node27);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean43 = node42.hasChildren();
        node33.addChildrenToFront(node42);
        int int45 = node42.getLineno();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 0, node42, node47, 9);
        boolean boolean58 = node42.hasSideEffects();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str63 = node62.toString();
        boolean boolean64 = node62.hasConsistentReturnUsage();
        boolean boolean65 = node62.hasSideEffects();
        node60.addChildrenToFront(node62);
        node62.removeChildren();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newString("hi!");
        node62.addChildrenToBack(node69);
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str73 = node72.toString();
        boolean boolean74 = node72.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newString("");
        node76.removeProp(23);
        node72.addChildToFront(node76);
        com.google.javascript.rhino.head.Node node80 = node72.getFirstChild();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node80.addChildrenToBack(node82);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node42, node62, node82);
        com.google.javascript.rhino.head.Node node87 = com.google.javascript.rhino.head.Node.newString(19, "");
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node(0, node42, node87);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node2, node27, node88);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = node89.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "40" + "'", str63, "40");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "40" + "'", str73, "40");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node5.getLastChild();
        node5.setString("");
        com.google.javascript.rhino.head.Node node13 = node5.setType(25);
        com.google.javascript.rhino.head.Node node14 = node13.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment12 = node3.getJsDocNode();
        int int13 = node3.getType();
        node3.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        java.lang.String str25 = node21.getString();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(10, node3, node21, node28, 14);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int34 = node33.getType();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        boolean boolean41 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(0, node38);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean55 = node54.hasChildren();
        node45.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasChildren();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) -1, node54, node58, (int) (short) 10);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node38, node58, node65, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment68 = null;
        node58.setJsDocNode(comment68);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str73 = node72.toString();
        int int74 = node72.getLineno();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment77 = node76.getJsDocNode();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str82 = node81.toString();
        boolean boolean83 = node81.hasConsistentReturnUsage();
        boolean boolean84 = node81.hasSideEffects();
        node79.addChildrenToFront(node81);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(8, node72, node76, node79);
        node58.addChildrenToFront(node76);
        node76.putIntProp((int) (short) 0, (int) (short) 10);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(25, node3, node33, node76);
        int int92 = node33.getLineno();
        com.google.javascript.rhino.head.Node node95 = com.google.javascript.rhino.head.Node.newString(26, "32");
        node33.addChildrenToBack(node95);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(comment12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 24 + "'", int34 == 24);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1" + "'", str59, "-1");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "100" + "'", str73, "100");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(comment77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "40" + "'", str82, "40");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(13, "");
        node2.setString("hi!");
        com.google.javascript.rhino.head.ast.Comment comment5 = node2.getJsDocNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(comment5);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.ast.Comment comment3 = node1.getJsDocNode();
        com.google.javascript.rhino.head.Node node4 = node1.getNext();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node1.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
        org.junit.Assert.assertNull(comment3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node2.setJsDocNode(comment4);
        java.lang.String str6 = node2.toString();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(6, node2);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = node7.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.head.Node node12 = node7.getLastSibling();
        int int13 = node7.getLineno();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean25 = node24.hasChildren();
        node15.addChildrenToFront(node24);
        int int27 = node24.getLineno();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node29.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 10, node7, node24, node29, 0);
        com.google.javascript.rhino.head.ast.Comment comment34 = null;
        node24.setJsDocNode(comment34);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) -1, 12);
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildBefore(node24, node38);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: newChild had siblings in addChildBefore");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        boolean boolean46 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = node50.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment67 = node58.getJsDocNode();
        node53.addChildToBack(node58);
        java.lang.String str69 = node53.toString();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, node30, node50, node53, 1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        boolean boolean78 = node75.hasSideEffects();
        node73.addChildrenToFront(node75);
        node75.removeChildren();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node50, node75);
        node75.setDouble((double) 11);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = node75.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(comment67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) 'a', node5);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        com.google.javascript.rhino.head.Node node19 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node5, node15, node17, (int) (short) -1);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(26, node21, node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(13, node28);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(7, node28);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node24, node28);
        int int32 = node24.getLineno();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator14 = node11.new NodeIterator();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        node29.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope32 = node29.getScope();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) ' ', node29, 2);
        com.google.javascript.rhino.head.Node node35 = node29.getLastSibling();
        node18.addChildToFront(node35);
        node11.addChildrenToFront(node18);
        int int40 = node18.getIntProp(0, (int) ' ');
        int int43 = node18.getIntProp(14, 6);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(18, node18, (int) (short) 10);
        node45.removeProp(23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = null;
        java.lang.String str49 = node45.toStringTree(scriptNode48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = node45.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(scope32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(13, node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(12);
        node17.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(6, node17);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node13, node21, 0);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node27.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(20, node9, node13, node27);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) 'a', node34);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = node46.getFirstChild();
        node54.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope57 = node54.getScope();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) ' ', node54, 2);
        com.google.javascript.rhino.head.Node node60 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node64 = node63.getLastSibling();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) ' ', node60, node63);
        node34.addChildrenToFront(node65);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(24, node4, node31, node65, (int) (short) -1);
        node31.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            double double70 = node31.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(scope57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        node10.putIntProp(16, 21);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(5, node10, 8);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor19 = node10.iterator();
        java.lang.Object obj21 = node10.getProp(12);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(nodeItor19);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node5.getLastChild();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("1");
        node5.addChildrenToBack(node11);
        int int13 = node11.getLineno();
        node11.removeProp(16);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment20 = null;
        node17.setJsDocNode(comment20);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        boolean boolean32 = node29.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(0, node29);
        node24.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(9, node24);
        node17.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node38 = node17.setType(18);
        node17.removeChildren();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(13, node43);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(7, node43);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node45.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node49 = node45.getLastSibling();
        node11.addChildAfter(node17, node45);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope51 = node45.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) 'a', node2);
        boolean boolean11 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean25 = node24.hasChildren();
        node15.addChildrenToFront(node24);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        boolean boolean31 = node28.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node41 = node33.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment42 = node33.getJsDocNode();
        node28.addChildToBack(node33);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(15, node15, node28);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str48 = node47.toString();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(0, node51, node54);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(24, node15, node47, node55);
        com.google.javascript.rhino.head.Node node57 = node56.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node10.removeChild(node56);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(comment42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "23" + "'", str48, "23");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node3.setJsDocNode(comment4);
        node3.putIntProp(5, (int) (short) 10);
        com.google.javascript.rhino.head.Node node10 = node3.setType(0);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node20 = node12.getFirstChild();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node20.addChildrenToBack(node22);
        com.google.javascript.rhino.head.Node node24 = node22.getLastChild();
        java.lang.String str25 = node22.getJsDoc();
        java.lang.Object obj27 = node22.getProp(0);
        node10.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = node31.getFirstChild();
        node39.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope42 = node39.getScope();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) ' ', node39, 2);
        boolean boolean45 = node44.hasChildren();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        boolean boolean51 = node48.hasSideEffects();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(0, node48);
        int int53 = node48.getLineno();
        node44.addChildToFront(node48);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor55 = node48.iterator();
        boolean boolean56 = node48.hasChildren();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(7, node10, node48);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(scope42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(nodeItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        int int9 = node6.getIntProp(18, 26);
        node6.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope11 = node6.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        boolean boolean8 = node3.hasSideEffects();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = node3.iterator();
        node3.putIntProp(17, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int13 = node3.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeItor9);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node2.setJsDocNode(comment4);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) 'a', node10);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        com.google.javascript.rhino.head.Node node24 = node22.getLastChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) -1, node10, node20, node22, (int) (short) -1);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(26, node26, node28);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(19, node2, node29, 17);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor32 = node31.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeItor32);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node1.setJsDocNode(comment4);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        boolean boolean16 = node13.hasSideEffects();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(0, node13);
        node8.addChildrenToBack(node17);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(9, node8);
        node1.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node22 = node1.setType(18);
        boolean boolean23 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node33 = node29.getLastChild();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("1");
        node29.addChildrenToBack(node35);
        int int37 = node35.getLineno();
        node35.removeProp(16);
        node1.addChildrenToBack(node35);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        boolean boolean47 = node44.hasSideEffects();
        node42.addChildrenToFront(node44);
        node44.removeChildren();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("hi!");
        node44.addChildrenToBack(node51);
        com.google.javascript.rhino.head.Node node53 = node44.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node54 = node1.getChildBefore(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(13, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            node2.setString("100");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        node14.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope17 = node14.getScope();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) ' ', node14, 2);
        com.google.javascript.rhino.head.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node24 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) ' ', node20, node23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor26 = node23.iterator();
        node2.addChildrenToFront(node23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = null;
        java.lang.String str29 = node23.toStringTree(scriptNode28);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(3, 0);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean44 = node43.hasChildren();
        node34.addChildrenToFront(node43);
        boolean boolean46 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator47 = node43.new NodeIterator();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        node32.replaceChildAfter(node43, node49);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) 41);
        // The following exception was thrown during execution in test generation
        try {
            node23.replaceChild(node49, node52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(scope17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeItor26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        boolean boolean13 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = node4.getFirstChild();
        boolean boolean15 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = node4.new NodeIterator();
        com.google.javascript.rhino.head.Node node17 = nodeIterator16.next();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor22 = node19.iterator();
        java.lang.Object obj24 = node19.getProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator25 = node19.new NodeIterator();
        java.lang.String str26 = node19.getJsDoc();
        java.lang.String str27 = node19.getJsDoc();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(2, node17, node19, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean43 = node42.hasChildren();
        node33.addChildrenToFront(node42);
        int int45 = node42.getLineno();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 0, node42, node47, 9);
        boolean boolean58 = node42.hasSideEffects();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str63 = node62.toString();
        boolean boolean64 = node62.hasConsistentReturnUsage();
        boolean boolean65 = node62.hasSideEffects();
        node60.addChildrenToFront(node62);
        node62.removeChildren();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newString("hi!");
        node62.addChildrenToBack(node69);
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str73 = node72.toString();
        boolean boolean74 = node72.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newString("");
        node76.removeProp(23);
        node72.addChildToFront(node76);
        com.google.javascript.rhino.head.Node node80 = node72.getFirstChild();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node80.addChildrenToBack(node82);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node42, node62, node82);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator85 = node84.new NodeIterator();
        int int86 = node84.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node87 = node29.getChildBefore(node84);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "40" + "'", str63, "40");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "40" + "'", str73, "40");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) ' ', node4, node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(12);
        node19.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(6, node19);
        com.google.javascript.rhino.head.Node node24 = node23.getLastChild();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasChildren();
        node28.addChildrenToFront(node37);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasChildren();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) -1, node37, node41, (int) (short) 10);
        com.google.javascript.rhino.head.Node node46 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) 'a', node51);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) -1, node51, node61, node63, (int) (short) -1);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (short) 1, node63, 12);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(23);
        node71.removeProp(25);
        boolean boolean74 = node71.hasChildren();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-1), node46, node63, node71);
        node24.addChildToBack(node46);
        node10.addChildToBack(node24);
        int int78 = node24.getType();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator79 = node24.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "40" + "'", str64, "40");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 12 + "'", int78 == 12);
        org.junit.Assert.assertNotNull(nodeSpliterator79);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = node32.new NodeIterator();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment49 = node40.getJsDocNode();
        node35.addChildToBack(node40);
        java.lang.String str51 = node35.toString();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, node12, node32, node35, 1);
        boolean boolean54 = node53.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(comment49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(13, node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(12);
        node13.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(6, node13);
        com.google.javascript.rhino.head.Node node18 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node9, node17, 0);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node23.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(20, node5, node9, node23);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 0, node23);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = node23.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node30 = nodeIterator29.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(25, "11");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(13, node4);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(7, node4);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node6.addChildToFront(node8);
        node6.putIntProp((int) (byte) 10, (int) '4');
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        node23.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope26 = node23.getScope();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) ' ', node23, 2);
        boolean boolean29 = node28.hasChildren();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        boolean boolean35 = node32.hasSideEffects();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(0, node32);
        int int37 = node32.getLineno();
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node39 = node32.getLastSibling();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString(5, "");
        int int43 = node42.getType();
        node42.setString("12");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = null;
        java.lang.String str47 = node42.toStringTree(scriptNode46);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node6, node32, (com.google.javascript.rhino.head.Node) scriptNode46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        int int7 = node2.getLineno();
        node2.removeProp(0);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = node2.spliterator();
        java.lang.Class<?> wildcardClass11 = node2.getClass();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        node1.removeProp(23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        java.lang.Object obj6 = node1.getProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = node1.new NodeIterator();
        boolean boolean8 = nodeIterator7.hasNext();
        boolean boolean9 = nodeIterator7.hasNext();
        boolean boolean10 = nodeIterator7.hasNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        int int5 = node2.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = node2.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) 'a', node31);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        com.google.javascript.rhino.head.Node node45 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node31, node41, node43, (int) (short) -1);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node57.addChildrenToBack(node59);
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        java.lang.String str62 = node59.getJsDoc();
        java.lang.Object obj64 = node59.getProp(0);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(3, node12, node31, node59);
        com.google.javascript.rhino.head.Node node66 = node59.getLastSibling();
        java.lang.String str67 = node59.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "100" + "'", str67, "100");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node9.getFirstChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node17.addChildrenToBack(node19);
        node3.addChildrenToBack(node19);
        com.google.javascript.rhino.head.Node node23 = node3.setType(23);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        java.lang.String str34 = node30.getString();
        com.google.javascript.rhino.head.ast.Scope scope35 = node30.getScope();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("");
        node42.removeProp(23);
        node38.addChildToFront(node42);
        com.google.javascript.rhino.head.Node node46 = node38.getFirstChild();
        node46.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope49 = node46.getScope();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) ' ', node46, 2);
        boolean boolean52 = node51.hasChildren();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str56 = node55.toString();
        boolean boolean57 = node55.hasConsistentReturnUsage();
        boolean boolean58 = node55.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(0, node55);
        int int60 = node55.getLineno();
        node51.addChildToFront(node55);
        int int62 = node55.getType();
        boolean boolean63 = node55.hasChildren();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str66 = node65.toString();
        boolean boolean67 = node65.hasChildren();
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str72 = node71.toString();
        boolean boolean73 = node71.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newString("");
        node75.removeProp(23);
        node71.addChildToFront(node75);
        com.google.javascript.rhino.head.Node node79 = node71.getFirstChild();
        node79.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope82 = node79.getScope();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) ' ', node79, 2);
        com.google.javascript.rhino.head.Node node85 = node79.getLastSibling();
        com.google.javascript.rhino.head.Node node88 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node89 = node88.getLastSibling();
        com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node((int) ' ', node85, node88);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor91 = node88.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator92 = node88.new NodeIterator();
        node65.addChildrenToBack(node88);
        com.google.javascript.rhino.head.Node node94 = new com.google.javascript.rhino.head.Node(0, node30, node55, node88);
        node3.addChildrenToFront(node88);
        java.lang.Class<?> wildcardClass96 = node3.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(scope35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "40" + "'", str56, "40");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 40 + "'", int62 == 40);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1" + "'", str66, "-1");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "40" + "'", str72, "40");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(scope82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(nodeItor91);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12);
        node12.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(6, node12);
        com.google.javascript.rhino.head.Node node17 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node8, node16, 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node22.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(20, node4, node8, node22);
        com.google.javascript.rhino.head.Node node27 = node4.getLastChild();
        node4.setLineno(16);
        com.google.javascript.rhino.head.ast.Scope scope30 = null;
        node4.setScope(scope30);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = null;
        java.lang.String str5 = node3.toStringTree(scriptNode4);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        node8.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean18 = node17.hasChildren();
        node8.addChildrenToFront(node17);
        int int20 = node17.getLineno();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node22, 9);
        boolean boolean33 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        boolean boolean41 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(0, node38);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean55 = node54.hasChildren();
        node45.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasChildren();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) -1, node54, node58, (int) (short) 10);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node38, node58, node65, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment68 = null;
        node67.setJsDocNode(comment68);
        com.google.javascript.rhino.head.Node node70 = node67.getLastChild();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(4);
        com.google.javascript.rhino.head.Node node77 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node78 = node77.getLastSibling();
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node82 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str83 = node82.toString();
        boolean boolean84 = node82.hasConsistentReturnUsage();
        boolean boolean85 = node82.hasSideEffects();
        node80.addChildrenToFront(node82);
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node(26, node77, node80, 20);
        boolean boolean89 = node88.hasSideEffects();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(97);
        int int92 = node91.getType();
        com.google.javascript.rhino.head.Node node94 = node91.setType(97);
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node(22, node88, node94, 25);
        com.google.javascript.rhino.head.Node node97 = new com.google.javascript.rhino.head.Node((int) (short) 1, node67, node72, node96);
        com.google.javascript.rhino.head.Node node99 = new com.google.javascript.rhino.head.Node(13, node3, node17, node96, (int) (byte) 100);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1" + "'", str59, "-1");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "40" + "'", str83, "40");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment23 = node14.getJsDocNode();
        node9.addChildToBack(node14);
        boolean boolean25 = node14.hasConsistentReturnUsage();
        node2.putProp((int) (short) 1, (java.lang.Object) node14);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator27 = node2.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = node2.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(comment23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator27);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(9, node2);
        node2.removeProp(4);
        com.google.javascript.rhino.head.Node node17 = node2.setType(23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = null;
        java.lang.String str19 = node17.toStringTree(scriptNode18);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor20 = node17.iterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor21 = node17.iterator();
        int int24 = node17.getIntProp((int) '#', (int) '4');
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(nodeItor21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20);
        int int25 = node20.getLineno();
        node16.addChildToFront(node20);
        boolean boolean27 = node20.hasSideEffects();
        boolean boolean28 = node20.hasChildren();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node31.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        boolean boolean39 = node36.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(0, node36);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        boolean boolean46 = node43.hasSideEffects();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("");
        node52.removeProp(23);
        node48.addChildToFront(node52);
        com.google.javascript.rhino.head.Node node56 = node48.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment57 = node48.getJsDocNode();
        node43.addChildToBack(node48);
        boolean boolean59 = node48.hasConsistentReturnUsage();
        node36.putProp((int) (short) 1, (java.lang.Object) node48);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) '#', node31, node48);
        node20.addChildrenToBack(node61);
        node61.removeChildren();
        com.google.javascript.rhino.head.ast.Comment comment64 = node61.getJsDocNode();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        boolean boolean69 = node66.hasSideEffects();
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str72 = node71.toString();
        boolean boolean73 = node71.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newString("");
        node75.removeProp(23);
        node71.addChildToFront(node75);
        com.google.javascript.rhino.head.Node node79 = node71.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment80 = node71.getJsDocNode();
        node66.addChildToBack(node71);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor82 = node66.iterator();
        com.google.javascript.rhino.head.ast.Comment comment83 = node66.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator84 = node66.new NodeIterator();
        com.google.javascript.rhino.head.Node node87 = com.google.javascript.rhino.head.Node.newString(5, "");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(9, (com.google.javascript.rhino.head.Node) comment64, node66, node87, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(comment57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(comment64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "40" + "'", str72, "40");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(comment80);
        org.junit.Assert.assertNotNull(nodeItor82);
        org.junit.Assert.assertNull(comment83);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) -1, 5);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(23);
        // The following exception was thrown during execution in test generation
        try {
            double double2 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        int int14 = node11.getLineno();
        int int15 = node11.getType();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node11);
        node16.putIntProp(25, (int) (byte) 10);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        node30.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope33 = node30.getScope();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) ' ', node30, 2);
        boolean boolean36 = node35.hasChildren();
        node35.setLineno(21);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node41 = node40.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment42 = null;
        node41.setJsDocNode(comment42);
        node41.putIntProp(5, (int) (short) 10);
        com.google.javascript.rhino.head.ast.Comment comment47 = node41.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            node16.replaceChildAfter(node35, (com.google.javascript.rhino.head.Node) comment47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(comment47);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(24, node2, (int) (short) 10);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node26 = node18.getFirstChild();
        node26.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope29 = node26.getScope();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) ' ', node26, 2);
        com.google.javascript.rhino.head.Node node32 = node26.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment33 = node26.getJsDocNode();
        node26.putIntProp(4, 2);
        int int37 = node26.getType();
        node2.putProp((int) '#', (java.lang.Object) int37);
        int int39 = node2.getType();
        java.lang.String str40 = node2.getString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(scope29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(comment33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 41 + "'", int37 == 41);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 41 + "'", int39 == 41);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        node1.removeProp(23);
        node1.setLineno((int) '4');
        com.google.javascript.rhino.head.ast.Comment comment6 = node1.getJsDocNode();
        com.google.javascript.rhino.head.Node node7 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildToBack(node7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(comment6);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment24 = node15.getJsDocNode();
        node10.addChildToBack(node15);
        boolean boolean26 = node15.hasConsistentReturnUsage();
        node3.putProp((int) (short) 1, (java.lang.Object) node15);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) '#');
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 100, node3, node29, 17);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node(12);
        node34.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(6, node34);
        int int41 = node38.getIntProp(18, 26);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean56 = node55.hasChildren();
        node46.addChildrenToFront(node55);
        int int58 = node55.getLineno();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str61 = node60.toString();
        boolean boolean62 = node60.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newString("");
        node64.removeProp(23);
        node60.addChildToFront(node64);
        com.google.javascript.rhino.head.Node node68 = node60.getFirstChild();
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) (short) 0, node55, node60, 9);
        boolean boolean71 = node55.hasSideEffects();
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node75 = node74.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator76 = node75.new NodeIterator();
        com.google.javascript.rhino.head.Node node78 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str79 = node78.toString();
        boolean boolean80 = node78.hasConsistentReturnUsage();
        boolean boolean81 = node78.hasSideEffects();
        com.google.javascript.rhino.head.Node node83 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str84 = node83.toString();
        boolean boolean85 = node83.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node87 = com.google.javascript.rhino.head.Node.newString("");
        node87.removeProp(23);
        node83.addChildToFront(node87);
        com.google.javascript.rhino.head.Node node91 = node83.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment92 = node83.getJsDocNode();
        node78.addChildToBack(node83);
        java.lang.String str94 = node78.toString();
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node(0, node55, node75, node78, 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator97 = node78.new NodeIterator();
        node38.putProp(19, (java.lang.Object) node78);
        node31.addChildToBack(node38);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 26 + "'", int41 == 26);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "40" + "'", str61, "40");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "40" + "'", str79, "40");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "40" + "'", str84, "40");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNull(comment92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "40" + "'", str94, "40");
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        node1.addChildToFront(node3);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor15 = node1.iterator();
        com.google.javascript.rhino.head.Node node16 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean30 = node29.hasChildren();
        node20.addChildrenToFront(node29);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        boolean boolean36 = node33.hasSideEffects();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("");
        node42.removeProp(23);
        node38.addChildToFront(node42);
        com.google.javascript.rhino.head.Node node46 = node38.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment47 = node38.getJsDocNode();
        node33.addChildToBack(node38);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(15, node20, node33);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str53 = node52.toString();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(0, node56, node59);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(24, node20, node52, node60);
        com.google.javascript.rhino.head.Node node62 = null;
        // The following exception was thrown during execution in test generation
        try {
            node16.addChildBefore(node20, node62);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: newChild had siblings in addChildBefore");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeItor15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(comment47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "23" + "'", str53, "23");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(26, node3, node6, 20);
        int int17 = node14.getIntProp((int) ' ', 2);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str27 = node26.toString();
        com.google.javascript.rhino.head.Node node28 = node26.getFirstChild();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean41 = node40.hasChildren();
        node31.addChildrenToFront(node40);
        int int43 = node40.getLineno();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) 0, node40, node45, 9);
        node26.addChildrenToFront(node55);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(100, node21, node24, node26, (int) ' ');
        com.google.javascript.rhino.head.Node node59 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(21, node59);
        // The following exception was thrown during execution in test generation
        try {
            node14.removeChild(node59);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1" + "'", str27, "-1");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasChildren();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        node8.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node16 = node8.getFirstChild();
        node16.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope19 = node16.getScope();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) ' ', node16, 2);
        com.google.javascript.rhino.head.Node node22 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node26 = node25.getLastSibling();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, node25);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor28 = node25.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = node25.new NodeIterator();
        node2.addChildrenToBack(node25);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(26, node2);
        java.lang.Class<?> wildcardClass32 = node31.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1" + "'", str3, "-1");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(scope19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeItor28);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(40, "23");
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean16 = node15.hasChildren();
        node6.addChildrenToFront(node15);
        int int18 = node15.getLineno();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node28 = node20.getFirstChild();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 0, node15, node20, 9);
        boolean boolean31 = node15.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        node33.addChildrenToFront(node35);
        node35.removeChildren();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("hi!");
        node35.addChildrenToBack(node42);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node53.addChildrenToBack(node55);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node15, node35, node55);
        com.google.javascript.rhino.head.ast.Comment comment58 = null;
        node15.setJsDocNode(comment58);
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildToFront((com.google.javascript.rhino.head.Node) comment58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastChild();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        node8.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean18 = node17.hasChildren();
        node8.addChildrenToFront(node17);
        int int20 = node17.getLineno();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node22, 9);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) 'a', node36);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        com.google.javascript.rhino.head.Node node50 = node48.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) -1, node36, node46, node48, (int) (short) -1);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString("");
        node58.removeProp(23);
        node54.addChildToFront(node58);
        com.google.javascript.rhino.head.Node node62 = node54.getFirstChild();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node62.addChildrenToBack(node64);
        com.google.javascript.rhino.head.Node node66 = node64.getLastChild();
        java.lang.String str67 = node64.getJsDoc();
        java.lang.Object obj69 = node64.getProp(0);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(3, node17, node36, node64);
        com.google.javascript.rhino.head.ast.Comment comment71 = node70.getJsDocNode();
        node2.addChildrenToFront(node70);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor73 = node70.iterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = null;
        java.lang.String str75 = node70.toStringTree(scriptNode74);
        com.google.javascript.rhino.head.Node node76 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node(4, node70, node76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(comment71);
        org.junit.Assert.assertNotNull(nodeItor73);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        node5.removeProp(4);
        com.google.javascript.rhino.head.Node node20 = node5.setType(23);
        node2.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str31 = node30.toString();
        com.google.javascript.rhino.head.Node node32 = node30.getFirstChild();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean45 = node44.hasChildren();
        node35.addChildrenToFront(node44);
        int int47 = node44.getLineno();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 0, node44, node49, 9);
        node30.addChildrenToFront(node59);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(100, node25, node28, node30, (int) ' ');
        com.google.javascript.rhino.head.Node node63 = node30.getLastSibling();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node69 = node68.getLastSibling();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str74 = node73.toString();
        boolean boolean75 = node73.hasConsistentReturnUsage();
        boolean boolean76 = node73.hasSideEffects();
        node71.addChildrenToFront(node73);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(26, node68, node71, 20);
        boolean boolean80 = node79.hasSideEffects();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node(97);
        int int83 = node82.getType();
        com.google.javascript.rhino.head.Node node85 = node82.setType(97);
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node(22, node79, node85, 25);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node((int) ' ', node30, node85, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(97);
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(32, node20, node30, node91);
        com.google.javascript.rhino.head.Node node95 = com.google.javascript.rhino.head.Node.newString((int) (byte) 0, "12");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node96 = node30.getChildBefore(node95);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1" + "'", str31, "-1");
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "40" + "'", str74, "40");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        int int19 = node16.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 10, node11, node16);
        com.google.javascript.rhino.head.Node node21 = node11.getNext();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        boolean boolean31 = node28.hasSideEffects();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(0, node28);
        node23.addChildrenToBack(node32);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node37 = node36.getLastSibling();
        node32.addChildrenToBack(node37);
        node21.addChildToBack(node32);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString(10, "100");
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(13, node46);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(7, node46);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node48.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(12);
        node54.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(6, node54);
        com.google.javascript.rhino.head.Node node59 = node58.getLastChild();
        node48.addChildToFront(node58);
        node42.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str71 = node70.toString();
        boolean boolean72 = node70.hasConsistentReturnUsage();
        boolean boolean73 = node70.hasSideEffects();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(0, node70);
        node65.addChildrenToBack(node74);
        node63.addChildToFront(node65);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor77 = node63.iterator();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(14, node21, node42, node63, (int) (byte) -1);
        com.google.javascript.rhino.head.ast.Scope scope80 = null;
        node21.setScope(scope80);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "40" + "'", str71, "40");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeItor77);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node13, node17, (int) (short) 10);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) 'a', node27);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        com.google.javascript.rhino.head.Node node41 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) -1, node27, node37, node39, (int) (short) -1);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 1, node39, 12);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(23);
        node47.removeProp(25);
        boolean boolean50 = node47.hasChildren();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((-1), node22, node39, node47);
        boolean boolean52 = node39.hasSideEffects();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (short) 10, node39, (int) (short) 1);
        node54.removeProp(24);
        com.google.javascript.rhino.head.ast.Comment comment57 = node54.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            int int58 = comment57.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(comment57);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node5.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node9 = node5.getLastSibling();
        com.google.javascript.rhino.head.Node node10 = node5.getLastChild();
        com.google.javascript.rhino.head.ast.Scope scope11 = node10.getScope();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        node22.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope25 = node22.getScope();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, 2);
        com.google.javascript.rhino.head.Node node28 = node22.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = node22.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            scope11.addChildrenToBack(node29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(24, node2, (int) (short) 10);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node26 = node18.getFirstChild();
        node26.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope29 = node26.getScope();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) ' ', node26, 2);
        com.google.javascript.rhino.head.Node node32 = node26.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment33 = node26.getJsDocNode();
        node26.putIntProp(4, 2);
        int int37 = node26.getType();
        node2.putProp((int) '#', (java.lang.Object) int37);
        int int39 = node2.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = node2.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(scope29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(comment33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 41 + "'", int37 == 41);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 41 + "'", int39 == 41);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) -1, 23);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator3 = node2.spliterator();
        org.junit.Assert.assertNotNull(nodeSpliterator3);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(12, "40");
        boolean boolean3 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment4 = node2.getJsDocNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(comment4);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str9 = node8.toString();
        com.google.javascript.rhino.head.Node node10 = node8.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean23 = node22.hasChildren();
        node13.addChildrenToFront(node22);
        int int25 = node22.getLineno();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = node27.getFirstChild();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) 0, node22, node27, 9);
        node8.addChildrenToFront(node37);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(100, node3, node6, node8, (int) ' ');
        com.google.javascript.rhino.head.Node node41 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(21, node41);
        java.lang.Object obj44 = node42.getProp((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = node42.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1" + "'", str9, "-1");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12, 25);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(12, 25);
        boolean boolean6 = node5.hasChildren();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean19 = node18.hasChildren();
        node9.addChildrenToFront(node18);
        int int21 = node18.getLineno();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString("");
        node27.removeProp(23);
        node23.addChildToFront(node27);
        com.google.javascript.rhino.head.Node node31 = node23.getFirstChild();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, node18, node23, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator34 = node23.new NodeIterator();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node39 = node38.getLastSibling();
        int int40 = node38.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator41 = node38.spliterator();
        node23.putProp((int) '4', (java.lang.Object) node38);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str46 = node45.toString();
        int int47 = node45.getLineno();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment50 = node49.getJsDocNode();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(8, node45, node49, node52);
        com.google.javascript.rhino.head.ast.Comment comment60 = null;
        node52.setJsDocNode(comment60);
        node5.addChildBefore(node23, (com.google.javascript.rhino.head.Node) comment60);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        boolean boolean69 = node66.hasSideEffects();
        node64.addChildrenToFront(node66);
        node66.removeChildren();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newString("hi!");
        node66.addChildrenToBack(node73);
        com.google.javascript.rhino.head.Node node75 = node66.getFirstChild();
        java.lang.String str76 = node75.getJsDoc();
        int int79 = node75.getIntProp(12, 8);
        int int80 = node75.getLineno();
        node2.addChildAfter(node5, node75);
        com.google.javascript.rhino.head.Node node82 = node75.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node75.labelId(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "40" + "'", str24, "40");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(comment50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8 + "'", int79 == 8);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node5.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean24 = node23.hasChildren();
        node14.addChildrenToFront(node23);
        int int26 = node23.getLineno();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node36 = node28.getFirstChild();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 0, node23, node28, 9);
        boolean boolean39 = node23.hasSideEffects();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        boolean boolean46 = node43.hasSideEffects();
        node41.addChildrenToFront(node43);
        node43.removeChildren();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("hi!");
        node43.addChildrenToBack(node50);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        node57.removeProp(23);
        node53.addChildToFront(node57);
        com.google.javascript.rhino.head.Node node61 = node53.getFirstChild();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node61.addChildrenToBack(node63);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node23, node43, node63);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(9, node23);
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) 13);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(12, node5, node66, node68);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str74 = node73.toString();
        boolean boolean75 = node73.hasConsistentReturnUsage();
        boolean boolean76 = node73.hasSideEffects();
        node71.addChildrenToFront(node73);
        com.google.javascript.rhino.head.Node node78 = node73.getLastSibling();
        int int79 = node73.getLineno();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node(100, node2, node68, node73, (int) (short) 0);
        int int84 = node81.getIntProp(7, 13);
        com.google.javascript.rhino.head.Node node86 = com.google.javascript.rhino.head.Node.newString("22");
        node81.addChildToFront(node86);
        // The following exception was thrown during execution in test generation
        try {
            node81.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "40" + "'", str74, "40");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 13 + "'", int84 == 13);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node17 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node18 = node11.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator19 = node11.spliterator();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(9, node11, 10);
        node11.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeSpliterator19);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        node1.removeProp(23);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(0, node6);
        node1.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node15 = node14.getLastSibling();
        node10.addChildrenToBack(node15);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = node10.new NodeIterator();
        boolean boolean18 = nodeIterator17.hasNext();
        com.google.javascript.rhino.head.Node node19 = nodeIterator17.next();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = node19.getExistingIntProp(24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        int int10 = node4.getLineno();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node26.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 10, node4, node21, node26, 0);
        java.lang.Class<?> wildcardClass31 = node21.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(13, node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(7, node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) 'a', node2, node16, node20, (int) (short) 1);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(7);
        node20.addChildrenToBack(node26);
        com.google.javascript.rhino.head.Node node28 = node26.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node26.labelId(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean2 = node1.hasChildren();
        com.google.javascript.rhino.head.Node node3 = node1.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node1.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        int int22 = node21.getLineno();
        node19.addChildToBack(node21);
        java.lang.Class<?> wildcardClass24 = node19.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(13, node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(12);
        node13.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(6, node13);
        com.google.javascript.rhino.head.Node node18 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node9, node17, 0);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node23.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(20, node5, node9, node23);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean40 = node39.hasChildren();
        node30.addChildrenToFront(node39);
        int int42 = node39.getLineno();
        int int43 = node39.getType();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node39);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = node39.new NodeIterator();
        node27.addChildToBack(node39);
        com.google.javascript.rhino.head.Node node47 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 100, node27, node47, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 40 + "'", int43 == 40);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node4, node14, node16, (int) (short) -1);
        java.lang.Object obj22 = node4.getProp(0);
        java.lang.String str23 = node4.getJsDoc();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        node38.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope41 = node38.getScope();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) ' ', node38, 2);
        com.google.javascript.rhino.head.Node node44 = node38.getLastSibling();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node48 = node47.getLastSibling();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) ' ', node44, node47);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor50 = node47.iterator();
        node26.addChildrenToFront(node47);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("23");
        node53.removeChildren();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node26, node53, 25);
        int int57 = node56.getType();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean60 = node59.hasChildren();
        com.google.javascript.rhino.head.Node node61 = node59.getLastSibling();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        boolean boolean66 = node64.hasConsistentReturnUsage();
        boolean boolean67 = node64.hasSideEffects();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(0, node64);
        node68.putProp(40, (java.lang.Object) 9);
        com.google.javascript.rhino.head.Node node72 = node68.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node56.addChildBefore(node59, node68);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(scope41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeItor50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node4, node14, node16, (int) (short) -1);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(26, node20, node22);
        // The following exception was thrown during execution in test generation
        try {
            node22.labelId(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        node2.addChildToFront(node4);
        java.lang.String str16 = node4.getString();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(13, node4);
        com.google.javascript.rhino.head.Node node18 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(97, "");
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        node24.setString("23");
        com.google.javascript.rhino.head.ast.Scope scope27 = null;
        node24.setScope(scope27);
        // The following exception was thrown during execution in test generation
        try {
            node18.replaceChildAfter(node21, (com.google.javascript.rhino.head.Node) scope27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getFirstChild();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(8);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(26, node4, node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1" + "'", str3, "-1");
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node4, node14, node16, (int) (short) -1);
        java.lang.Object obj22 = node4.getProp(0);
        java.lang.String str23 = node4.getJsDoc();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        node38.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope41 = node38.getScope();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) ' ', node38, 2);
        com.google.javascript.rhino.head.Node node44 = node38.getLastSibling();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node48 = node47.getLastSibling();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) ' ', node44, node47);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor50 = node47.iterator();
        node26.addChildrenToFront(node47);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("23");
        node53.removeChildren();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node26, node53, 25);
        int int57 = node56.getType();
        java.lang.Object obj59 = node56.getProp(20);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(scope41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeItor50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(11);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node13, node17, (int) (short) 10);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node26 = node25.getLastSibling();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        boolean boolean33 = node30.hasSideEffects();
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(26, node25, node28, 20);
        int int37 = node36.getType();
        node1.replaceChildAfter(node13, node36);
        boolean boolean39 = node13.hasSideEffects();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 26 + "'", int37 == 26);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str4 = node3.toString();
        int int5 = node3.getLineno();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment8 = node7.getJsDocNode();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        boolean boolean15 = node12.hasSideEffects();
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(8, node3, node7, node10);
        com.google.javascript.rhino.head.ast.Comment comment18 = node3.getJsDocNode();
        com.google.javascript.rhino.head.Node node19 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(15, node19);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = node20.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100" + "'", str4, "100");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(comment8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(comment18);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = node2.new NodeIterator();
        boolean boolean4 = nodeIterator3.hasNext();
        boolean boolean5 = nodeIterator3.hasNext();
        boolean boolean6 = nodeIterator3.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node7 = nodeIterator3.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(9, node2);
        node2.removeProp(4);
        node2.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = node2.getExistingIntProp((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        node2.putIntProp(5, (int) (short) 10);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            node2.removeChild(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        node30.setString("100");
        com.google.javascript.rhino.head.Node node33 = node30.getLastSibling();
        node19.putProp(10, (java.lang.Object) node33);
        boolean boolean35 = node19.hasSideEffects();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        java.lang.String str10 = node6.getString();
        com.google.javascript.rhino.head.ast.Scope scope11 = node6.getScope();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        node22.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope25 = node22.getScope();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, 2);
        boolean boolean28 = node27.hasChildren();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        boolean boolean34 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(0, node31);
        int int36 = node31.getLineno();
        node27.addChildToFront(node31);
        int int38 = node31.getType();
        boolean boolean39 = node31.hasChildren();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasChildren();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        node55.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope58 = node55.getScope();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) ' ', node55, 2);
        com.google.javascript.rhino.head.Node node61 = node55.getLastSibling();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node65 = node64.getLastSibling();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) ' ', node61, node64);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor67 = node64.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = node64.new NodeIterator();
        node41.addChildrenToBack(node64);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(0, node6, node31, node64);
        node64.removeChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(scope11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 40 + "'", int38 == 40);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(scope58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeItor67);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("97");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        node9.setLineno(18);
        boolean boolean12 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = null;
        java.lang.String str14 = node9.toStringTree(scriptNode13);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12, 25);
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        boolean boolean15 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(0, node12);
        node7.addChildrenToBack(node16);
        node5.addChildToFront(node7);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor19 = node5.iterator();
        com.google.javascript.rhino.head.Node node20 = node5.getFirstChild();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node25 = node24.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(13, node29);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(12);
        node33.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(6, node33);
        com.google.javascript.rhino.head.Node node38 = node37.getLastChild();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node29, node37, 0);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node43.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(20, node25, node29, node43);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(13, node55);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(7, node55);
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node57.addChildToFront(node59);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(12);
        node63.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(6, node63);
        com.google.javascript.rhino.head.Node node68 = node67.getLastChild();
        node57.addChildToFront(node67);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(97, node51, node57);
        node47.addChildrenToBack(node70);
        node2.addChildAfter(node20, node70);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = null;
        java.lang.String str74 = node20.toStringTree(scriptNode73);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor75 = node20.iterator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "12" + "'", str3, "12");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeItor19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(nodeItor75);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str3 = node2.toString();
        int int4 = node2.getLineno();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment7 = node6.getJsDocNode();
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        boolean boolean14 = node11.hasSideEffects();
        node9.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(8, node2, node6, node9);
        com.google.javascript.rhino.head.ast.Comment comment17 = node2.getJsDocNode();
        com.google.javascript.rhino.head.Node node18 = node2.getLastSibling();
        node18.removeChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        boolean boolean30 = node27.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(0, node27);
        node22.addChildrenToBack(node31);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(9, node22);
        com.google.javascript.rhino.head.ast.Scope scope34 = null;
        node22.setScope(scope34);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator36 = node22.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            node18.removeChild(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100" + "'", str3, "100");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(comment7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(0, node4);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) -1, node20, node24, (int) (short) 10);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node24, node31, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment34 = null;
        node33.setJsDocNode(comment34);
        com.google.javascript.rhino.head.Node node36 = node33.getLastChild();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(4);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node44 = node43.getLastSibling();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        boolean boolean51 = node48.hasSideEffects();
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(26, node43, node46, 20);
        boolean boolean55 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(97);
        int int58 = node57.getType();
        com.google.javascript.rhino.head.Node node60 = node57.setType(97);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(22, node54, node60, 25);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 1, node33, node38, node62);
        java.lang.String str64 = node38.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "4" + "'", str64, "4");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        boolean boolean51 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(13, node55);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(12);
        node59.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(6, node59);
        com.google.javascript.rhino.head.Node node64 = node63.getLastChild();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node55, node63, 0);
        node38.addChildToBack(node66);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = node38.new NodeIterator();
        com.google.javascript.rhino.head.Node node69 = node38.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(23);
        node1.removeProp(25);
        boolean boolean4 = node1.hasChildren();
        java.lang.String str5 = node1.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "23" + "'", str5, "23");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) 'a', node5);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        com.google.javascript.rhino.head.Node node19 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node5, node15, node17, (int) (short) -1);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(26, node21, node23);
        int int25 = node23.getLineno();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(17, node23, (int) (byte) 100);
        java.lang.String str28 = node27.getJsDoc();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        boolean boolean35 = node32.hasSideEffects();
        node30.addChildrenToFront(node32);
        node32.removeChildren();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        node32.addChildrenToBack(node39);
        boolean boolean41 = node32.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = node32.getFirstChild();
        boolean boolean43 = node32.hasSideEffects();
        node27.addChildToBack(node32);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("23");
        java.lang.Object obj4 = node2.getProp(17);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(3, node2);
        boolean boolean6 = node2.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        com.google.javascript.rhino.head.Node node7 = node6.getLastChild();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) -1, node20, node24, (int) (short) 10);
        com.google.javascript.rhino.head.Node node29 = node28.getLastChild();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) 'a', node34);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        com.google.javascript.rhino.head.Node node48 = node46.getLastChild();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) -1, node34, node44, node46, (int) (short) -1);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 1, node46, 12);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(23);
        node54.removeProp(25);
        boolean boolean57 = node54.hasChildren();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((-1), node29, node46, node54);
        node7.addChildToBack(node29);
        com.google.javascript.rhino.head.Node node60 = node29.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Comment comment61 = node60.getJsDocNode();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(node60);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12);
        node12.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(6, node12);
        com.google.javascript.rhino.head.Node node17 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node8, node16, 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node22.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(20, node4, node8, node22);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str30 = node29.toString();
        java.lang.Class<?> wildcardClass31 = node29.getClass();
        node4.putProp(26, (java.lang.Object) wildcardClass31);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = node4.getExistingIntProp(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        com.google.javascript.rhino.head.ast.Scope scope5 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.setScope(scope5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node5.addChildToFront(node7);
        // The following exception was thrown during execution in test generation
        try {
            node5.labelId(22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(12);
        node21.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(6, node21);
        com.google.javascript.rhino.head.Node node26 = node25.getLastChild();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean40 = node39.hasChildren();
        node30.addChildrenToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasChildren();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node39, node43, (int) (short) 10);
        com.google.javascript.rhino.head.Node node48 = node47.getLastChild();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        node57.removeProp(23);
        node53.addChildToFront(node57);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) 'a', node53);
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str66 = node65.toString();
        com.google.javascript.rhino.head.Node node67 = node65.getLastChild();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (short) -1, node53, node63, node65, (int) (short) -1);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node((int) (short) 1, node65, 12);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(23);
        node73.removeProp(25);
        boolean boolean76 = node73.hasChildren();
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((-1), node48, node65, node73);
        node26.addChildToBack(node48);
        node12.addChildToBack(node26);
        int int80 = node26.getType();
        com.google.javascript.rhino.head.Node node82 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((int) '4', node26, node82);
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node(3, node26, 24);
        boolean boolean86 = node26.hasSideEffects();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-1" + "'", str44, "-1");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "40" + "'", str66, "40");
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean11 = node10.hasChildren();
        node1.addChildrenToFront(node10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator13 = node10.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            node10.labelId((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node12 = node3.getFirstChild();
        java.lang.String str13 = node12.getJsDoc();
        int int16 = node12.getIntProp(12, 8);
        int int17 = node12.getType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 41 + "'", int17 == 41);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.Node node85 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str86 = node85.toString();
        boolean boolean87 = node85.hasConsistentReturnUsage();
        boolean boolean88 = node85.hasSideEffects();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node85);
        com.google.javascript.rhino.head.ast.Comment comment90 = node85.getJsDocNode();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(18, node17, node85);
        int int94 = node17.getIntProp(22, 2);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator95 = node17.new NodeIterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode96 = null;
        java.lang.String str97 = node17.toStringTree(scriptNode96);
        boolean boolean98 = node17.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "40" + "'", str86, "40");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(comment90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(0);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(12);
        node19.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(6, node19);
        com.google.javascript.rhino.head.Node node24 = node23.getLastChild();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasChildren();
        node28.addChildrenToFront(node37);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasChildren();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) -1, node37, node41, (int) (short) 10);
        com.google.javascript.rhino.head.Node node46 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) 'a', node51);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) -1, node51, node61, node63, (int) (short) -1);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (short) 1, node63, 12);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(23);
        node71.removeProp(25);
        boolean boolean74 = node71.hasChildren();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-1), node46, node63, node71);
        node24.addChildToBack(node46);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (short) -1, node2, node16, node46);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("-1");
        node79.removeProp(25);
        node2.addChildToBack(node79);
        node79.removeProp(9);
        node79.putIntProp(52, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = node79.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "40" + "'", str64, "40");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        node18.addChildrenToFront(node20);
        node20.removeChildren();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString("hi!");
        node20.addChildrenToBack(node27);
        node16.addChildToFront(node20);
        int int30 = node16.getType();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean44 = node43.hasChildren();
        node34.addChildrenToFront(node43);
        int int46 = node43.getLineno();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("");
        node52.removeProp(23);
        node48.addChildToFront(node52);
        com.google.javascript.rhino.head.Node node56 = node48.getFirstChild();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (short) 0, node43, node48, 9);
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("1");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor61 = node60.iterator();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(21, node58, node60, (int) '4');
        node16.addChildrenToFront(node63);
        com.google.javascript.rhino.head.Node node66 = node16.setType((-1));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 41 + "'", int30 == 41);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(nodeItor61);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node4 = node1.getLastSibling();
        com.google.javascript.rhino.head.Node node6 = node4.setType(100);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = null;
        java.lang.String str8 = node4.toStringTree(scriptNode7);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = node4.getExistingIntProp(25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.Node node85 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str86 = node85.toString();
        boolean boolean87 = node85.hasConsistentReturnUsage();
        boolean boolean88 = node85.hasSideEffects();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node85);
        com.google.javascript.rhino.head.ast.Comment comment90 = node85.getJsDocNode();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(18, node17, node85);
        double double92 = node85.getDouble();
        com.google.javascript.rhino.head.Node node93 = node85.getLastSibling();
        boolean boolean94 = node85.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            int int95 = node85.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "40" + "'", str86, "40");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(comment90);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 32.0d + "'", double92 == 32.0d);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        boolean boolean8 = node5.hasSideEffects();
        node3.addChildrenToFront(node5);
        com.google.javascript.rhino.head.Node node10 = node5.getLastSibling();
        int int11 = node5.getLineno();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean23 = node22.hasChildren();
        node13.addChildrenToFront(node22);
        int int25 = node22.getLineno();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node27.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 10, node5, node22, node27, 0);
        java.lang.Object obj33 = node5.getProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean46 = node45.hasChildren();
        node36.addChildrenToFront(node45);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator48 = node45.new NodeIterator();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        com.google.javascript.rhino.head.Node node52 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str56 = node55.toString();
        boolean boolean57 = node55.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newString("");
        node59.removeProp(23);
        node55.addChildToFront(node59);
        com.google.javascript.rhino.head.Node node63 = node55.getFirstChild();
        node63.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope66 = node63.getScope();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) ' ', node63, 2);
        com.google.javascript.rhino.head.Node node69 = node63.getLastSibling();
        node52.addChildToFront(node69);
        node45.addChildrenToFront(node52);
        int int74 = node52.getIntProp(0, (int) ' ');
        int int77 = node52.getIntProp(14, 6);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(18, node52, (int) (short) 10);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node83 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str84 = node83.toString();
        boolean boolean85 = node83.hasConsistentReturnUsage();
        boolean boolean86 = node83.hasSideEffects();
        node81.addChildrenToFront(node83);
        node83.removeChildren();
        com.google.javascript.rhino.head.Node node90 = com.google.javascript.rhino.head.Node.newString("hi!");
        node83.addChildrenToBack(node90);
        boolean boolean92 = node83.hasSideEffects();
        com.google.javascript.rhino.head.Node node93 = node83.getFirstChild();
        boolean boolean94 = node83.hasSideEffects();
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node(0, node5, node52, node83, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            node52.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "40" + "'", str56, "40");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(scope66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 32 + "'", int74 == 32);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6 + "'", int77 == 6);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "40" + "'", str84, "40");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber(10.0d);
        com.google.javascript.rhino.head.Node node2 = node1.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean3 = node2.hasChildren();
        java.lang.String str4 = node2.getJsDoc();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(13, node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(12);
        node17.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(6, node17);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node13, node21, 0);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node27.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(20, node9, node13, node27);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(13, node39);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(7, node39);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node41.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(12);
        node47.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(6, node47);
        com.google.javascript.rhino.head.Node node52 = node51.getLastChild();
        node41.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(97, node35, node41);
        node31.addChildrenToBack(node54);
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        int int60 = node57.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newString("");
        node70.removeProp(23);
        node66.addChildToFront(node70);
        com.google.javascript.rhino.head.Node node74 = node66.getFirstChild();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node74.addChildrenToBack(node76);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("");
        int int82 = node79.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((int) (short) 10, node74, node79);
        com.google.javascript.rhino.head.Node node85 = node74.setType(18);
        node57.addChildAfter(node63, node85);
        node57.putIntProp(32, 26);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(15, node2, node54, node57, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = node54.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        int int26 = node19.getType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = null;
        java.lang.String str28 = node19.toStringTree(scriptNode27);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        boolean boolean35 = node32.hasSideEffects();
        node30.addChildrenToFront(node32);
        boolean boolean37 = node32.hasSideEffects();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor38 = node32.iterator();
        node19.addChildrenToBack(node32);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        node47.removeProp(23);
        node43.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) 'a', node43);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str56 = node55.toString();
        com.google.javascript.rhino.head.Node node57 = node55.getLastChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) -1, node43, node53, node55, (int) (short) -1);
        java.lang.Object obj61 = node43.getProp(0);
        java.lang.String str62 = node43.getJsDoc();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(13, node66);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(12);
        node70.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(6, node70);
        com.google.javascript.rhino.head.Node node75 = node74.getLastChild();
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node66, node74, 0);
        int int78 = node77.getLineno();
        com.google.javascript.rhino.head.Node node80 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str81 = node80.toString();
        boolean boolean82 = node80.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node84 = com.google.javascript.rhino.head.Node.newString("");
        node84.removeProp(23);
        node80.addChildToFront(node84);
        com.google.javascript.rhino.head.Node node88 = node80.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment89 = node80.getJsDocNode();
        int int90 = node80.getType();
        node77.addChildrenToBack(node80);
        // The following exception was thrown during execution in test generation
        try {
            node19.replaceChild(node43, node80);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 40 + "'", int26 == 40);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeItor38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "40" + "'", str56, "40");
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "40" + "'", str81, "40");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(comment89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 40 + "'", int90 == 40);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node2.setJsDocNode(comment4);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) 'a', node10);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        com.google.javascript.rhino.head.Node node24 = node22.getLastChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) -1, node10, node20, node22, (int) (short) -1);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(26, node26, node28);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(19, node2, node29, 17);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = null;
        java.lang.String str33 = node2.toStringTree(scriptNode32);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(0);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(12);
        node19.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(6, node19);
        com.google.javascript.rhino.head.Node node24 = node23.getLastChild();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasChildren();
        node28.addChildrenToFront(node37);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasChildren();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) -1, node37, node41, (int) (short) 10);
        com.google.javascript.rhino.head.Node node46 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) 'a', node51);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) -1, node51, node61, node63, (int) (short) -1);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (short) 1, node63, 12);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(23);
        node71.removeProp(25);
        boolean boolean74 = node71.hasChildren();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-1), node46, node63, node71);
        node24.addChildToBack(node46);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (short) -1, node2, node16, node46);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = node2.getExistingIntProp(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "40" + "'", str64, "40");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.ast.Scope scope83 = null;
        node51.setScope(scope83);
        boolean boolean85 = node51.hasSideEffects();
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(13, node51);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = node86.getExistingIntProp((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        int int9 = node6.getIntProp(18, 26);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean24 = node23.hasChildren();
        node14.addChildrenToFront(node23);
        int int26 = node23.getLineno();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node36 = node28.getFirstChild();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 0, node23, node28, 9);
        boolean boolean39 = node23.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node43 = node42.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator44 = node43.new NodeIterator();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        boolean boolean49 = node46.hasSideEffects();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = node51.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment60 = node51.getJsDocNode();
        node46.addChildToBack(node51);
        java.lang.String str62 = node46.toString();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(0, node23, node43, node46, 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator65 = node46.new NodeIterator();
        node6.putProp(19, (java.lang.Object) node46);
        com.google.javascript.rhino.head.Node node68 = node46.setType((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            node68.setString("22");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(comment60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        node21.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(13, node21);
        com.google.javascript.rhino.head.Node node28 = node21.setType(2);
        node21.putIntProp(40, (int) (short) 100);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        int int37 = node34.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node38 = node34.getFirstChild();
        node21.putProp((int) 'a', (java.lang.Object) node34);
        com.google.javascript.rhino.head.Node node41 = node34.setType((int) ' ');
        node34.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(0, 1);
        node2.removeChildren();
        int int4 = node2.getLineno();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator17 = node11.spliterator();
        node11.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        boolean boolean27 = node24.hasSideEffects();
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean41 = node40.hasChildren();
        node31.addChildrenToFront(node40);
        int int43 = node40.getLineno();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) 0, node40, node45, 9);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 100, node11, node24, node40, 25);
        com.google.javascript.rhino.head.ast.Scope scope58 = null;
        // The following exception was thrown during execution in test generation
        try {
            node40.setScope(scope58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(nodeSpliterator17);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment11 = node2.getJsDocNode();
        int int12 = node2.getType();
        node2.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        java.lang.String str24 = node20.getString();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(10, node2, node20, node27, 14);
        int int32 = node29.getIntProp(0, (-1));
        // The following exception was thrown during execution in test generation
        try {
            double double33 = node29.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        com.google.javascript.rhino.head.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) '#', node1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(22, "100");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node4, node14, node16, (int) (short) -1);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 1, node16, 12);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = node16.getExistingIntProp(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = node32.new NodeIterator();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment49 = node40.getJsDocNode();
        node35.addChildToBack(node40);
        java.lang.String str51 = node35.toString();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, node12, node32, node35, 1);
        int int56 = node35.getIntProp(25, 40);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(comment49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        java.lang.String str9 = node5.getString();
        com.google.javascript.rhino.head.ast.Scope scope10 = node5.getScope();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = scope10.getExistingIntProp(19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(scope10);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node5.getLastChild();
        com.google.javascript.rhino.head.Node node10 = node5.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) 'a', node2);
        boolean boolean11 = node10.hasSideEffects();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = node10.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator17 = node11.spliterator();
        node11.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        boolean boolean27 = node24.hasSideEffects();
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean41 = node40.hasChildren();
        node31.addChildrenToFront(node40);
        int int43 = node40.getLineno();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) 0, node40, node45, 9);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 100, node11, node24, node40, 25);
        com.google.javascript.rhino.head.Node node58 = node57.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(nodeSpliterator17);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node58);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        int int14 = node11.getLineno();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, node11, node16, 9);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node31 = node30.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(26, node30, node33, 20);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        boolean boolean48 = node45.hasSideEffects();
        node43.addChildrenToFront(node45);
        node45.removeChildren();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("hi!");
        node45.addChildrenToBack(node52);
        boolean boolean54 = node45.hasSideEffects();
        com.google.javascript.rhino.head.Node node55 = node45.getFirstChild();
        node11.replaceChildAfter(node30, node45);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = node11.getExistingIntProp(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(26, node4, node7, 20);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (short) 0, node4, 19);
        com.google.javascript.rhino.head.Node node18 = null;
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        node29.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope32 = node29.getScope();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) ' ', node29, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator35 = node29.spliterator();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.ast.Comment comment40 = node38.getJsDocNode();
        node29.putProp((int) '#', (java.lang.Object) node38);
        // The following exception was thrown during execution in test generation
        try {
            node17.addChildBefore(node18, node29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(scope32);
        org.junit.Assert.assertNotNull(nodeSpliterator35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertNull(comment40);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        boolean boolean24 = node21.hasSideEffects();
        node19.addChildrenToFront(node21);
        node21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("hi!");
        node21.addChildrenToBack(node28);
        int int32 = node28.getIntProp(0, 22);
        node11.putProp(15, (java.lang.Object) 22);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, 2);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = null;
        java.lang.String str37 = node11.toStringTree(scriptNode36);
        com.google.javascript.rhino.head.Node node39 = node11.setType(2);
        node39.removeProp(2);
        java.lang.Class<?> wildcardClass42 = node39.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        int int7 = node2.getLineno();
        node2.removeProp(0);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = node2.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = node2.getExistingIntProp((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator10);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj3 = node1.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        double double5 = node1.getDouble();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 41);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(12);
        node4.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        node4.addChildToBack(node27);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean43 = node42.hasChildren();
        node33.addChildrenToFront(node42);
        int int45 = node42.getLineno();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 0, node42, node47, 9);
        boolean boolean58 = node42.hasSideEffects();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str63 = node62.toString();
        boolean boolean64 = node62.hasConsistentReturnUsage();
        boolean boolean65 = node62.hasSideEffects();
        node60.addChildrenToFront(node62);
        node62.removeChildren();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newString("hi!");
        node62.addChildrenToBack(node69);
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str73 = node72.toString();
        boolean boolean74 = node72.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newString("");
        node76.removeProp(23);
        node72.addChildToFront(node76);
        com.google.javascript.rhino.head.Node node80 = node72.getFirstChild();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node80.addChildrenToBack(node82);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node42, node62, node82);
        com.google.javascript.rhino.head.Node node87 = com.google.javascript.rhino.head.Node.newString(19, "");
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node(0, node42, node87);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node2, node27, node88);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope90 = node2.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "40" + "'", str63, "40");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "40" + "'", str73, "40");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(2, "23");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = node32.new NodeIterator();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment49 = node40.getJsDocNode();
        node35.addChildToBack(node40);
        java.lang.String str51 = node35.toString();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, node12, node32, node35, 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator54 = node35.new NodeIterator();
        com.google.javascript.rhino.head.Node node55 = nodeIterator54.next();
        // The following exception was thrown during execution in test generation
        try {
            node55.setString("40");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(comment49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(3, node2, 22);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = null;
        java.lang.String str6 = node2.toStringTree(scriptNode5);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        boolean boolean8 = node5.hasSideEffects();
        node3.addChildrenToFront(node5);
        node5.removeChildren();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("hi!");
        node5.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node15 = node5.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node17 = node15.setType(23);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasChildren();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) -1, node30, node34, (int) (short) 10);
        com.google.javascript.rhino.head.Node node39 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("");
        node48.removeProp(23);
        node44.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) 'a', node44);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        com.google.javascript.rhino.head.Node node58 = node56.getLastChild();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) -1, node44, node54, node56, (int) (short) -1);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) 1, node56, 12);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(23);
        node64.removeProp(25);
        boolean boolean67 = node64.hasChildren();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((-1), node39, node56, node64);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(0, node17, node68);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node74 = node72.setType((int) (short) 10);
        boolean boolean75 = node72.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node(20, node69, node72, 18);
        // The following exception was thrown during execution in test generation
        try {
            node77.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1" + "'", str35, "-1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2, node5);
        int int7 = node2.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor8 = node2.iterator();
        int int11 = node2.getIntProp((-1), 10);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = node2.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12);
        node12.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(6, node12);
        com.google.javascript.rhino.head.Node node17 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node8, node16, 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node22.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(20, node4, node8, node22);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = null;
        java.lang.String str28 = node4.toStringTree(scriptNode27);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(15, "40");
        com.google.javascript.rhino.head.Node node4 = node3.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(15, node4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.head.Node node5 = node3.getLastChild();
        java.lang.Object obj7 = node3.getProp(41);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(20);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12, 25);
        boolean boolean13 = node12.hasChildren();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean26 = node25.hasChildren();
        node16.addChildrenToFront(node25);
        int int28 = node25.getLineno();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 0, node25, node30, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = node30.new NodeIterator();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node46 = node45.getLastSibling();
        int int47 = node45.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator48 = node45.spliterator();
        node30.putProp((int) '4', (java.lang.Object) node45);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str53 = node52.toString();
        int int54 = node52.getLineno();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment57 = node56.getJsDocNode();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        boolean boolean64 = node61.hasSideEffects();
        node59.addChildrenToFront(node61);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(8, node52, node56, node59);
        com.google.javascript.rhino.head.ast.Comment comment67 = null;
        node59.setJsDocNode(comment67);
        node12.addChildBefore(node30, (com.google.javascript.rhino.head.Node) comment67);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(8, node3, node9, (com.google.javascript.rhino.head.Node) comment67, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(comment57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node12, node22, (-1));
        com.google.javascript.rhino.head.Node node26 = node24.setType((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = node26.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(0, node4);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) -1, node20, node24, (int) (short) 10);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node24, node31, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment34 = null;
        node33.setJsDocNode(comment34);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) comment34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str13 = node12.toString();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        node1.putProp(21, (java.lang.Object) node12);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator16 = node12.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1" + "'", str13, "-1");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = null;
        java.lang.String str8 = node3.toStringTree(scriptNode7);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node5.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node9 = node5.getLastSibling();
        com.google.javascript.rhino.head.Node node10 = node5.getLastChild();
        com.google.javascript.rhino.head.ast.Scope scope11 = node10.getScope();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = scope11.getProp((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope11);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(5, 11);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        boolean boolean21 = node20.hasChildren();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean35 = node34.hasChildren();
        node25.addChildrenToFront(node34);
        int int37 = node34.getLineno();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        node43.removeProp(23);
        node39.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = node39.getFirstChild();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, node34, node39, 9);
        boolean boolean50 = node34.hasSideEffects();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node54 = node53.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = node54.new NodeIterator();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str58 = node57.toString();
        boolean boolean59 = node57.hasConsistentReturnUsage();
        boolean boolean60 = node57.hasSideEffects();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str63 = node62.toString();
        boolean boolean64 = node62.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("");
        node66.removeProp(23);
        node62.addChildToFront(node66);
        com.google.javascript.rhino.head.Node node70 = node62.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment71 = node62.getJsDocNode();
        node57.addChildToBack(node62);
        java.lang.String str73 = node57.toString();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node(0, node34, node54, node57, 1);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str80 = node79.toString();
        boolean boolean81 = node79.hasConsistentReturnUsage();
        boolean boolean82 = node79.hasSideEffects();
        node77.addChildrenToFront(node79);
        node79.removeChildren();
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node((int) (short) 0, node20, node54, node79);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(19, node3, node85);
        // The following exception was thrown during execution in test generation
        try {
            node85.setString("12");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "40" + "'", str58, "40");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "40" + "'", str63, "40");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(comment71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "40" + "'", str73, "40");
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "40" + "'", str80, "40");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node9.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = node11.getLastChild();
        java.lang.String str14 = node11.getJsDoc();
        java.lang.Object obj16 = node11.getProp(0);
        com.google.javascript.rhino.head.Node node17 = node11.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope18 = node17.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 10.0f);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = node5.getFirstChild();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node13.addChildrenToBack(node15);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        int int21 = node18.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 10, node13, node18);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        boolean boolean34 = node31.hasSideEffects();
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(26, node26, node29, 20);
        boolean boolean38 = node37.hasSideEffects();
        java.lang.String str39 = node37.getJsDoc();
        node18.addChildToFront(node37);
        node1.addChildToFront(node18);
        boolean boolean42 = node1.hasChildren();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor43 = node1.iterator();
        com.google.javascript.rhino.head.ast.Scope scope44 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.setScope(scope44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeItor43);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(9, 41);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        node8.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean18 = node17.hasChildren();
        node8.addChildrenToFront(node17);
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasChildren();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) (short) -1, node17, node21, (int) (short) 10);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(0, node17, node27, (-1));
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(23, (int) (short) -1);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        boolean boolean39 = node36.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(0, node36);
        com.google.javascript.rhino.head.Node node41 = node40.getLastChild();
        node40.removeChildren();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(19, node33, node40, 24);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 100, node29, node44);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((-1), node3, node29, (int) '#');
        java.lang.String str48 = node47.getJsDoc();
        node47.putIntProp(0, 97);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator52 = node47.spliterator();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1" + "'", str22, "-1");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(nodeSpliterator52);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20);
        int int25 = node20.getLineno();
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("-1");
        node28.removeProp(25);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(7, node20, node28, 1);
        com.google.javascript.rhino.head.Node node33 = node20.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node33.setString("100");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 41);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        node9.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope12 = node9.getScope();
        node9.putIntProp(16, 21);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        boolean boolean20 = node17.hasSideEffects();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment31 = node22.getJsDocNode();
        node17.addChildToBack(node22);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor33 = node17.iterator();
        com.google.javascript.rhino.head.ast.Comment comment34 = node17.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator35 = node17.new NodeIterator();
        double double36 = node17.getDouble();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        node43.removeProp(23);
        node39.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = node39.getFirstChild();
        node47.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope50 = node47.getScope();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) ' ', node47, 2);
        boolean boolean53 = node52.hasChildren();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        boolean boolean59 = node56.hasSideEffects();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(0, node56);
        int int61 = node56.getLineno();
        node52.addChildToFront(node56);
        int int63 = node56.getType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = null;
        java.lang.String str65 = node56.toStringTree(scriptNode64);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str70 = node69.toString();
        boolean boolean71 = node69.hasConsistentReturnUsage();
        boolean boolean72 = node69.hasSideEffects();
        node67.addChildrenToFront(node69);
        boolean boolean74 = node69.hasSideEffects();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor75 = node69.iterator();
        node56.addChildrenToBack(node69);
        node17.addChildToFront(node69);
        node9.addChildToBack(node17);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(scope12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(comment31);
        org.junit.Assert.assertNotNull(nodeItor33);
        org.junit.Assert.assertNull(comment34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 32.0d + "'", double36 == 32.0d);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 40 + "'", int63 == 40);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeItor75);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.head.ast.Comment comment2 = null;
        node1.setJsDocNode(comment2);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.head.Node node14 = node9.getLastSibling();
        int int15 = node9.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean27 = node26.hasChildren();
        node17.addChildrenToFront(node26);
        int int29 = node26.getLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node31.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) 10, node9, node26, node31, 0);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        boolean boolean42 = node39.hasSideEffects();
        node37.addChildrenToFront(node39);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node53.addChildrenToBack(node55);
        node39.addChildrenToBack(node55);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node2, node26, node55);
        // The following exception was thrown during execution in test generation
        try {
            node58.setString("40");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(52);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) 'a', node31);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        com.google.javascript.rhino.head.Node node45 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node31, node41, node43, (int) (short) -1);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node57.addChildrenToBack(node59);
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        java.lang.String str62 = node59.getJsDoc();
        java.lang.Object obj64 = node59.getProp(0);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(3, node12, node31, node59);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = node31.getExistingIntProp(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        com.google.javascript.rhino.head.Node node35 = node7.getNext();
        node7.setLineno(7);
        boolean boolean38 = node7.hasSideEffects();
        node7.setLineno(8);
        com.google.javascript.rhino.head.Node node42 = node7.setType(4);
        node7.setLineno((int) (short) 100);
        boolean boolean45 = node7.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        com.google.javascript.rhino.head.Node node1 = null;
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        node24.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope27 = node24.getScope();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) ' ', node24, 2);
        com.google.javascript.rhino.head.Node node30 = node24.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node34 = node33.getLastSibling();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) ' ', node30, node33);
        node4.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("");
        node42.removeProp(23);
        node38.addChildToFront(node42);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean48 = node47.hasChildren();
        node38.addChildrenToFront(node47);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator50 = node47.new NodeIterator();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        com.google.javascript.rhino.head.Node node54 = node52.getLastSibling();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str58 = node57.toString();
        boolean boolean59 = node57.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("");
        node61.removeProp(23);
        node57.addChildToFront(node61);
        com.google.javascript.rhino.head.Node node65 = node57.getFirstChild();
        node65.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope68 = node65.getScope();
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) ' ', node65, 2);
        com.google.javascript.rhino.head.Node node71 = node65.getLastSibling();
        node54.addChildToFront(node71);
        node47.addChildrenToFront(node54);
        node4.addChildrenToBack(node54);
        node4.removeProp(20);
        com.google.javascript.rhino.head.Node node77 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(3, node1, node4, node77, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(scope27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "40" + "'", str58, "40");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(scope68);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment10 = node1.getJsDocNode();
        int int11 = node1.getType();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node node13 = nodeIterator12.next();
        boolean boolean14 = nodeIterator12.hasNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(comment10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.Node node85 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str86 = node85.toString();
        boolean boolean87 = node85.hasConsistentReturnUsage();
        boolean boolean88 = node85.hasSideEffects();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node85);
        com.google.javascript.rhino.head.ast.Comment comment90 = node85.getJsDocNode();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(18, node17, node85);
        int int94 = node17.getIntProp(22, 2);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator95 = node17.new NodeIterator();
        boolean boolean96 = nodeIterator95.hasNext();
        com.google.javascript.rhino.head.Node node97 = nodeIterator95.next();
        com.google.javascript.rhino.head.Node node98 = node97.getFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "40" + "'", str86, "40");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(comment90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNull(node98);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(15, "40");
        com.google.javascript.rhino.head.Node node3 = node2.getNext();
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        node5.addChildrenToFront(node7);
        node7.removeChildren();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("hi!");
        node7.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node17 = node7.setType((int) (short) -1);
        java.lang.Object obj19 = null;
        node17.putProp(3, obj19);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        boolean boolean28 = node25.hasSideEffects();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(0, node25);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        node36.removeProp(23);
        node32.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean42 = node41.hasChildren();
        node32.addChildrenToFront(node41);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasChildren();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) -1, node41, node45, (int) (short) 10);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node25, node45, node52, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment55 = null;
        node54.setJsDocNode(comment55);
        com.google.javascript.rhino.head.Node node57 = node54.getLastChild();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean69 = node68.hasChildren();
        node59.addChildrenToFront(node68);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator71 = node68.new NodeIterator();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str74 = node73.toString();
        com.google.javascript.rhino.head.Node node75 = node73.getLastSibling();
        com.google.javascript.rhino.head.Node node78 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str79 = node78.toString();
        boolean boolean80 = node78.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node82 = com.google.javascript.rhino.head.Node.newString("");
        node82.removeProp(23);
        node78.addChildToFront(node82);
        com.google.javascript.rhino.head.Node node86 = node78.getFirstChild();
        node86.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope89 = node86.getScope();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node((int) ' ', node86, 2);
        com.google.javascript.rhino.head.Node node92 = node86.getLastSibling();
        node75.addChildToFront(node92);
        node68.addChildrenToFront(node75);
        node57.addChildToFront(node75);
        com.google.javascript.rhino.head.Node node97 = new com.google.javascript.rhino.head.Node(3, node75, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChildAfter(node17, node97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1" + "'", str46, "-1");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "40" + "'", str74, "40");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "40" + "'", str79, "40");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(scope89);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) 'a', node31);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        com.google.javascript.rhino.head.Node node45 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node31, node41, node43, (int) (short) -1);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node57.addChildrenToBack(node59);
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        java.lang.String str62 = node59.getJsDoc();
        java.lang.Object obj64 = node59.getProp(0);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(3, node12, node31, node59);
        java.lang.Object obj67 = node31.getProp(5);
        double double68 = node31.getDouble();
        // The following exception was thrown during execution in test generation
        try {
            node31.labelId(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 32.0d + "'", double68 == 32.0d);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node17 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(12);
        node20.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(6, node20);
        com.google.javascript.rhino.head.Node node25 = node24.getLastChild();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean39 = node38.hasChildren();
        node29.addChildrenToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasChildren();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) -1, node38, node42, (int) (short) 10);
        com.google.javascript.rhino.head.Node node47 = node46.getLastChild();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) 'a', node52);
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        com.google.javascript.rhino.head.Node node66 = node64.getLastChild();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) -1, node52, node62, node64, (int) (short) -1);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) (short) 1, node64, 12);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(23);
        node72.removeProp(25);
        boolean boolean75 = node72.hasChildren();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((-1), node47, node64, node72);
        node25.addChildToBack(node47);
        node11.addChildToBack(node25);
        int int79 = node25.getType();
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) '4', node25, node81);
        com.google.javascript.rhino.head.ast.Comment comment83 = null;
        node81.setJsDocNode(comment83);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(23);
        node86.setLineno(15);
        com.google.javascript.rhino.head.Node node90 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean91 = node90.hasChildren();
        com.google.javascript.rhino.head.Node node92 = node90.getLastSibling();
        node86.addChildrenToBack(node92);
        // The following exception was thrown during execution in test generation
        try {
            node81.removeChild(node92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node10, node14, 18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        int int16 = node13.getLineno();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node26 = node18.getFirstChild();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 0, node13, node18, 9);
        boolean boolean29 = node13.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        boolean boolean36 = node33.hasSideEffects();
        node31.addChildrenToFront(node33);
        node33.removeChildren();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("hi!");
        node33.addChildrenToBack(node40);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        node47.removeProp(23);
        node43.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node51 = node43.getFirstChild();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node51.addChildrenToBack(node53);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node13, node33, node53);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(9, node13);
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str61 = node60.toString();
        boolean boolean62 = node60.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newString("");
        node64.removeProp(23);
        node60.addChildToFront(node64);
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean70 = node69.hasChildren();
        node60.addChildrenToFront(node69);
        int int72 = node69.getLineno();
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str75 = node74.toString();
        boolean boolean76 = node74.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node78 = com.google.javascript.rhino.head.Node.newString("");
        node78.removeProp(23);
        node74.addChildToFront(node78);
        com.google.javascript.rhino.head.Node node82 = node74.getFirstChild();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (short) 0, node69, node74, 9);
        com.google.javascript.rhino.head.Node node86 = com.google.javascript.rhino.head.Node.newString("1");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor87 = node86.iterator();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(21, node84, node86, (int) '4');
        node56.addChildToBack(node84);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "40" + "'", str61, "40");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "40" + "'", str75, "40");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(nodeItor87);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node10.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        int int18 = node15.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 10, node10, node15);
        boolean boolean20 = node15.hasSideEffects();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = node15.getExistingIntProp(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        node2.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        int int23 = node20.getLineno();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node33 = node25.getFirstChild();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) 0, node20, node25, 9);
        boolean boolean36 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        boolean boolean43 = node40.hasSideEffects();
        node38.addChildrenToFront(node40);
        node40.removeChildren();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("hi!");
        node40.addChildrenToBack(node47);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        node54.removeProp(23);
        node50.addChildToFront(node54);
        com.google.javascript.rhino.head.Node node58 = node50.getFirstChild();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node58.addChildrenToBack(node60);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node20, node40, node60);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(9, node20);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) 13);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(12, node2, node63, node65);
        // The following exception was thrown during execution in test generation
        try {
            node2.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node4, node14, node16, (int) (short) -1);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 1, node16, 12);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node33 = node25.getFirstChild();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node33.addChildrenToBack(node35);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        int int41 = node38.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) 10, node33, node38);
        boolean boolean43 = node38.hasSideEffects();
        com.google.javascript.rhino.head.ast.Comment comment44 = null;
        node38.setJsDocNode(comment44);
        node16.addChildrenToBack(node38);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        boolean boolean5 = nodeIterator4.hasNext();
        boolean boolean6 = nodeIterator4.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node7 = nodeIterator4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment23 = node14.getJsDocNode();
        node9.addChildToBack(node14);
        boolean boolean25 = node14.hasConsistentReturnUsage();
        node2.putProp((int) (short) 1, (java.lang.Object) node14);
        node2.putProp(20, (java.lang.Object) "23");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 100, 25);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        boolean boolean43 = node40.hasSideEffects();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(0, node40);
        node35.addChildrenToBack(node44);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(9, node35);
        node35.removeProp(4);
        com.google.javascript.rhino.head.Node node50 = node35.setType(23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = null;
        java.lang.String str52 = node50.toStringTree(scriptNode51);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator53 = node50.spliterator();
        java.lang.String str54 = node50.getString();
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChild(node32, node50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(comment23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(nodeSpliterator53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node5.getLastChild();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("1");
        node5.addChildrenToBack(node11);
        int int13 = node11.getLineno();
        node11.removeProp(16);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment20 = null;
        node17.setJsDocNode(comment20);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        boolean boolean32 = node29.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(0, node29);
        node24.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(9, node24);
        node17.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node38 = node17.setType(18);
        node17.removeChildren();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(13, node43);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(7, node43);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node45.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node49 = node45.getLastSibling();
        node11.addChildAfter(node17, node45);
        boolean boolean51 = node11.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        boolean boolean17 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean29 = node28.hasChildren();
        node19.addChildrenToFront(node28);
        node6.addChildToBack(node28);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = node28.getExistingIntProp(24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 10.0f);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = node5.getFirstChild();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node13.addChildrenToBack(node15);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        int int21 = node18.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 10, node13, node18);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        boolean boolean34 = node31.hasSideEffects();
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(26, node26, node29, 20);
        boolean boolean38 = node37.hasSideEffects();
        java.lang.String str39 = node37.getJsDoc();
        node18.addChildToFront(node37);
        node1.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("");
        node48.removeProp(23);
        node44.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node52 = node44.getFirstChild();
        node52.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope55 = node52.getScope();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) ' ', node52, 2);
        boolean boolean58 = node57.hasChildren();
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        boolean boolean64 = node61.hasSideEffects();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(0, node61);
        int int66 = node61.getLineno();
        node57.addChildToFront(node61);
        int int68 = node61.getType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = null;
        java.lang.String str70 = node61.toStringTree(scriptNode69);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str75 = node74.toString();
        boolean boolean76 = node74.hasConsistentReturnUsage();
        boolean boolean77 = node74.hasSideEffects();
        node72.addChildrenToFront(node74);
        boolean boolean79 = node74.hasSideEffects();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor80 = node74.iterator();
        node61.addChildrenToBack(node74);
        com.google.javascript.rhino.head.Node node83 = node74.setType(40);
        int int86 = node83.getIntProp(20, 23);
        node1.addChildToFront(node83);
        node1.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 40 + "'", int68 == 40);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "40" + "'", str75, "40");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeItor80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 23 + "'", int86 == 23);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node3, node23, node30, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment33 = null;
        node3.setJsDocNode(comment33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node39 = node38.getLastSibling();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        boolean boolean46 = node43.hasSideEffects();
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(26, node38, node41, 20);
        boolean boolean50 = node49.hasSideEffects();
        com.google.javascript.rhino.head.Node node51 = node49.getLastChild();
        node51.putIntProp(20, 17);
        node3.addChildToBack(node51);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(97, node2, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            node2.labelId(18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = node32.new NodeIterator();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment49 = node40.getJsDocNode();
        node35.addChildToBack(node40);
        java.lang.String str51 = node35.toString();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, node12, node32, node35, 1);
        boolean boolean54 = node35.hasSideEffects();
        node35.removeProp((int) '4');
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newString((int) (short) -1, "-1");
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(23);
        node61.removeProp(25);
        boolean boolean64 = node61.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            node35.addChildBefore(node59, node61);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(comment49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        boolean boolean26 = node19.hasSideEffects();
        boolean boolean27 = node19.hasChildren();
        node19.setLineno((int) (short) 1);
        double double30 = node19.getDouble();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(13, node37);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(12);
        node41.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(6, node41);
        com.google.javascript.rhino.head.Node node46 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node37, node45, 0);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(17, node33, node48);
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        node49.putIntProp((int) (byte) 100, (int) (byte) 0);
        node19.addChildToFront(node49);
        node49.removeProp(24);
        node49.putIntProp(23, 25);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 32.0d + "'", double30 == 32.0d);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(21, 3);
        java.lang.Class<?> wildcardClass3 = node2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(0, node4, node7);
        com.google.javascript.rhino.head.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(7, node9);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) 'a', node15);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        com.google.javascript.rhino.head.Node node29 = node27.getLastChild();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) -1, node15, node25, node27, (int) (short) -1);
        java.lang.Object obj33 = node15.getProp(0);
        java.lang.String str34 = node15.getJsDoc();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("");
        node45.removeProp(23);
        node41.addChildToFront(node45);
        com.google.javascript.rhino.head.Node node49 = node41.getFirstChild();
        node49.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope52 = node49.getScope();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) ' ', node49, 2);
        com.google.javascript.rhino.head.Node node55 = node49.getLastSibling();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node59 = node58.getLastSibling();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) ' ', node55, node58);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor61 = node58.iterator();
        node37.addChildrenToFront(node58);
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newString("23");
        node64.removeChildren();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node15, node37, node64, 25);
        node64.putIntProp(1, (int) (byte) 1);
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str73 = node72.toString();
        boolean boolean74 = node72.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment75 = null;
        node72.setJsDocNode(comment75);
        com.google.javascript.rhino.head.Node node77 = node72.getLastSibling();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node(23, (int) (short) -1);
        com.google.javascript.rhino.head.Node node84 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str85 = node84.toString();
        boolean boolean86 = node84.hasConsistentReturnUsage();
        boolean boolean87 = node84.hasSideEffects();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node(0, node84);
        com.google.javascript.rhino.head.Node node89 = node88.getLastChild();
        node88.removeChildren();
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(19, node81, node88, 24);
        com.google.javascript.rhino.head.Node node93 = node81.getLastSibling();
        com.google.javascript.rhino.head.Node node94 = node81.getLastSibling();
        node72.addChildrenToBack(node81);
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node(40, node9, node64, node72);
        boolean boolean97 = node96.hasChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "40" + "'", str42, "40");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(scope52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(nodeItor61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "40" + "'", str73, "40");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "40" + "'", str85, "40");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        int int26 = node19.getType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = null;
        java.lang.String str28 = node19.toStringTree(scriptNode27);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = node19.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 40 + "'", int26 == 40);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node9.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = node11.getLastChild();
        java.lang.String str14 = node11.getJsDoc();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = node11.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node16 = nodeIterator15.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        com.google.javascript.rhino.head.Node node21 = node15.getLastSibling();
        node4.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(13, node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(12);
        node35.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(6, node35);
        com.google.javascript.rhino.head.Node node40 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node31, node39, 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node45.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(20, node27, node31, node45);
        com.google.javascript.rhino.head.Node node50 = node27.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node59 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((-1), node21, node27, node59, 3);
        com.google.javascript.rhino.head.Node node62 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(13, node66);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(12);
        node70.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(6, node70);
        com.google.javascript.rhino.head.Node node75 = node74.getLastChild();
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node66, node74, 0);
        boolean boolean78 = node66.hasSideEffects();
        node21.addChildToFront(node66);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int3 = node2.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node2.getExistingIntProp((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment12 = node3.getJsDocNode();
        int int13 = node3.getType();
        node3.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        java.lang.String str25 = node21.getString();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(10, node3, node21, node28, 14);
        java.lang.String str31 = node30.getJsDoc();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(17, node30, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope34 = node30.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(comment12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100, 25);
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = node2.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int3 = node2.getLineno();
        java.lang.String str4 = node2.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "24" + "'", str4, "24");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        node2.putIntProp(5, (int) (short) 10);
        com.google.javascript.rhino.head.Node node9 = node2.setType(0);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = node11.getFirstChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node19.addChildrenToBack(node21);
        com.google.javascript.rhino.head.Node node23 = node21.getLastChild();
        java.lang.String str24 = node21.getJsDoc();
        java.lang.Object obj26 = node21.getProp(0);
        node9.addChildToFront(node21);
        java.lang.Object obj29 = node21.getProp((-1));
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment24 = node15.getJsDocNode();
        node10.addChildToBack(node15);
        boolean boolean26 = node15.hasConsistentReturnUsage();
        node3.putProp((int) (short) 1, (java.lang.Object) node15);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        node38.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope41 = node38.getScope();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) ' ', node38, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator44 = node38.spliterator();
        node38.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        node57.setString("100");
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(5, node3, node38, node57, 17);
        int int64 = node61.getIntProp((int) (byte) -1, (int) (short) -1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(scope41);
        org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12);
        node12.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(6, node12);
        com.google.javascript.rhino.head.Node node17 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node8, node16, 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node22.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(20, node4, node8, node22);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator27 = node8.new NodeIterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = node8.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node29 = nodeIterator28.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str3 = node2.getJsDoc();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.head.Node node13 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) ' ', node8);
        java.lang.String str15 = node8.toString();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean29 = node28.hasChildren();
        node19.addChildrenToFront(node28);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasChildren();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) -1, node28, node32, (int) (short) 10);
        com.google.javascript.rhino.head.Node node37 = node36.getLastChild();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("");
        node46.removeProp(23);
        node42.addChildToFront(node46);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) 'a', node42);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        com.google.javascript.rhino.head.Node node56 = node54.getLastChild();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (short) -1, node42, node52, node54, (int) (short) -1);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 1, node54, 12);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(23);
        node62.removeProp(25);
        boolean boolean65 = node62.hasChildren();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((-1), node37, node54, node62);
        boolean boolean67 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(13, node71);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node(12);
        node75.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(6, node75);
        com.google.javascript.rhino.head.Node node80 = node79.getLastChild();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node71, node79, 0);
        node54.addChildToBack(node82);
        node2.addChildAfter(node8, node82);
        java.lang.Object obj86 = node2.getProp(24);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.Node node3 = node1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node3.setLineno(32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        int int16 = node13.getLineno();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node26 = node18.getFirstChild();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 0, node13, node18, 9);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        node36.removeProp(23);
        node32.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) 'a', node32);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        com.google.javascript.rhino.head.Node node46 = node44.getLastChild();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (short) -1, node32, node42, node44, (int) (short) -1);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        node54.removeProp(23);
        node50.addChildToFront(node54);
        com.google.javascript.rhino.head.Node node58 = node50.getFirstChild();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node58.addChildrenToBack(node60);
        com.google.javascript.rhino.head.Node node62 = node60.getLastChild();
        java.lang.String str63 = node60.getJsDoc();
        java.lang.Object obj65 = node60.getProp(0);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(3, node13, node32, node60);
        com.google.javascript.rhino.head.Node node67 = node60.getLastSibling();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(52, node67, 16);
        node67.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(13, node7);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(7, node7);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node9.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(12);
        node15.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(6, node15);
        com.google.javascript.rhino.head.Node node20 = node19.getLastChild();
        node9.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(97, node3, node9);
        com.google.javascript.rhino.head.Node node23 = node3.getFirstChild();
        boolean boolean24 = node3.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        boolean boolean46 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = node50.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment67 = node58.getJsDocNode();
        node53.addChildToBack(node58);
        java.lang.String str69 = node53.toString();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, node30, node50, node53, 1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        boolean boolean78 = node75.hasSideEffects();
        node73.addChildrenToFront(node75);
        node75.removeChildren();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node50, node75);
        com.google.javascript.rhino.head.ast.Scope scope82 = null;
        node50.setScope(scope82);
        boolean boolean84 = node50.hasSideEffects();
        boolean boolean85 = node50.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(comment67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        boolean boolean51 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(13, node55);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(12);
        node59.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(6, node59);
        com.google.javascript.rhino.head.Node node64 = node63.getLastChild();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node55, node63, 0);
        node38.addChildToBack(node66);
        com.google.javascript.rhino.head.ast.Comment comment68 = node66.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            comment68.setLineno(32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(comment68);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment24 = node15.getJsDocNode();
        node10.addChildToBack(node15);
        boolean boolean26 = node15.hasConsistentReturnUsage();
        node3.putProp((int) (short) 1, (java.lang.Object) node15);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) '#');
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 100, node3, node29, 17);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator32 = node3.spliterator();
        int int35 = node3.getIntProp((int) (byte) 1, 7);
        node3.putIntProp((int) (short) 100, 18);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(5, "");
        int int4 = node3.getType();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = node11.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment20 = node11.getJsDocNode();
        node6.addChildToBack(node11);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor22 = node6.iterator();
        com.google.javascript.rhino.head.ast.Comment comment23 = node6.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator24 = node6.new NodeIterator();
        double double25 = node6.getDouble();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        boolean boolean33 = node30.hasSideEffects();
        node28.addChildrenToFront(node30);
        node30.removeChildren();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("hi!");
        node30.addChildrenToBack(node37);
        node37.setLineno(22);
        boolean boolean41 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("-1");
        node43.removeProp(25);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        int int50 = node47.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = node56.getFirstChild();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node64.addChildrenToBack(node66);
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newString("");
        int int72 = node69.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 10, node64, node69);
        com.google.javascript.rhino.head.Node node75 = node64.setType(18);
        node47.addChildAfter(node53, node75);
        node43.addChildToFront(node75);
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node37, node75);
        node6.addChildrenToBack(node75);
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node(6, node3, node6);
        // The following exception was thrown during execution in test generation
        try {
            node3.labelId(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(comment20);
        org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertNull(comment23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        boolean boolean19 = node16.hasSideEffects();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(0, node16);
        node11.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(9, node11);
        node3.addChildrenToBack(node22);
        java.lang.String str24 = node3.getJsDoc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(9, node2);
        node2.removeProp(4);
        com.google.javascript.rhino.head.Node node17 = node2.setType(23);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(12, 25);
        boolean boolean21 = node20.hasChildren();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean34 = node33.hasChildren();
        node24.addChildrenToFront(node33);
        int int36 = node33.getLineno();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("");
        node42.removeProp(23);
        node38.addChildToFront(node42);
        com.google.javascript.rhino.head.Node node46 = node38.getFirstChild();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (short) 0, node33, node38, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = node38.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node54 = node53.getLastSibling();
        int int55 = node53.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator56 = node53.spliterator();
        node38.putProp((int) '4', (java.lang.Object) node53);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str61 = node60.toString();
        int int62 = node60.getLineno();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment65 = node64.getJsDocNode();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str70 = node69.toString();
        boolean boolean71 = node69.hasConsistentReturnUsage();
        boolean boolean72 = node69.hasSideEffects();
        node67.addChildrenToFront(node69);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(8, node60, node64, node67);
        com.google.javascript.rhino.head.ast.Comment comment75 = null;
        node67.setJsDocNode(comment75);
        node20.addChildBefore(node38, (com.google.javascript.rhino.head.Node) comment75);
        node2.addChildToBack(node38);
        java.lang.String str79 = node2.getJsDoc();
        com.google.javascript.rhino.head.Node node80 = node2.getFirstChild();
        boolean boolean81 = node80.hasSideEffects();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100" + "'", str61, "100");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(comment65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node4, node14, node16, (int) (short) -1);
        java.lang.Object obj22 = node4.getProp(0);
        int int23 = node4.getLineno();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node33 = node25.getFirstChild();
        node33.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope36 = node33.getScope();
        node33.putIntProp(16, 21);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(9, node4, node33, 16);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("");
        node48.removeProp(23);
        node44.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean54 = node53.hasChildren();
        node44.addChildrenToFront(node53);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str58 = node57.toString();
        boolean boolean59 = node57.hasChildren();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) (short) -1, node53, node57, (int) (short) 10);
        com.google.javascript.rhino.head.Node node62 = node61.getLastChild();
        com.google.javascript.rhino.head.Node node63 = node61.getNext();
        com.google.javascript.rhino.head.Node node64 = null;
        // The following exception was thrown during execution in test generation
        try {
            node33.replaceChildAfter(node63, node64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(scope36);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1" + "'", str58, "-1");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        int int5 = node2.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = node11.getFirstChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node19.addChildrenToBack(node21);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        int int27 = node24.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 10, node19, node24);
        com.google.javascript.rhino.head.Node node30 = node19.setType(18);
        node2.addChildAfter(node8, node30);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean34 = node33.hasSideEffects();
        node8.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("");
        node42.removeProp(23);
        node38.addChildToFront(node42);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean48 = node47.hasChildren();
        node38.addChildrenToFront(node47);
        int int50 = node47.getLineno();
        int int51 = node47.getType();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node47);
        node8.addChildrenToFront(node52);
        com.google.javascript.rhino.head.ast.Comment comment54 = node52.getJsDocNode();
        int int57 = node52.getIntProp(11, 100);
        boolean boolean58 = node52.hasSideEffects();
        java.lang.Object obj60 = node52.getProp(5);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(22, node52);
        com.google.javascript.rhino.head.ast.Comment comment62 = node52.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj64 = comment62.getProp(21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 40 + "'", int51 == 40);
        org.junit.Assert.assertNull(comment54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(comment62);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.ast.Comment comment7 = null;
        node3.setJsDocNode(comment7);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        boolean boolean14 = node11.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(0, node11);
        node6.addChildrenToBack(node15);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(9, node6);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(13, node21);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(7, node21);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) 'a', node3, node17, node21, (int) (short) 1);
        boolean boolean26 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = node3.setType(3);
        node3.removeChildren();
        node3.setDouble((-1.0d));
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        boolean boolean39 = node36.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(0, node36);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        node47.removeProp(23);
        node43.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean53 = node52.hasChildren();
        node43.addChildrenToFront(node52);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasChildren();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) -1, node52, node56, (int) (short) 10);
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node36, node56, node63, (int) (short) 0);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(14, node56, 0);
        com.google.javascript.rhino.head.Node node68 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(13, node3, node56, node68, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1" + "'", str57, "-1");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment11 = node2.getJsDocNode();
        int int12 = node2.getType();
        node2.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        java.lang.String str24 = node20.getString();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(10, node2, node20, node27, 14);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor30 = node2.iterator();
        com.google.javascript.rhino.head.Node node31 = node2.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node31.setDouble((double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeItor30);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.ast.Scope scope83 = null;
        node51.setScope(scope83);
        boolean boolean85 = node51.hasSideEffects();
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(13, node51);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = node86.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node3, node23, node30, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment33 = node3.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            comment33.setString("12");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(comment33);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(9, "-1");
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(13, node6);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(7, node6);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node8.addChildToFront(node10);
        com.google.javascript.rhino.head.ast.Comment comment12 = null;
        node8.setJsDocNode(comment12);
        com.google.javascript.rhino.head.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildAfter(node8, node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) 'a', node2);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        node22.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope25 = node22.getScope();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, 2);
        com.google.javascript.rhino.head.Node node28 = node22.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) ' ', node28, node31);
        node2.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node35 = node33.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = null;
        java.lang.String str37 = node35.toStringTree(scriptNode36);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment12 = node3.getJsDocNode();
        int int13 = node3.getType();
        node3.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        java.lang.String str25 = node21.getString();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(10, node3, node21, node28, 14);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int34 = node33.getType();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        boolean boolean41 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(0, node38);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean55 = node54.hasChildren();
        node45.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasChildren();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) -1, node54, node58, (int) (short) 10);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node38, node58, node65, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment68 = null;
        node58.setJsDocNode(comment68);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str73 = node72.toString();
        int int74 = node72.getLineno();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment77 = node76.getJsDocNode();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str82 = node81.toString();
        boolean boolean83 = node81.hasConsistentReturnUsage();
        boolean boolean84 = node81.hasSideEffects();
        node79.addChildrenToFront(node81);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(8, node72, node76, node79);
        node58.addChildrenToFront(node76);
        node76.putIntProp((int) (short) 0, (int) (short) 10);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(25, node3, node33, node76);
        int int92 = node33.getLineno();
        java.lang.Class<?> wildcardClass93 = node33.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(comment12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 24 + "'", int34 == 24);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1" + "'", str59, "-1");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "100" + "'", str73, "100");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(comment77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "40" + "'", str82, "40");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node9.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = node9.getLastChild();
        com.google.javascript.rhino.head.Node node14 = node9.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node14.labelId(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment24 = node15.getJsDocNode();
        node10.addChildToBack(node15);
        boolean boolean26 = node15.hasConsistentReturnUsage();
        node3.putProp((int) (short) 1, (java.lang.Object) node15);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        node38.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope41 = node38.getScope();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) ' ', node38, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator44 = node38.spliterator();
        node38.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        node57.setString("100");
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(5, node3, node38, node57, 17);
        // The following exception was thrown during execution in test generation
        try {
            node61.labelId((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(scope41);
        org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj3 = node1.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        int int7 = node1.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(13, node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(7, node11);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node13.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(12);
        node19.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(6, node19);
        com.google.javascript.rhino.head.Node node24 = node23.getLastChild();
        node13.addChildToFront(node23);
        node1.addChildToFront(node23);
        boolean boolean27 = node23.hasConsistentReturnUsage();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope28 = node23.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node5.getLastChild();
        node5.setString("");
        com.google.javascript.rhino.head.Node node13 = node5.setType(25);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(97);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        boolean boolean24 = node21.hasSideEffects();
        node19.addChildrenToFront(node21);
        node21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1), node17, node21, 10);
        node17.putIntProp(26, 23);
        node5.putProp(0, (java.lang.Object) 26);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment11 = node2.getJsDocNode();
        int int12 = node2.getType();
        node2.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        java.lang.String str24 = node20.getString();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(10, node2, node20, node27, 14);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor30 = node2.iterator();
        com.google.javascript.rhino.head.Node node31 = null;
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(4);
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildBefore(node31, node33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeItor30);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(10, "100");
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(13, node6);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(7, node6);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node8.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(12);
        node14.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(6, node14);
        com.google.javascript.rhino.head.Node node19 = node18.getLastChild();
        node8.addChildToFront(node18);
        node2.addChildToFront(node8);
        java.lang.Object obj23 = node2.getProp(21);
        node2.removeChildren();
        int int25 = node2.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        node21.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(13, node21);
        int int29 = node21.getIntProp(40, (int) (byte) 1);
        com.google.javascript.rhino.head.Node node30 = node21.getNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean47 = node46.hasChildren();
        node37.addChildrenToFront(node46);
        int int49 = node46.getLineno();
        int int50 = node46.getType();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node46);
        node7.addChildrenToFront(node51);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator53 = node7.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator53.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        int int7 = node2.getLineno();
        com.google.javascript.rhino.head.Node node8 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenToBack(node8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        node1.removeProp(23);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(0, node6);
        node1.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node15 = node14.getLastSibling();
        node10.addChildrenToBack(node15);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = node10.new NodeIterator();
        com.google.javascript.rhino.head.Node node18 = nodeIterator17.next();
        com.google.javascript.rhino.head.Node node19 = nodeIterator17.next();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node20 = nodeIterator17.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 10, 100);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator17 = node11.spliterator();
        node11.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        boolean boolean27 = node24.hasSideEffects();
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean41 = node40.hasChildren();
        node31.addChildrenToFront(node40);
        int int43 = node40.getLineno();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) 0, node40, node45, 9);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 100, node11, node24, node40, 25);
        node11.removeProp(100);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor60 = node11.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(nodeSpliterator17);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeItor60);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node2.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        boolean boolean17 = node14.hasSideEffects();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node27 = node19.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment28 = node19.getJsDocNode();
        node14.addChildToBack(node19);
        boolean boolean30 = node19.hasConsistentReturnUsage();
        node7.putProp((int) (short) 1, (java.lang.Object) node19);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) '#', node2, node19);
        java.lang.Object obj34 = node19.getProp(1);
        node19.putIntProp(100, (int) (short) 10);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(comment28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        int int10 = node4.getLineno();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node26.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 10, node4, node21, node26, 0);
        com.google.javascript.rhino.head.ast.Comment comment31 = null;
        node21.setJsDocNode(comment31);
        com.google.javascript.rhino.head.Node node33 = node21.getLastChild();
        com.google.javascript.rhino.head.ast.Comment comment34 = node21.getJsDocNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(comment34);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(9, node3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(11, node14, (int) (byte) 0);
        java.lang.Object obj18 = node16.getProp(17);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        boolean boolean24 = node21.hasSideEffects();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(0, node21);
        int int26 = node21.getLineno();
        node21.removeProp(0);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        node36.removeProp(23);
        node32.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean42 = node41.hasChildren();
        node32.addChildrenToFront(node41);
        int int44 = node41.getLineno();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = node46.getFirstChild();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (short) 0, node41, node46, 9);
        boolean boolean57 = node41.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        boolean boolean64 = node61.hasSideEffects();
        node59.addChildrenToFront(node61);
        node61.removeChildren();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newString("hi!");
        node61.addChildrenToBack(node68);
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str72 = node71.toString();
        boolean boolean73 = node71.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newString("");
        node75.removeProp(23);
        node71.addChildToFront(node75);
        com.google.javascript.rhino.head.Node node79 = node71.getFirstChild();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node79.addChildrenToBack(node81);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node41, node61, node81);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator84 = node83.new NodeIterator();
        int int85 = node83.getLineno();
        node21.addChildToBack(node83);
        node16.addChildToBack(node21);
        boolean boolean88 = node16.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "40" + "'", str72, "40");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator14 = node11.new NodeIterator();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        node29.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope32 = node29.getScope();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) ' ', node29, 2);
        com.google.javascript.rhino.head.Node node35 = node29.getLastSibling();
        node18.addChildToFront(node35);
        node11.addChildrenToFront(node18);
        int int40 = node18.getIntProp(0, (int) ' ');
        int int43 = node18.getIntProp(14, 6);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(18, node18, (int) (short) 10);
        node45.removeProp(23);
        com.google.javascript.rhino.head.ast.Comment comment48 = node45.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = comment48.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(scope32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertNull(comment48);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        boolean boolean25 = node22.hasSideEffects();
        node20.addChildrenToFront(node22);
        node22.removeChildren();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("hi!");
        node22.addChildrenToBack(node29);
        int int33 = node29.getIntProp(0, 22);
        node12.putProp(15, (java.lang.Object) 22);
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, 2);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(1, node36);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        node43.removeProp(23);
        node39.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = node39.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment48 = node39.getJsDocNode();
        int int49 = node39.getType();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator50 = node39.new NodeIterator();
        java.lang.String str51 = node39.toString();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(17, (int) (short) 0);
        node37.addChildAfter(node39, node54);
        int int58 = node37.getIntProp(8, 22);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(comment48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 22 + "'", int58 == 22);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(9, node2);
        node2.removeProp(4);
        com.google.javascript.rhino.head.Node node17 = node2.setType(23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = null;
        java.lang.String str19 = node17.toStringTree(scriptNode18);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor20 = node17.iterator();
        com.google.javascript.rhino.head.ast.Scope scope21 = null;
        node17.setScope(scope21);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(nodeItor20);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        node1.addChildrenToBack(node12);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = null;
        java.lang.String str16 = node1.toStringTree(scriptNode15);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        boolean boolean35 = node32.hasSideEffects();
        node30.addChildrenToFront(node32);
        node32.removeChildren();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        node32.addChildrenToBack(node39);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("");
        node46.removeProp(23);
        node42.addChildToFront(node46);
        com.google.javascript.rhino.head.Node node50 = node42.getFirstChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node50.addChildrenToBack(node52);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node12, node32, node52);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = node54.new NodeIterator();
        com.google.javascript.rhino.head.Node node56 = nodeIterator55.next();
        boolean boolean57 = nodeIterator55.hasNext();
        nodeIterator55.remove();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        com.google.javascript.rhino.head.Node node35 = node7.getNext();
        boolean boolean36 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(40);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        boolean boolean51 = node48.hasSideEffects();
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.head.Node node53 = node48.getLastSibling();
        int int54 = node48.getLineno();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean66 = node65.hasChildren();
        node56.addChildrenToFront(node65);
        int int68 = node65.getLineno();
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node70.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 10, node48, node65, node70, 0);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node78 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str79 = node78.toString();
        boolean boolean80 = node78.hasConsistentReturnUsage();
        boolean boolean81 = node78.hasSideEffects();
        node76.addChildrenToFront(node78);
        com.google.javascript.rhino.head.Node node84 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str85 = node84.toString();
        boolean boolean86 = node84.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node88 = com.google.javascript.rhino.head.Node.newString("");
        node88.removeProp(23);
        node84.addChildToFront(node88);
        com.google.javascript.rhino.head.Node node92 = node84.getFirstChild();
        com.google.javascript.rhino.head.Node node94 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node92.addChildrenToBack(node94);
        node78.addChildrenToBack(node94);
        com.google.javascript.rhino.head.Node node97 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node41, node65, node94);
        node38.addChildrenToBack(node41);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node99 = node7.getChildBefore(node38);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "40" + "'", str79, "40");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "40" + "'", str85, "40");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean3 = node2.hasChildren();
        java.lang.String str4 = node2.getJsDoc();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(13, node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(12);
        node17.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(6, node17);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node13, node21, 0);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node27.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(20, node9, node13, node27);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(13, node39);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(7, node39);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node41.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(12);
        node47.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(6, node47);
        com.google.javascript.rhino.head.Node node52 = node51.getLastChild();
        node41.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(97, node35, node41);
        node31.addChildrenToBack(node54);
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        int int60 = node57.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newString("");
        node70.removeProp(23);
        node66.addChildToFront(node70);
        com.google.javascript.rhino.head.Node node74 = node66.getFirstChild();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node74.addChildrenToBack(node76);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("");
        int int82 = node79.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((int) (short) 10, node74, node79);
        com.google.javascript.rhino.head.Node node85 = node74.setType(18);
        node57.addChildAfter(node63, node85);
        node57.putIntProp(32, 26);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(15, node2, node54, node57, 1);
        int int92 = node57.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 41 + "'", int92 == 41);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = node4.new NodeIterator();
        node4.setLineno(13);
        boolean boolean8 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasChildren();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) -1, node21, node25, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = node29.getLastChild();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node35);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        com.google.javascript.rhino.head.Node node49 = node47.getLastChild();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) -1, node35, node45, node47, (int) (short) -1);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 1, node47, 12);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(23);
        node55.removeProp(25);
        boolean boolean58 = node55.hasChildren();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((-1), node30, node47, node55);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        node61.addChildToFront(node65);
        com.google.javascript.rhino.head.Node node69 = node61.getFirstChild();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node69.addChildrenToBack(node71);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(19, node4, node30, node69, 6);
        com.google.javascript.rhino.head.Node node75 = node69.getFirstChild();
        java.lang.Class<?> wildcardClass76 = node75.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        java.lang.Class<?> wildcardClass6 = node5.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node1.setJsDocNode(comment3);
        node1.setLineno((int) (short) 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = node1.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        boolean boolean5 = nodeIterator4.hasNext();
        boolean boolean6 = nodeIterator4.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj3 = node1.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        int int7 = node1.getIntProp((int) (byte) -1, 17);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = node1.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(97, "");
        com.google.javascript.rhino.head.Node node3 = node2.getNext();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        boolean boolean12 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = node3.getFirstChild();
        boolean boolean14 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = node3.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator15.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 5);
        // The following exception was thrown during execution in test generation
        try {
            node1.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        boolean boolean26 = node19.hasSideEffects();
        boolean boolean27 = node19.hasChildren();
        node19.setLineno((int) (short) 1);
        double double30 = node19.getDouble();
        node19.setLineno(100);
        boolean boolean33 = node19.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 32.0d + "'", double30 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node3.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node13.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        boolean boolean54 = node51.hasSideEffects();
        node49.addChildrenToFront(node51);
        node51.removeChildren();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString("hi!");
        node51.addChildrenToBack(node58);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        node61.addChildToFront(node65);
        com.google.javascript.rhino.head.Node node69 = node61.getFirstChild();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node69.addChildrenToBack(node71);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node31, node51, node71);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(9, node31);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) 13);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node(12, node13, node74, node76);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str82 = node81.toString();
        boolean boolean83 = node81.hasConsistentReturnUsage();
        boolean boolean84 = node81.hasSideEffects();
        node79.addChildrenToFront(node81);
        com.google.javascript.rhino.head.Node node86 = node81.getLastSibling();
        int int87 = node81.getLineno();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(100, node10, node76, node81, (int) (short) 0);
        int int92 = node89.getIntProp(7, 13);
        com.google.javascript.rhino.head.Node node94 = com.google.javascript.rhino.head.Node.newString("22");
        node89.addChildToFront(node94);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node96 = node7.getChildBefore(node94);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "40" + "'", str82, "40");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 13 + "'", int92 == 13);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2, node5);
        com.google.javascript.rhino.head.Node node7 = node6.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = node7.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = node8.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(13, node4);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(12);
        node8.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(6, node8);
        com.google.javascript.rhino.head.Node node13 = node12.getLastChild();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node4, node12, 0);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        node12.addChildrenToFront(node17);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        boolean boolean25 = node22.hasSideEffects();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(0, node22);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean39 = node38.hasChildren();
        node29.addChildrenToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasChildren();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) -1, node38, node42, (int) (short) 10);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node22, node42, node49, (int) (short) 0);
        com.google.javascript.rhino.head.Node node53 = node51.setType(16);
        com.google.javascript.rhino.head.Node node54 = node51.getLastSibling();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(21, node12, node54, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = node56.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(9, node3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(11, node14, (int) (byte) 0);
        java.lang.Object obj18 = node16.getProp(17);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = node16.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        int int19 = node16.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 10, node11, node16);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj24 = node22.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor25 = node22.iterator();
        int int28 = node22.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(13, node32);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node(7, node32);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node34.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(12);
        node40.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(6, node40);
        com.google.javascript.rhino.head.Node node45 = node44.getLastChild();
        node34.addChildToFront(node44);
        node22.addChildToFront(node44);
        int int48 = node22.getType();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        boolean boolean55 = node52.hasSideEffects();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(0, node52);
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean69 = node68.hasChildren();
        node59.addChildrenToFront(node68);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str73 = node72.toString();
        boolean boolean74 = node72.hasChildren();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) (short) -1, node68, node72, (int) (short) 10);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node52, node72, node79, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment82 = null;
        node81.setJsDocNode(comment82);
        com.google.javascript.rhino.head.Node node84 = node81.getLastChild();
        node84.setString("1");
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node((int) ' ', node16, node22, node84);
        boolean boolean88 = node22.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(nodeItor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 17 + "'", int28 == 17);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 40 + "'", int48 == 40);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-1" + "'", str73, "-1");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        node11.setLineno(22);
        boolean boolean15 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("-1");
        node17.removeProp(25);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        int int24 = node21.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node38.addChildrenToBack(node40);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        int int46 = node43.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) 10, node38, node43);
        com.google.javascript.rhino.head.Node node49 = node38.setType(18);
        node21.addChildAfter(node27, node49);
        node17.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node11, node49);
        node49.setString("11");
        java.lang.Class<?> wildcardClass55 = node49.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(12);
        node19.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(6, node19);
        com.google.javascript.rhino.head.Node node24 = node23.getLastChild();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasChildren();
        node28.addChildrenToFront(node37);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasChildren();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) -1, node37, node41, (int) (short) 10);
        com.google.javascript.rhino.head.Node node46 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) 'a', node51);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) -1, node51, node61, node63, (int) (short) -1);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (short) 1, node63, 12);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(23);
        node71.removeProp(25);
        boolean boolean74 = node71.hasChildren();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-1), node46, node63, node71);
        node24.addChildToBack(node46);
        node10.addChildToBack(node24);
        boolean boolean78 = node24.hasChildren();
        com.google.javascript.rhino.head.Node node79 = node24.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            int int80 = node24.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "40" + "'", str64, "40");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        node30.setString("100");
        com.google.javascript.rhino.head.Node node33 = node30.getLastSibling();
        node19.putProp(10, (java.lang.Object) node33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = node19.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = node2.new NodeIterator();
        boolean boolean4 = nodeIterator3.hasNext();
        boolean boolean5 = nodeIterator3.hasNext();
        boolean boolean6 = nodeIterator3.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator3.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        node17.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj24 = node22.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor25 = node22.iterator();
        int int28 = node22.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        node36.removeProp(23);
        node32.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean42 = node41.hasChildren();
        node32.addChildrenToFront(node41);
        int int44 = node41.getLineno();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = node46.getFirstChild();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (short) 0, node41, node46, 9);
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString("1");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor59 = node58.iterator();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(21, node56, node58, (int) '4');
        com.google.javascript.rhino.head.Node node63 = node61.setType(20);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((-1), node17, node22, node61);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        boolean boolean70 = node68.hasConsistentReturnUsage();
        boolean boolean71 = node68.hasSideEffects();
        node66.addChildrenToFront(node68);
        node68.removeChildren();
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newString("hi!");
        node68.addChildrenToBack(node75);
        com.google.javascript.rhino.head.Node node78 = node68.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node80 = node78.setType(23);
        double double81 = node78.getDouble();
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node(2, node64, node78, 10);
        com.google.javascript.rhino.head.ast.Scope scope84 = null;
        // The following exception was thrown during execution in test generation
        try {
            node83.setScope(scope84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(nodeItor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 17 + "'", int28 == 17);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeItor59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 32.0d + "'", double81 == 32.0d);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator16 = node10.spliterator();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str20 = node19.toString();
        com.google.javascript.rhino.head.ast.Comment comment21 = node19.getJsDocNode();
        node10.putProp((int) '#', (java.lang.Object) node19);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str32 = node31.toString();
        com.google.javascript.rhino.head.Node node33 = node31.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean46 = node45.hasChildren();
        node36.addChildrenToFront(node45);
        int int48 = node45.getLineno();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        node54.removeProp(23);
        node50.addChildToFront(node54);
        com.google.javascript.rhino.head.Node node58 = node50.getFirstChild();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 0, node45, node50, 9);
        node31.addChildrenToFront(node60);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(100, node26, node29, node31, (int) ' ');
        com.google.javascript.rhino.head.Node node64 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(21, node64);
        node10.addChildToFront(node65);
        node10.setString("");
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newString(6, "52");
        node10.addChildrenToFront(node71);
        // The following exception was thrown during execution in test generation
        try {
            node71.setDouble((double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = null;
        java.lang.String str3 = node1.toStringTree(scriptNode2);
        com.google.javascript.rhino.head.Node node4 = node1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope5 = node4.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node14 = node4.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node16 = node14.setType(23);
        double double17 = node16.getDouble();
        com.google.javascript.rhino.head.Node node18 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node18);
        com.google.javascript.rhino.head.Node node20 = node18.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node18.setString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12);
        node12.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(6, node12);
        com.google.javascript.rhino.head.Node node17 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node8, node16, 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node22.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(20, node4, node8, node22);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node4.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node30 = node4.getNext();
        int int33 = node30.getIntProp(14, 21);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21 + "'", int33 == 21);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator6 = node5.new NodeIterator();
        node5.setLineno(13);
        boolean boolean9 = node5.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean23 = node22.hasChildren();
        node13.addChildrenToFront(node22);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasChildren();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) -1, node22, node26, (int) (short) 10);
        com.google.javascript.rhino.head.Node node31 = node30.getLastChild();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) 'a', node36);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        com.google.javascript.rhino.head.Node node50 = node48.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) -1, node36, node46, node48, (int) (short) -1);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (short) 1, node48, 12);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(23);
        node56.removeProp(25);
        boolean boolean59 = node56.hasChildren();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((-1), node31, node48, node56);
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str63 = node62.toString();
        boolean boolean64 = node62.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("");
        node66.removeProp(23);
        node62.addChildToFront(node66);
        com.google.javascript.rhino.head.Node node70 = node62.getFirstChild();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node70.addChildrenToBack(node72);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node(19, node5, node31, node70, 6);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (short) -1, node75, 8);
        com.google.javascript.rhino.head.Node node78 = node75.getFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1" + "'", str27, "-1");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "40" + "'", str63, "40");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        int int10 = node4.getLineno();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node26.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 10, node4, node21, node26, 0);
        com.google.javascript.rhino.head.ast.Comment comment31 = null;
        node21.setJsDocNode(comment31);
        com.google.javascript.rhino.head.Node node33 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node34 = node21.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node34.setLineno(15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        com.google.javascript.rhino.head.ast.Scope scope2 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.setScope(scope2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean11 = node10.hasChildren();
        node1.addChildrenToFront(node10);
        boolean boolean13 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator14 = node10.new NodeIterator();
        boolean boolean15 = nodeIterator14.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator14.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator6 = node5.new NodeIterator();
        node5.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator9 = node5.spliterator();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(97, node5);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(13, node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(7, node14);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node16.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node20 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node10, node21);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = node22.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node13 = node3.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node15 = node13.setType(23);
        double double16 = node15.getDouble();
        com.google.javascript.rhino.head.Node node17 = node15.getLastSibling();
        node17.removeProp((int) (short) -1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 32.0d + "'", double16 == 32.0d);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean6 = node5.hasSideEffects();
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(12, 25);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12, 25);
        boolean boolean13 = node12.hasChildren();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean26 = node25.hasChildren();
        node16.addChildrenToFront(node25);
        int int28 = node25.getLineno();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 0, node25, node30, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = node30.new NodeIterator();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node46 = node45.getLastSibling();
        int int47 = node45.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator48 = node45.spliterator();
        node30.putProp((int) '4', (java.lang.Object) node45);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str53 = node52.toString();
        int int54 = node52.getLineno();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment57 = node56.getJsDocNode();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        boolean boolean64 = node61.hasSideEffects();
        node59.addChildrenToFront(node61);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(8, node52, node56, node59);
        com.google.javascript.rhino.head.ast.Comment comment67 = null;
        node59.setJsDocNode(comment67);
        node12.addChildBefore(node30, (com.google.javascript.rhino.head.Node) comment67);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str74 = node73.toString();
        boolean boolean75 = node73.hasConsistentReturnUsage();
        boolean boolean76 = node73.hasSideEffects();
        node71.addChildrenToFront(node73);
        node73.removeChildren();
        com.google.javascript.rhino.head.Node node80 = com.google.javascript.rhino.head.Node.newString("hi!");
        node73.addChildrenToBack(node80);
        com.google.javascript.rhino.head.Node node82 = node73.getFirstChild();
        java.lang.String str83 = node82.getJsDoc();
        int int86 = node82.getIntProp(12, 8);
        int int87 = node82.getLineno();
        node9.addChildAfter(node12, node82);
        com.google.javascript.rhino.head.Node node89 = node82.getNext();
        com.google.javascript.rhino.head.Node node92 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node95 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node(0, node92, node95);
        node89.addChildrenToBack(node96);
        com.google.javascript.rhino.head.Node node99 = new com.google.javascript.rhino.head.Node(97, node3, node5, node96, (int) (short) 1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(comment57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "40" + "'", str74, "40");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = node32.new NodeIterator();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment49 = node40.getJsDocNode();
        node35.addChildToBack(node40);
        java.lang.String str51 = node35.toString();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, node12, node32, node35, 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator54 = node35.new NodeIterator();
        boolean boolean55 = nodeIterator54.hasNext();
        com.google.javascript.rhino.head.Node node56 = nodeIterator54.next();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node57 = nodeIterator54.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(comment49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str3 = node2.toString();
        int int4 = node2.getLineno();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment7 = node6.getJsDocNode();
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        boolean boolean14 = node11.hasSideEffects();
        node9.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(8, node2, node6, node9);
        com.google.javascript.rhino.head.ast.Comment comment17 = null;
        node16.setJsDocNode(comment17);
        com.google.javascript.rhino.head.Node node20 = node16.setType(24);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100" + "'", str3, "100");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(comment7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment11 = node2.getJsDocNode();
        int int12 = node2.getType();
        node2.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        java.lang.String str24 = node20.getString();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(10, node2, node20, node27, 14);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor30 = node2.iterator();
        com.google.javascript.rhino.head.Node node31 = node2.getLastChild();
        com.google.javascript.rhino.head.ast.Scope scope32 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.setScope(scope32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeItor30);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 10);
        com.google.javascript.rhino.head.ast.Comment comment2 = node1.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(comment2);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        java.lang.Object obj3 = node1.getProp(22);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = null;
        java.lang.String str5 = node1.toStringTree(scriptNode4);
        // The following exception was thrown during execution in test generation
        try {
            node1.labelId(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.ast.Comment comment5 = node4.getJsDocNode();
        java.lang.String str6 = node4.getJsDoc();
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(40, 8);
        node2.addChildAfter(node4, node9);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean24 = node23.hasChildren();
        node14.addChildrenToFront(node23);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasChildren();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) -1, node23, node27, (int) (short) 10);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(0, node23, node33, (-1));
        com.google.javascript.rhino.head.Node node37 = node35.setType((int) (byte) 0);
        node9.addChildrenToFront(node37);
        // The following exception was thrown during execution in test generation
        try {
            node37.setDouble((double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(comment5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1" + "'", str28, "-1");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(5, 11);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        boolean boolean21 = node20.hasChildren();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean35 = node34.hasChildren();
        node25.addChildrenToFront(node34);
        int int37 = node34.getLineno();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        node43.removeProp(23);
        node39.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = node39.getFirstChild();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, node34, node39, 9);
        boolean boolean50 = node34.hasSideEffects();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node54 = node53.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = node54.new NodeIterator();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str58 = node57.toString();
        boolean boolean59 = node57.hasConsistentReturnUsage();
        boolean boolean60 = node57.hasSideEffects();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str63 = node62.toString();
        boolean boolean64 = node62.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("");
        node66.removeProp(23);
        node62.addChildToFront(node66);
        com.google.javascript.rhino.head.Node node70 = node62.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment71 = node62.getJsDocNode();
        node57.addChildToBack(node62);
        java.lang.String str73 = node57.toString();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node(0, node34, node54, node57, 1);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str80 = node79.toString();
        boolean boolean81 = node79.hasConsistentReturnUsage();
        boolean boolean82 = node79.hasSideEffects();
        node77.addChildrenToFront(node79);
        node79.removeChildren();
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node((int) (short) 0, node20, node54, node79);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(19, node3, node85);
        // The following exception was thrown during execution in test generation
        try {
            node3.labelId(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "40" + "'", str58, "40");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "40" + "'", str63, "40");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(comment71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "40" + "'", str73, "40");
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "40" + "'", str80, "40");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        com.google.javascript.rhino.head.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) -1, node1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        boolean boolean46 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = node50.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment67 = node58.getJsDocNode();
        node53.addChildToBack(node58);
        java.lang.String str69 = node53.toString();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, node30, node50, node53, 1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        boolean boolean78 = node75.hasSideEffects();
        node73.addChildrenToFront(node75);
        node75.removeChildren();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node50, node75);
        node75.setDouble((double) 11);
        java.lang.String str84 = node75.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = null;
        java.lang.String str86 = node75.toStringTree(scriptNode85);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope87 = node75.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(comment67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "40" + "'", str84, "40");
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        java.lang.Object obj21 = node3.getProp(0);
        java.lang.String str22 = node3.getJsDoc();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator23 = node3.spliterator();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node28 = node26.setType((int) (short) 10);
        node3.addChildToBack(node26);
        java.lang.String str30 = node3.getJsDoc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        com.google.javascript.rhino.head.Node node21 = node15.getLastSibling();
        node4.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(13, node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(12);
        node35.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(6, node35);
        com.google.javascript.rhino.head.Node node40 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node31, node39, 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node45.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(20, node27, node31, node45);
        com.google.javascript.rhino.head.Node node50 = node27.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node59 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((-1), node21, node27, node59, 3);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = node61.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(0, node4);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        boolean boolean14 = node11.hasSideEffects();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment25 = node16.getJsDocNode();
        node11.addChildToBack(node16);
        boolean boolean27 = node16.hasConsistentReturnUsage();
        node4.putProp((int) (short) 1, (java.lang.Object) node16);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) '#');
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 100, node4, node30, 17);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator33 = node4.spliterator();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        boolean boolean41 = node38.hasSideEffects();
        node36.addChildrenToFront(node38);
        node38.removeChildren();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("hi!");
        node38.addChildrenToBack(node45);
        node45.setLineno(22);
        boolean boolean49 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("-1");
        node51.removeProp(25);
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        int int58 = node55.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        boolean boolean66 = node64.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newString("");
        node68.removeProp(23);
        node64.addChildToFront(node68);
        com.google.javascript.rhino.head.Node node72 = node64.getFirstChild();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node72.addChildrenToBack(node74);
        com.google.javascript.rhino.head.Node node77 = com.google.javascript.rhino.head.Node.newString("");
        int int80 = node77.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 10, node72, node77);
        com.google.javascript.rhino.head.Node node83 = node72.setType(18);
        node55.addChildAfter(node61, node83);
        node51.addChildToFront(node83);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node45, node83);
        com.google.javascript.rhino.head.Node node87 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node((int) (byte) 100, 22);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(6, node4, node87, node90, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(comment25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node87);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(9, node3);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) '#', node14);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        node17.addChildrenToFront(node19);
        node19.removeChildren();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node14.addChildAfter(node19, node26);
        com.google.javascript.rhino.head.Node node28 = node26.getNext();
        int int29 = node26.getType();
        com.google.javascript.rhino.head.Node node30 = null;
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        boolean boolean36 = node33.hasSideEffects();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(0, node33);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        boolean boolean43 = node40.hasSideEffects();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str46 = node45.toString();
        boolean boolean47 = node45.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString("");
        node49.removeProp(23);
        node45.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node53 = node45.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment54 = node45.getJsDocNode();
        node40.addChildToBack(node45);
        boolean boolean56 = node45.hasConsistentReturnUsage();
        node33.putProp((int) (short) 1, (java.lang.Object) node45);
        com.google.javascript.rhino.head.ast.Comment comment58 = null;
        node45.setJsDocNode(comment58);
        // The following exception was thrown during execution in test generation
        try {
            node26.replaceChildAfter(node30, (com.google.javascript.rhino.head.Node) comment58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "40" + "'", str46, "40");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(comment54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0.0f);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(7);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(22, node2, node4);
        node2.setLineno(6);
        com.google.javascript.rhino.head.Node node8 = node2.getNext();
        com.google.javascript.rhino.head.Node node9 = node2.getNext();
        node2.putIntProp(5, (int) (short) 100);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(97, (int) (byte) 100);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node9.getFirstChild();
        node17.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope20 = node17.getScope();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) ' ', node17, 2);
        boolean boolean23 = node22.hasChildren();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        boolean boolean29 = node26.hasSideEffects();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(0, node26);
        int int31 = node26.getLineno();
        node22.addChildToFront(node26);
        int int33 = node26.getType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = null;
        java.lang.String str35 = node26.toStringTree(scriptNode34);
        node2.addChildBefore(node6, (com.google.javascript.rhino.head.Node) scriptNode34);
        com.google.javascript.rhino.head.Node node37 = node6.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node39 = node37.setType(7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1" + "'", str3, "1");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 40 + "'", int33 == 40);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.head.Node node9 = node4.getLastSibling();
        int int10 = node4.getLineno();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node26.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 10, node4, node21, node26, 0);
        com.google.javascript.rhino.head.ast.Comment comment31 = null;
        node21.setJsDocNode(comment31);
        com.google.javascript.rhino.head.ast.Scope scope33 = null;
        // The following exception was thrown during execution in test generation
        try {
            node21.setScope(scope33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(25, 4);
        java.lang.String str3 = node2.getJsDoc();
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(19);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(97);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        node6.addChildrenToFront(node8);
        node8.removeChildren();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((-1), node4, node8, 10);
        double double16 = node8.getDouble();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node21 = node19.setType((int) (short) 10);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        com.google.javascript.rhino.head.ast.Comment comment25 = node23.getJsDocNode();
        com.google.javascript.rhino.head.ast.Comment comment26 = node23.getJsDocNode();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        node23.addChildToBack(node28);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str35 = node34.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = null;
        java.lang.String str37 = node34.toStringTree(scriptNode36);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString(24, "100");
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node(23, 6);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, node34, node40, node43, 6);
        node21.addChildAfter(node23, node43);
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChildAfter(node8, node43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 32.0d + "'", double16 == 32.0d);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertNull(comment25);
        org.junit.Assert.assertNull(comment26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1" + "'", str35, "-1");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(node40);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(20, "11");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasChildren();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        node8.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node16 = node8.getFirstChild();
        node16.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope19 = node16.getScope();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) ' ', node16, 2);
        com.google.javascript.rhino.head.Node node22 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node26 = node25.getLastSibling();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) ' ', node22, node25);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor28 = node25.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = node25.new NodeIterator();
        node2.addChildrenToBack(node25);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(26, node2);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = node31.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1" + "'", str3, "-1");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(scope19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeItor28);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        int int14 = node11.getLineno();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, node11, node16, 9);
        node16.putIntProp(11, 26);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node34 = node33.getLastSibling();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        boolean boolean41 = node38.hasSideEffects();
        node36.addChildrenToFront(node38);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(26, node33, node36, 20);
        int int45 = node36.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node46 = node16.getChildBefore(node36);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        int int19 = node16.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 10, node11, node16);
        com.google.javascript.rhino.head.Node node21 = node11.getNext();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        boolean boolean31 = node28.hasSideEffects();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(0, node28);
        node23.addChildrenToBack(node32);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node37 = node36.getLastSibling();
        node32.addChildrenToBack(node37);
        node21.addChildToBack(node32);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString(10, "100");
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(13, node46);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(7, node46);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node48.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(12);
        node54.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(6, node54);
        com.google.javascript.rhino.head.Node node59 = node58.getLastChild();
        node48.addChildToFront(node58);
        node42.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str71 = node70.toString();
        boolean boolean72 = node70.hasConsistentReturnUsage();
        boolean boolean73 = node70.hasSideEffects();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(0, node70);
        node65.addChildrenToBack(node74);
        node63.addChildToFront(node65);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor77 = node63.iterator();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(14, node21, node42, node63, (int) (byte) -1);
        node42.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "40" + "'", str71, "40");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeItor77);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node4 = node1.getLastSibling();
        com.google.javascript.rhino.head.Node node6 = node4.setType(100);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = null;
        java.lang.String str8 = node4.toStringTree(scriptNode7);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str14 = node13.toString();
        boolean boolean15 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        node17.removeProp(23);
        node13.addChildToFront(node17);
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) 'a', node13);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        com.google.javascript.rhino.head.Node node27 = node25.getLastChild();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) -1, node13, node23, node25, (int) (short) -1);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 1, node25, 12);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator32 = node31.new NodeIterator();
        int int33 = node31.getLineno();
        node31.removeChildren();
        int int35 = node31.getType();
        com.google.javascript.rhino.head.Node node37 = node31.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor42 = node39.iterator();
        java.lang.Object obj44 = node39.getProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = node39.new NodeIterator();
        com.google.javascript.rhino.head.Node node46 = node39.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildBefore(node37, node46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeItor42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        int int14 = node11.getLineno();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, node11, node16, 9);
        boolean boolean27 = node11.hasSideEffects();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(23);
        node30.removeProp(25);
        boolean boolean33 = node30.hasChildren();
        node11.putProp(4, (java.lang.Object) boolean33);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) 'a', "11");
        com.google.javascript.rhino.head.Node node4 = node2.setType((int) (short) 10);
        boolean boolean5 = node4.hasChildren();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(4, 8);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator9 = node8.new NodeIterator();
        node4.addChildToFront(node8);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(9, node3);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) '#', node14);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        node17.addChildrenToFront(node19);
        node19.removeChildren();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node14.addChildAfter(node19, node26);
        int int30 = node14.getIntProp((int) (short) 100, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope31 = node14.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) -1);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(20, 5);
        node1.addChildrenToBack(node4);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        boolean boolean19 = node16.hasSideEffects();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(0, node16);
        node11.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(9, node11);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(13, node26);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(7, node26);
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) 'a', node8, node22, node26, (int) (short) 1);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(97);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        boolean boolean40 = node37.hasSideEffects();
        node35.addChildrenToFront(node37);
        node37.removeChildren();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((-1), node33, node37, 10);
        int int45 = node44.getType();
        com.google.javascript.rhino.head.ast.Comment comment46 = node44.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildBefore(node22, (com.google.javascript.rhino.head.Node) comment46);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: newChild had siblings in addChildBefore");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(comment46);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(3, "100");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        boolean boolean8 = node5.hasSideEffects();
        node5.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node12 = node5.setType((int) '4');
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node17 = node16.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = node17.new NodeIterator();
        node17.setLineno(13);
        boolean boolean21 = node17.hasSideEffects();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean35 = node34.hasChildren();
        node25.addChildrenToFront(node34);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasChildren();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node34, node38, (int) (short) 10);
        com.google.javascript.rhino.head.Node node43 = node42.getLastChild();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newString("");
        node52.removeProp(23);
        node48.addChildToFront(node52);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) 'a', node48);
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str61 = node60.toString();
        com.google.javascript.rhino.head.Node node62 = node60.getLastChild();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) -1, node48, node58, node60, (int) (short) -1);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (short) 1, node60, 12);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(23);
        node68.removeProp(25);
        boolean boolean71 = node68.hasChildren();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((-1), node43, node60, node68);
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str75 = node74.toString();
        boolean boolean76 = node74.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node78 = com.google.javascript.rhino.head.Node.newString("");
        node78.removeProp(23);
        node74.addChildToFront(node78);
        com.google.javascript.rhino.head.Node node82 = node74.getFirstChild();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node82.addChildrenToBack(node84);
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node(19, node17, node43, node82, 6);
        com.google.javascript.rhino.head.Node node88 = node82.getFirstChild();
        node3.addChildAfter(node12, node88);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(8, node3, 97);
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble(32.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "40" + "'", str61, "40");
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "40" + "'", str75, "40");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(9, node4);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) '#', node15);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        node18.addChildrenToFront(node20);
        node20.removeChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node15.addChildAfter(node20, node27);
        com.google.javascript.rhino.head.Node node29 = node15.getLastSibling();
        com.google.javascript.rhino.head.Node node30 = node29.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node41 = node33.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment42 = node33.getJsDocNode();
        int int43 = node33.getType();
        node33.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        java.lang.String str55 = node51.getString();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(10, node33, node51, node58, 14);
        node30.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node62 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(41, node30, node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(comment42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 40 + "'", int43 == 40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = node3.new NodeIterator();
        node3.setLineno(13);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator7 = node3.spliterator();
        java.lang.String str8 = node3.toString();
        int int9 = node3.getType();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = node11.setType(3);
        int int17 = node11.getIntProp(1, 21);
        node3.addChildToFront(node11);
        // The following exception was thrown during execution in test generation
        try {
            node11.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeSpliterator7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "23" + "'", str8, "23");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21 + "'", int17 == 21);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(11);
        com.google.javascript.rhino.head.Node node3 = node1.setType(2);
        java.lang.Class<?> wildcardClass4 = node3.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        boolean boolean2 = node1.hasSideEffects();
        int int5 = node1.getIntProp(25, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) (byte) 0, "41");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = node10.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(0, node4);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) -1, node20, node24, (int) (short) 10);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node4, node24, node31, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment34 = null;
        node33.setJsDocNode(comment34);
        com.google.javascript.rhino.head.Node node36 = node33.getLastChild();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(4);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node44 = node43.getLastSibling();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        boolean boolean50 = node48.hasConsistentReturnUsage();
        boolean boolean51 = node48.hasSideEffects();
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(26, node43, node46, 20);
        boolean boolean55 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(97);
        int int58 = node57.getType();
        com.google.javascript.rhino.head.Node node60 = node57.setType(97);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(22, node54, node60, 25);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 1, node33, node38, node62);
        // The following exception was thrown during execution in test generation
        try {
            node33.setString("2");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        boolean boolean46 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = node50.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment67 = node58.getJsDocNode();
        node53.addChildToBack(node58);
        java.lang.String str69 = node53.toString();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, node30, node50, node53, 1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        boolean boolean78 = node75.hasSideEffects();
        node73.addChildrenToFront(node75);
        node75.removeChildren();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node50, node75);
        node75.setDouble((double) 11);
        com.google.javascript.rhino.head.Node node84 = node75.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = null;
        java.lang.String str86 = node75.toStringTree(scriptNode85);
        boolean boolean87 = node75.hasSideEffects();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(comment67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(13, node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(7, node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) 'a', node2, node16, node20, (int) (short) 1);
        boolean boolean25 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node27 = node2.setType(3);
        int int28 = node27.getLineno();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = node27.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator29.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(4, 8);
        node2.removeProp(4);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = node2.getExistingIntProp(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        node3.removeChildren();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("hi!");
        node3.addChildrenToBack(node10);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean24 = node23.hasChildren();
        node14.addChildrenToFront(node23);
        int int26 = node23.getLineno();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node36 = node28.getFirstChild();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 0, node23, node28, 9);
        boolean boolean39 = node23.hasSideEffects();
        node23.removeProp((int) (byte) -1);
        node10.addChildrenToFront(node23);
        java.lang.Class<?> wildcardClass43 = node10.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        node1.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node8 = node1.setType((int) '4');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = node8.iterator();
        int int10 = node8.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node15 = node13.getLastChild();
        java.lang.String str16 = node13.getJsDoc();
        java.lang.Object obj18 = node13.getProp(0);
        com.google.javascript.rhino.head.Node node19 = node13.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node24 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        boolean boolean31 = node28.hasSideEffects();
        node26.addChildrenToFront(node28);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node(26, node23, node26, 20);
        int int35 = node34.getType();
        com.google.javascript.rhino.head.Node node36 = node34.getNext();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator37 = node34.spliterator();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean40 = node39.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = node39.setType(3);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(18, node19, node34, node39, 13);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(17, node44, 40);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 26 + "'", int35 == 26);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(nodeSpliterator37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 14);
        node1.putProp((int) (byte) -1, (java.lang.Object) (short) -1);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node1.setJsDocNode(comment4);
        node1.removeProp(23);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node20 = node12.getFirstChild();
        node20.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope23 = node20.getScope();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) ' ', node20, 2);
        boolean boolean26 = node25.hasChildren();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean40 = node39.hasChildren();
        node30.addChildrenToFront(node39);
        int int42 = node39.getLineno();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("");
        node48.removeProp(23);
        node44.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node52 = node44.getFirstChild();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (short) 0, node39, node44, 9);
        boolean boolean55 = node39.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node59 = node58.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator60 = node59.new NodeIterator();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str63 = node62.toString();
        boolean boolean64 = node62.hasConsistentReturnUsage();
        boolean boolean65 = node62.hasSideEffects();
        com.google.javascript.rhino.head.Node node67 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str68 = node67.toString();
        boolean boolean69 = node67.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node71 = com.google.javascript.rhino.head.Node.newString("");
        node71.removeProp(23);
        node67.addChildToFront(node71);
        com.google.javascript.rhino.head.Node node75 = node67.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment76 = node67.getJsDocNode();
        node62.addChildToBack(node67);
        java.lang.String str78 = node62.toString();
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node(0, node39, node59, node62, 1);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node84 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str85 = node84.toString();
        boolean boolean86 = node84.hasConsistentReturnUsage();
        boolean boolean87 = node84.hasSideEffects();
        node82.addChildrenToFront(node84);
        node84.removeChildren();
        com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node((int) (short) 0, node25, node59, node84);
        java.lang.String str91 = node25.toString();
        boolean boolean92 = node25.hasConsistentReturnUsage();
        node1.putProp(11, (java.lang.Object) boolean92);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "40" + "'", str63, "40");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "40" + "'", str68, "40");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(comment76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "40" + "'", str78, "40");
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "40" + "'", str85, "40");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "32" + "'", str91, "32");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment11 = node2.getJsDocNode();
        int int12 = node2.getType();
        node2.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        java.lang.String str24 = node20.getString();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(10, node2, node20, node27, 14);
        boolean boolean30 = node20.hasSideEffects();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator31 = node20.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator31);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        com.google.javascript.rhino.head.Node node17 = node10.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator18 = node10.spliterator();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        node29.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope32 = node29.getScope();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) ' ', node29, 2);
        boolean boolean35 = node34.hasChildren();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        boolean boolean41 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(0, node38);
        int int43 = node38.getLineno();
        node34.addChildToFront(node38);
        boolean boolean45 = node38.hasSideEffects();
        node10.addChildToFront(node38);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = node38.getExistingIntProp(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeSpliterator18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment24 = node15.getJsDocNode();
        node10.addChildToBack(node15);
        boolean boolean26 = node15.hasConsistentReturnUsage();
        node3.putProp((int) (short) 1, (java.lang.Object) node15);
        com.google.javascript.rhino.head.ast.Comment comment28 = null;
        node15.setJsDocNode(comment28);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((-1.0d));
        node31.putIntProp((int) (byte) -1, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(17, node15, node31, 41);
        com.google.javascript.rhino.head.Node node37 = node31.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node3, node23, node30, (int) (short) 0);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("1");
        node39.addChildrenToBack(node45);
        int int47 = node45.getLineno();
        node45.removeProp(16);
        node3.putProp(19, (java.lang.Object) 16);
        // The following exception was thrown during execution in test generation
        try {
            node3.labelId(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(97);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        node5.addChildrenToFront(node7);
        node7.removeChildren();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), node3, node7, 10);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(13, node14, 26);
        java.lang.Object obj18 = node16.getProp(3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        boolean boolean46 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = node50.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        boolean boolean56 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment67 = node58.getJsDocNode();
        node53.addChildToBack(node58);
        java.lang.String str69 = node53.toString();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, node30, node50, node53, 1);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node75 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str76 = node75.toString();
        boolean boolean77 = node75.hasConsistentReturnUsage();
        boolean boolean78 = node75.hasSideEffects();
        node73.addChildrenToFront(node75);
        node75.removeChildren();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node50, node75);
        node75.setDouble((double) 11);
        java.lang.String str84 = node75.toString();
        int int85 = node75.getType();
        node75.putIntProp((int) (byte) 0, (int) (byte) 100);
        java.lang.Class<?> wildcardClass89 = node75.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(comment67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "40" + "'", str76, "40");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "40" + "'", str84, "40");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 40 + "'", int85 == 40);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node3, node23, node30, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment33 = null;
        node23.setJsDocNode(comment33);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str38 = node37.toString();
        int int39 = node37.getLineno();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment42 = node41.getJsDocNode();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        boolean boolean49 = node46.hasSideEffects();
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(8, node37, node41, node44);
        node23.addChildrenToFront(node41);
        node41.putIntProp((int) (short) 0, (int) (short) 10);
        node41.removeProp((int) (byte) 100);
        node41.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100" + "'", str38, "100");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(comment42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        boolean boolean26 = node19.hasSideEffects();
        boolean boolean27 = node19.hasChildren();
        node19.setLineno((int) (short) 1);
        double double30 = node19.getDouble();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(13, node37);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(12);
        node41.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(6, node41);
        com.google.javascript.rhino.head.Node node46 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node37, node45, 0);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(17, node33, node48);
        com.google.javascript.rhino.head.Node node50 = node49.getLastSibling();
        node49.putIntProp((int) (byte) 100, (int) (byte) 0);
        node19.addChildToFront(node49);
        node49.removeProp(24);
        node49.putIntProp(25, (int) '#');
        com.google.javascript.rhino.head.Node node60 = null;
        // The following exception was thrown during execution in test generation
        try {
            node49.addChildrenToFront(node60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 32.0d + "'", double30 == 32.0d);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, node15, (int) (short) 10);
        boolean boolean20 = node11.hasChildren();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        boolean boolean28 = node25.hasSideEffects();
        node23.addChildrenToFront(node25);
        node25.removeChildren();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("hi!");
        node25.addChildrenToBack(node32);
        node11.putProp(23, (java.lang.Object) node32);
        node11.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node37 = null;
        // The following exception was thrown during execution in test generation
        try {
            node11.removeChild(node37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1" + "'", str16, "-1");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        boolean boolean22 = node19.hasSideEffects();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(0, node19);
        int int24 = node19.getLineno();
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = node15.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator26.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        node2.addChildToFront(node4);
        java.lang.String str16 = node4.getString();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(13, node4);
        node4.putIntProp(0, 16);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = null;
        java.lang.String str5 = node2.toStringTree(scriptNode4);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString(24, "100");
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(23, 6);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node2, node8, node11, 6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = null;
        java.lang.String str15 = node8.toStringTree(scriptNode14);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str18 = node17.toString();
        com.google.javascript.rhino.head.ast.Comment comment19 = node17.getJsDocNode();
        com.google.javascript.rhino.head.ast.Comment comment20 = node17.getJsDocNode();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        node17.addChildToBack(node22);
        java.lang.String str26 = node22.getJsDoc();
        // The following exception was thrown during execution in test generation
        try {
            node8.removeChild(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1" + "'", str3, "-1");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertNull(comment19);
        org.junit.Assert.assertNull(comment20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean11 = node10.hasChildren();
        node1.addChildrenToFront(node10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator13 = node10.new NodeIterator();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastSibling();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node28 = node20.getFirstChild();
        node28.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope31 = node28.getScope();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) ' ', node28, 2);
        com.google.javascript.rhino.head.Node node34 = node28.getLastSibling();
        node17.addChildToFront(node34);
        node10.addChildrenToFront(node17);
        boolean boolean37 = node10.hasSideEffects();
        node10.setLineno(40);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(scope31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("hi!");
        java.lang.String str2 = node1.getJsDoc();
        com.google.javascript.rhino.head.Node node3 = node1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) 'a', "11");
        boolean boolean3 = node2.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.Node node85 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str86 = node85.toString();
        boolean boolean87 = node85.hasConsistentReturnUsage();
        boolean boolean88 = node85.hasSideEffects();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node85);
        com.google.javascript.rhino.head.ast.Comment comment90 = node85.getJsDocNode();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(18, node17, node85);
        int int94 = node17.getIntProp(22, 2);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator95 = node17.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            node17.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "40" + "'", str86, "40");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(comment90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        java.lang.Object obj21 = node3.getProp(0);
        java.lang.String str22 = node3.getJsDoc();
        node3.setLineno((int) (byte) 1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor25 = node3.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(nodeItor25);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator17 = node11.spliterator();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str21 = node20.toString();
        com.google.javascript.rhino.head.ast.Comment comment22 = node20.getJsDocNode();
        node11.putProp((int) '#', (java.lang.Object) node20);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str33 = node32.toString();
        com.google.javascript.rhino.head.Node node34 = node32.getFirstChild();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean47 = node46.hasChildren();
        node37.addChildrenToFront(node46);
        int int49 = node46.getLineno();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = node51.getFirstChild();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) (short) 0, node46, node51, 9);
        node32.addChildrenToFront(node61);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(100, node27, node30, node32, (int) ' ');
        com.google.javascript.rhino.head.Node node65 = node32.getLastSibling();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(21, node65);
        node11.addChildToFront(node66);
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str73 = node72.toString();
        boolean boolean74 = node72.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newString("");
        node76.removeProp(23);
        node72.addChildToFront(node76);
        com.google.javascript.rhino.head.Node node80 = node72.getFirstChild();
        node80.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope83 = node80.getScope();
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node((int) ' ', node80, 2);
        com.google.javascript.rhino.head.Node node86 = node80.getLastSibling();
        com.google.javascript.rhino.head.Node node89 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node90 = node89.getLastSibling();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node((int) ' ', node86, node89);
        node89.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node node94 = new com.google.javascript.rhino.head.Node(13, node89);
        com.google.javascript.rhino.head.Node node96 = node89.setType(2);
        node96.removeChildren();
        com.google.javascript.rhino.head.Node node98 = new com.google.javascript.rhino.head.Node((int) '4', node11, node96);
        com.google.javascript.rhino.head.ast.Comment comment99 = node98.getJsDocNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(nodeSpliterator17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1" + "'", str21, "-1");
        org.junit.Assert.assertNull(comment22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "40" + "'", str73, "40");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(scope83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNull(comment99);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node3.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        node3.removeProp(19);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(12);
        node4.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(6, node4);
        com.google.javascript.rhino.head.Node node9 = node8.getLastChild();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node13 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node14 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        boolean boolean19 = node16.hasSideEffects();
        node16.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node23 = node16.setType((int) '4');
        int int24 = node23.getLineno();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(24, node9, node12, node23, 8);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(0, node32, node35);
        int int37 = node32.getLineno();
        boolean boolean38 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(8, node12, node29, node32);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = node32.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        com.google.javascript.rhino.head.Node node21 = node15.getLastSibling();
        node4.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(13, node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(12);
        node35.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(6, node35);
        com.google.javascript.rhino.head.Node node40 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node31, node39, 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node45.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(20, node27, node31, node45);
        com.google.javascript.rhino.head.Node node50 = node27.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node59 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((-1), node21, node27, node59, 3);
        java.lang.String str62 = node27.toString();
        boolean boolean63 = node27.hasSideEffects();
        java.lang.String str64 = node27.getString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "23" + "'", str62, "23");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        boolean boolean51 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(13, node55);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(12);
        node59.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(6, node59);
        com.google.javascript.rhino.head.Node node64 = node63.getLastChild();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node55, node63, 0);
        node38.addChildToBack(node66);
        com.google.javascript.rhino.head.Node node68 = node38.getNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = node38.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        // The following exception was thrown during execution in test generation
        try {
            node1.setString("100");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        com.google.javascript.rhino.head.Node node0 = com.google.javascript.rhino.head.Node.newTarget();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) 'a', node5);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        com.google.javascript.rhino.head.Node node19 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node5, node15, node17, (int) (short) -1);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node32 = node24.getFirstChild();
        node32.setString("100");
        com.google.javascript.rhino.head.Node node35 = node32.getLastSibling();
        node21.putProp(10, (java.lang.Object) node35);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        boolean boolean52 = node49.hasSideEffects();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, node49);
        node44.addChildrenToBack(node53);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(9, node44);
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(13, node59);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(7, node59);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) 'a', node41, node55, node59, (int) (short) 1);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(7);
        node59.addChildrenToBack(node65);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (byte) -1, node21, node38, node59, 97);
        node0.addChildToFront(node59);
        com.google.javascript.rhino.head.Node node70 = node0.getNext();
        org.junit.Assert.assertNotNull(node0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node70);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(9, node2);
        node2.removeProp(4);
        com.google.javascript.rhino.head.Node node17 = node2.setType(23);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(12, 25);
        boolean boolean21 = node20.hasChildren();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean34 = node33.hasChildren();
        node24.addChildrenToFront(node33);
        int int36 = node33.getLineno();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("");
        node42.removeProp(23);
        node38.addChildToFront(node42);
        com.google.javascript.rhino.head.Node node46 = node38.getFirstChild();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (short) 0, node33, node38, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = node38.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node54 = node53.getLastSibling();
        int int55 = node53.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator56 = node53.spliterator();
        node38.putProp((int) '4', (java.lang.Object) node53);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str61 = node60.toString();
        int int62 = node60.getLineno();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment65 = node64.getJsDocNode();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str70 = node69.toString();
        boolean boolean71 = node69.hasConsistentReturnUsage();
        boolean boolean72 = node69.hasSideEffects();
        node67.addChildrenToFront(node69);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(8, node60, node64, node67);
        com.google.javascript.rhino.head.ast.Comment comment75 = null;
        node67.setJsDocNode(comment75);
        node20.addChildBefore(node38, (com.google.javascript.rhino.head.Node) comment75);
        node2.addChildToBack(node38);
        java.lang.String str79 = node2.getJsDoc();
        node2.putIntProp((int) '#', 2);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100" + "'", str61, "100");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(comment65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(13, node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(7, node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) 'a', node2, node16, node20, (int) (short) 1);
        boolean boolean25 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node27 = node2.setType(3);
        int int28 = node27.getLineno();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = node27.new NodeIterator();
        boolean boolean30 = nodeIterator29.hasNext();
        boolean boolean31 = nodeIterator29.hasNext();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) 'a', node31);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        com.google.javascript.rhino.head.Node node45 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node31, node41, node43, (int) (short) -1);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node57.addChildrenToBack(node59);
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        java.lang.String str62 = node59.getJsDoc();
        java.lang.Object obj64 = node59.getProp(0);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(3, node12, node31, node59);
        com.google.javascript.rhino.head.ast.Comment comment66 = node65.getJsDocNode();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        boolean boolean70 = node68.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newString("");
        node72.removeProp(23);
        node68.addChildToFront(node72);
        com.google.javascript.rhino.head.Node node76 = node68.getFirstChild();
        node76.setString("100");
        com.google.javascript.rhino.head.Node node79 = node76.getLastSibling();
        node65.addChildrenToBack(node76);
        node65.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            int int83 = node65.getExistingIntProp(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(comment66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        boolean boolean17 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = node6.getFirstChild();
        com.google.javascript.rhino.head.Node node19 = node18.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = node4.new NodeIterator();
        node4.setLineno(13);
        boolean boolean8 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasChildren();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) -1, node21, node25, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = node29.getLastChild();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node35);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        com.google.javascript.rhino.head.Node node49 = node47.getLastChild();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) -1, node35, node45, node47, (int) (short) -1);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 1, node47, 12);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(23);
        node55.removeProp(25);
        boolean boolean58 = node55.hasChildren();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((-1), node30, node47, node55);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        node61.addChildToFront(node65);
        com.google.javascript.rhino.head.Node node69 = node61.getFirstChild();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node69.addChildrenToBack(node71);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(19, node4, node30, node69, 6);
        // The following exception was thrown during execution in test generation
        try {
            node74.labelId(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 10.0f);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = node5.getFirstChild();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node13.addChildrenToBack(node15);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        int int21 = node18.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 10, node13, node18);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        boolean boolean34 = node31.hasSideEffects();
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(26, node26, node29, 20);
        boolean boolean38 = node37.hasSideEffects();
        java.lang.String str39 = node37.getJsDoc();
        node18.addChildToFront(node37);
        node1.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("");
        node48.removeProp(23);
        node44.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node52 = node44.getFirstChild();
        node52.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope55 = node52.getScope();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) ' ', node52, 2);
        boolean boolean58 = node57.hasChildren();
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        boolean boolean64 = node61.hasSideEffects();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(0, node61);
        int int66 = node61.getLineno();
        node57.addChildToFront(node61);
        int int68 = node61.getType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = null;
        java.lang.String str70 = node61.toStringTree(scriptNode69);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str75 = node74.toString();
        boolean boolean76 = node74.hasConsistentReturnUsage();
        boolean boolean77 = node74.hasSideEffects();
        node72.addChildrenToFront(node74);
        boolean boolean79 = node74.hasSideEffects();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor80 = node74.iterator();
        node61.addChildrenToBack(node74);
        com.google.javascript.rhino.head.Node node83 = node74.setType(40);
        int int86 = node83.getIntProp(20, 23);
        node1.addChildToFront(node83);
        // The following exception was thrown during execution in test generation
        try {
            node83.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 40 + "'", int68 == 40);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "40" + "'", str75, "40");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeItor80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 23 + "'", int86 == 23);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20);
        int int25 = node20.getLineno();
        node16.addChildToFront(node20);
        int int27 = node20.getType();
        java.lang.String str28 = node20.getJsDoc();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(40, node20, (int) (short) 1);
        boolean boolean31 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = node20.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node20.labelId(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(node32);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 100L);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        // The following exception was thrown during execution in test generation
        try {
            node38.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment3 = null;
        node2.setJsDocNode(comment3);
        node2.putIntProp(5, (int) (short) 10);
        com.google.javascript.rhino.head.Node node9 = node2.setType(0);
        // The following exception was thrown during execution in test generation
        try {
            node2.labelId((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        node14.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope17 = node14.getScope();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) ' ', node14, 2);
        com.google.javascript.rhino.head.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node24 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((int) ' ', node20, node23);
        java.lang.String str26 = node20.getString();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasChildren();
        node28.addChildrenToFront(node37);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator40 = node37.new NodeIterator();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        com.google.javascript.rhino.head.Node node44 = node42.getLastSibling();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = node47.getFirstChild();
        node55.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope58 = node55.getScope();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) ' ', node55, 2);
        com.google.javascript.rhino.head.Node node61 = node55.getLastSibling();
        node44.addChildToFront(node61);
        node37.addChildrenToFront(node44);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str66 = node65.toString();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) 10, node20, node37, node65, 24);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(0, 1);
        node71.removeChildren();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor73 = node71.iterator();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(19, node65, node71);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newString("1");
        com.google.javascript.rhino.head.ast.Scope scope77 = node76.getScope();
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node(13, node74, node76);
        // The following exception was thrown during execution in test generation
        try {
            node74.setString("52");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(scope17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(scope58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100" + "'", str66, "100");
        org.junit.Assert.assertNotNull(nodeItor73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(scope77);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        boolean boolean51 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString(0, "hi!");
        node38.putProp(22, (java.lang.Object) 0);
        com.google.javascript.rhino.head.Node node57 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        int int61 = node60.getLineno();
        com.google.javascript.rhino.head.Node node63 = node60.setType((-1));
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str66 = node65.toString();
        node65.removeChildren();
        boolean boolean68 = node65.hasChildren();
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newString("");
        node72.removeProp(23);
        com.google.javascript.rhino.head.Node node77 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str78 = node77.toString();
        boolean boolean79 = node77.hasConsistentReturnUsage();
        boolean boolean80 = node77.hasSideEffects();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node(0, node77);
        node72.addChildrenToBack(node81);
        node70.addChildToFront(node72);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node(6, node60, node65, node70);
        // The following exception was thrown during execution in test generation
        try {
            node57.addChildToFront(node60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100" + "'", str66, "100");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "40" + "'", str78, "40");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        node9.setString("100");
        com.google.javascript.rhino.head.Node node12 = node9.getLastSibling();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment24 = node15.getJsDocNode();
        int int25 = node15.getType();
        node15.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        java.lang.String str37 = node33.getString();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(10, node15, node33, node40, 14);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(13, node46);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(7, node46);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(0, node51, node54);
        com.google.javascript.rhino.head.Node node56 = node55.getLastSibling();
        node40.addChildAfter(node48, node55);
        boolean boolean58 = node40.hasSideEffects();
        node9.addChildrenToBack(node40);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 40 + "'", int25 == 40);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        java.lang.Class<?> wildcardClass51 = node46.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        int int16 = node12.getType();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node12);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = node12.new NodeIterator();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber(10.0d);
        com.google.javascript.rhino.head.Node node21 = node20.getFirstChild();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean35 = node34.hasChildren();
        node25.addChildrenToFront(node34);
        int int37 = node34.getLineno();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        node43.removeProp(23);
        node39.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = node39.getFirstChild();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, node34, node39, 9);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("1");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor52 = node51.iterator();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(21, node49, node51, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(9, node12, node21, node49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeItor52);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node2.removeProp((int) (short) 10);
        java.lang.Object obj6 = node2.getProp(15);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (short) 1, node2);
        com.google.javascript.rhino.head.Node node8 = node2.getFirstChild();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = node1.iterator();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20, node23);
        com.google.javascript.rhino.head.Node node25 = node24.getLastSibling();
        node1.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node27 = node24.getFirstChild();
        node24.putIntProp((int) (short) 10, (int) (byte) -1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(13, node7);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(7, node7);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node9.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(12);
        node15.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(6, node15);
        com.google.javascript.rhino.head.Node node20 = node19.getLastChild();
        node9.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(97, node3, node9);
        boolean boolean23 = node22.hasChildren();
        java.lang.Object obj25 = node22.getProp(19);
        // The following exception was thrown during execution in test generation
        try {
            node22.labelId((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(0);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(12);
        node19.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(6, node19);
        com.google.javascript.rhino.head.Node node24 = node23.getLastChild();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean38 = node37.hasChildren();
        node28.addChildrenToFront(node37);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str42 = node41.toString();
        boolean boolean43 = node41.hasChildren();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) -1, node37, node41, (int) (short) 10);
        com.google.javascript.rhino.head.Node node46 = node45.getLastChild();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) 'a', node51);
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str64 = node63.toString();
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) -1, node51, node61, node63, (int) (short) -1);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (short) 1, node63, 12);
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node(23);
        node71.removeProp(25);
        boolean boolean74 = node71.hasChildren();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-1), node46, node63, node71);
        node24.addChildToBack(node46);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (short) -1, node2, node16, node46);
        // The following exception was thrown during execution in test generation
        try {
            node2.labelId(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "40" + "'", str64, "40");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        int int19 = node16.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 10, node11, node16);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(13, node24);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(7, node24);
        node26.removeChildren();
        java.lang.String str28 = node26.getJsDoc();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(5, node20, node26, 10);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        boolean boolean41 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(0, node38);
        node33.addChildrenToBack(node42);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(9, node33);
        node33.removeProp(4);
        com.google.javascript.rhino.head.Node node48 = node33.setType(23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = null;
        java.lang.String str50 = node48.toStringTree(scriptNode49);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator51 = node48.spliterator();
        com.google.javascript.rhino.head.ast.Scope scope52 = null;
        node48.setScope(scope52);
        // The following exception was thrown during execution in test generation
        try {
            node20.addChildrenToBack((com.google.javascript.rhino.head.Node) scope52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(nodeSpliterator51);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 10.0f);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = node5.getFirstChild();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node13.addChildrenToBack(node15);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        int int21 = node18.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 10, node13, node18);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        boolean boolean34 = node31.hasSideEffects();
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(26, node26, node29, 20);
        boolean boolean38 = node37.hasSideEffects();
        java.lang.String str39 = node37.getJsDoc();
        node18.addChildToFront(node37);
        node1.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("");
        node48.removeProp(23);
        node44.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node52 = node44.getFirstChild();
        node52.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope55 = node52.getScope();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) ' ', node52, 2);
        boolean boolean58 = node57.hasChildren();
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        boolean boolean64 = node61.hasSideEffects();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(0, node61);
        int int66 = node61.getLineno();
        node57.addChildToFront(node61);
        int int68 = node61.getType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = null;
        java.lang.String str70 = node61.toStringTree(scriptNode69);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node74 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str75 = node74.toString();
        boolean boolean76 = node74.hasConsistentReturnUsage();
        boolean boolean77 = node74.hasSideEffects();
        node72.addChildrenToFront(node74);
        boolean boolean79 = node74.hasSideEffects();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor80 = node74.iterator();
        node61.addChildrenToBack(node74);
        com.google.javascript.rhino.head.Node node83 = node74.setType(40);
        int int86 = node83.getIntProp(20, 23);
        node1.addChildToFront(node83);
        com.google.javascript.rhino.head.Node node88 = node1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            int int89 = node1.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 40 + "'", int68 == 40);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "40" + "'", str75, "40");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeItor80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 23 + "'", int86 == 23);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        com.google.javascript.rhino.head.Node node18 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) ' ', node18, node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean36 = node35.hasChildren();
        node26.addChildrenToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasChildren();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) -1, node35, node39, (int) (short) 10);
        com.google.javascript.rhino.head.Node node44 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) 0.0f);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(7);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(22, node47, node49);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(6, node21, node43, node49, 100);
        node49.putIntProp(5, (int) (byte) 100);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1" + "'", str40, "-1");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(6, "100");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 10.0f);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = node1.new NodeIterator();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str6 = node5.toString();
        boolean boolean7 = node5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("");
        node9.removeProp(23);
        node5.addChildToFront(node9);
        com.google.javascript.rhino.head.Node node13 = node5.getFirstChild();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node13.addChildrenToBack(node15);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        int int21 = node18.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 10, node13, node18);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        boolean boolean34 = node31.hasSideEffects();
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(26, node26, node29, 20);
        boolean boolean38 = node37.hasSideEffects();
        java.lang.String str39 = node37.getJsDoc();
        node18.addChildToFront(node37);
        node1.addChildToFront(node18);
        boolean boolean42 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        boolean boolean49 = node46.hasSideEffects();
        node44.addChildrenToFront(node46);
        node46.removeChildren();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("hi!");
        node46.addChildrenToBack(node53);
        node53.setLineno(22);
        boolean boolean57 = node53.hasSideEffects();
        com.google.javascript.rhino.head.Node node58 = null;
        // The following exception was thrown during execution in test generation
        try {
            node18.addChildAfter(node53, node58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        boolean boolean10 = node7.hasSideEffects();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(0, node7);
        node2.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(9, node2);
        node2.removeProp(4);
        com.google.javascript.rhino.head.Node node17 = node2.setType(23);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(12, 25);
        boolean boolean21 = node20.hasChildren();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean34 = node33.hasChildren();
        node24.addChildrenToFront(node33);
        int int36 = node33.getLineno();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("");
        node42.removeProp(23);
        node38.addChildToFront(node42);
        com.google.javascript.rhino.head.Node node46 = node38.getFirstChild();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (short) 0, node33, node38, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = node38.new NodeIterator();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node54 = node53.getLastSibling();
        int int55 = node53.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator56 = node53.spliterator();
        node38.putProp((int) '4', (java.lang.Object) node53);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str61 = node60.toString();
        int int62 = node60.getLineno();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment65 = node64.getJsDocNode();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str70 = node69.toString();
        boolean boolean71 = node69.hasConsistentReturnUsage();
        boolean boolean72 = node69.hasSideEffects();
        node67.addChildrenToFront(node69);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(8, node60, node64, node67);
        com.google.javascript.rhino.head.ast.Comment comment75 = null;
        node67.setJsDocNode(comment75);
        node20.addChildBefore(node38, (com.google.javascript.rhino.head.Node) comment75);
        node2.addChildToBack(node38);
        java.lang.String str79 = node2.getJsDoc();
        com.google.javascript.rhino.head.ast.Scope scope80 = null;
        node2.setScope(scope80);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100" + "'", str61, "100");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(comment65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node5.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node9 = node5.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node9.labelId((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node1.removeProp((int) (short) 10);
        java.lang.Object obj5 = node1.getProp(15);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator6 = node1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            node1.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(nodeSpliterator6);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) 'a', node31);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        com.google.javascript.rhino.head.Node node45 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node31, node41, node43, (int) (short) -1);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node57.addChildrenToBack(node59);
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        java.lang.String str62 = node59.getJsDoc();
        java.lang.Object obj64 = node59.getProp(0);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(3, node12, node31, node59);
        com.google.javascript.rhino.head.ast.Comment comment66 = node65.getJsDocNode();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        boolean boolean70 = node68.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node72 = com.google.javascript.rhino.head.Node.newString("");
        node72.removeProp(23);
        node68.addChildToFront(node72);
        com.google.javascript.rhino.head.Node node76 = node68.getFirstChild();
        node76.setString("100");
        com.google.javascript.rhino.head.Node node79 = node76.getLastSibling();
        node65.addChildrenToBack(node76);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node84 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str85 = node84.toString();
        boolean boolean86 = node84.hasConsistentReturnUsage();
        boolean boolean87 = node84.hasSideEffects();
        node82.addChildrenToFront(node84);
        node84.removeChildren();
        com.google.javascript.rhino.head.Node node91 = com.google.javascript.rhino.head.Node.newString("hi!");
        node84.addChildrenToBack(node91);
        com.google.javascript.rhino.head.Node node93 = node84.getFirstChild();
        java.lang.String str94 = node93.getJsDoc();
        int int97 = node93.getIntProp(12, 8);
        node76.addChildToBack(node93);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(comment66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "40" + "'", str85, "40");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 8 + "'", int97 == 8);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12, 25);
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        boolean boolean15 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(0, node12);
        node7.addChildrenToBack(node16);
        node5.addChildToFront(node7);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor19 = node5.iterator();
        com.google.javascript.rhino.head.Node node20 = node5.getFirstChild();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node25 = node24.getLastSibling();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(13, node29);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(12);
        node33.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(6, node33);
        com.google.javascript.rhino.head.Node node38 = node37.getLastChild();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node29, node37, 0);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node43.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(20, node25, node29, node43);
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(13, node55);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(7, node55);
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node57.addChildToFront(node59);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(12);
        node63.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(6, node63);
        com.google.javascript.rhino.head.Node node68 = node67.getLastChild();
        node57.addChildToFront(node67);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(97, node51, node57);
        node47.addChildrenToBack(node70);
        node2.addChildAfter(node20, node70);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = null;
        java.lang.String str74 = node20.toStringTree(scriptNode73);
        java.lang.Class<?> wildcardClass75 = node20.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "12" + "'", str3, "12");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeItor19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        boolean boolean51 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString(0, "hi!");
        node38.putProp(22, (java.lang.Object) 0);
        com.google.javascript.rhino.head.Node node57 = node38.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = node38.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment24 = node15.getJsDocNode();
        node10.addChildToBack(node15);
        boolean boolean26 = node15.hasConsistentReturnUsage();
        node3.putProp((int) (short) 1, (java.lang.Object) node15);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        node38.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope41 = node38.getScope();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) ' ', node38, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator44 = node38.spliterator();
        node38.putIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        node57.setString("100");
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(5, node3, node38, node57, 17);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor62 = node61.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(scope41);
        org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(nodeItor62);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        node2.setString("23");
        int int7 = node2.getIntProp(41, (int) (byte) -1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(13, node3);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(7, node3);
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        boolean boolean20 = node17.hasSideEffects();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(0, node17);
        node12.addChildrenToBack(node21);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(9, node12);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(13, node27);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(7, node27);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) 'a', node9, node23, node27, (int) (short) 1);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean44 = node43.hasChildren();
        node34.addChildrenToFront(node43);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasChildren();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) -1, node43, node47, (int) (short) 10);
        boolean boolean52 = node43.hasChildren();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator53 = node43.new NodeIterator();
        node3.addChildAfter(node27, node43);
        java.lang.Class<?> wildcardClass55 = node27.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1" + "'", str48, "-1");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.ast.Comment comment2 = node1.getJsDocNode();
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(11);
        com.google.javascript.rhino.head.Node node6 = node4.setType(2);
        java.lang.String str7 = node6.toString();
        // The following exception was thrown during execution in test generation
        try {
            comment2.addChildrenToFront(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(comment2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2" + "'", str7, "2");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        node11.setLineno(22);
        boolean boolean15 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("-1");
        node17.removeProp(25);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        int int24 = node21.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        node34.removeProp(23);
        node30.addChildToFront(node34);
        com.google.javascript.rhino.head.Node node38 = node30.getFirstChild();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node38.addChildrenToBack(node40);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        int int46 = node43.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) 10, node38, node43);
        com.google.javascript.rhino.head.Node node49 = node38.setType(18);
        node21.addChildAfter(node27, node49);
        node17.addChildToFront(node49);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node11, node49);
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = node56.getFirstChild();
        node64.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope67 = node64.getScope();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) ' ', node64, 2);
        boolean boolean70 = node69.hasChildren();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str74 = node73.toString();
        boolean boolean75 = node73.hasConsistentReturnUsage();
        boolean boolean76 = node73.hasSideEffects();
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node(0, node73);
        int int78 = node73.getLineno();
        node69.addChildToFront(node73);
        boolean boolean80 = node73.hasSideEffects();
        boolean boolean81 = node73.hasChildren();
        java.lang.Object obj83 = node73.getProp(0);
        node11.putProp(12, (java.lang.Object) node73);
        java.lang.String str85 = node73.getJsDoc();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(scope67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "40" + "'", str74, "40");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        int int19 = node16.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 10, node11, node16);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(13, node24);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(7, node24);
        node26.removeChildren();
        java.lang.String str28 = node26.getJsDoc();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(5, node20, node26, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope31 = node30.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        node1.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node1.setString("52");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString("");
        node3.removeProp(23);
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        boolean boolean11 = node8.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(0, node8);
        node3.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(24, node3, (int) (short) 10);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean29 = node28.hasChildren();
        node19.addChildrenToFront(node28);
        int int31 = node28.getLineno();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node41 = node33.getFirstChild();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) 0, node28, node33, 9);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) 'a', node47);
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) -1, node47, node57, node59, (int) (short) -1);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str66 = node65.toString();
        boolean boolean67 = node65.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newString("");
        node69.removeProp(23);
        node65.addChildToFront(node69);
        com.google.javascript.rhino.head.Node node73 = node65.getFirstChild();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node73.addChildrenToBack(node75);
        com.google.javascript.rhino.head.Node node77 = node75.getLastChild();
        java.lang.String str78 = node75.getJsDoc();
        java.lang.Object obj80 = node75.getProp(0);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node(3, node28, node47, node75);
        com.google.javascript.rhino.head.ast.Comment comment82 = node81.getJsDocNode();
        com.google.javascript.rhino.head.Node node84 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str85 = node84.toString();
        boolean boolean86 = node84.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node88 = com.google.javascript.rhino.head.Node.newString("");
        node88.removeProp(23);
        node84.addChildToFront(node88);
        com.google.javascript.rhino.head.Node node92 = node84.getFirstChild();
        node92.setString("100");
        com.google.javascript.rhino.head.Node node95 = node92.getLastSibling();
        node81.addChildrenToBack(node92);
        com.google.javascript.rhino.head.Node node98 = new com.google.javascript.rhino.head.Node((int) (short) 100, node15, node81, 23);
        boolean boolean99 = node15.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "40" + "'", str66, "40");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNull(comment82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "40" + "'", str85, "40");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasChildren();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        com.google.javascript.rhino.head.Node node21 = node15.getLastSibling();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node25 = node24.getLastSibling();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) ' ', node21, node24);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor27 = node24.iterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = node24.new NodeIterator();
        node1.addChildrenToBack(node24);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = node1.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator30.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeItor27);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(3, 0);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        boolean boolean16 = node13.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = node13.new NodeIterator();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        node2.replaceChildAfter(node13, node19);
        com.google.javascript.rhino.head.Node node21 = node13.getLastChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.ast.Comment comment4 = null;
        node2.setJsDocNode(comment4);
        java.lang.String str6 = node2.toString();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(6, node2);
        // The following exception was thrown during execution in test generation
        try {
            node2.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "40" + "'", str6, "40");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(13, node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(12);
        node13.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(6, node13);
        com.google.javascript.rhino.head.Node node18 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node9, node17, 0);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node23.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(20, node5, node9, node23);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 0, node23);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = node23.new NodeIterator();
        boolean boolean30 = nodeIterator29.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator29.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean11 = node10.hasChildren();
        node1.addChildrenToFront(node10);
        int int13 = node10.getLineno();
        java.lang.String str14 = node10.toString();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) 'a', node19);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        com.google.javascript.rhino.head.Node node33 = node31.getLastChild();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node29, node31, (int) (short) -1);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("23");
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(26, node35, node37);
        node10.addChildToFront(node38);
        int int40 = node38.getType();
        int int43 = node38.getIntProp(4, 97);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "40" + "'", str14, "40");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 26 + "'", int40 == 26);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        int int5 = node2.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = node11.getFirstChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node19.addChildrenToBack(node21);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        int int27 = node24.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 10, node19, node24);
        com.google.javascript.rhino.head.Node node30 = node19.setType(18);
        node2.addChildAfter(node8, node30);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean34 = node33.hasSideEffects();
        node8.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node36 = node8.getNext();
        node8.setLineno(7);
        boolean boolean39 = node8.hasSideEffects();
        node8.setLineno(8);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node46 = node45.getLastSibling();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        boolean boolean53 = node50.hasSideEffects();
        node48.addChildrenToFront(node50);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(26, node45, node48, 20);
        boolean boolean57 = node56.hasSideEffects();
        java.lang.String str58 = node56.getJsDoc();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) -1, node8, node56, 10);
        int int63 = node60.getIntProp(25, 32);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 32 + "'", int63 == 32);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator16 = node10.spliterator();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str20 = node19.toString();
        com.google.javascript.rhino.head.ast.Comment comment21 = node19.getJsDocNode();
        node10.putProp((int) '#', (java.lang.Object) node19);
        boolean boolean23 = node19.hasSideEffects();
        int int24 = node19.getLineno();
        com.google.javascript.rhino.head.Node node25 = node19.getLastSibling();
        com.google.javascript.rhino.head.Node node26 = node19.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNull(comment21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node17 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node21 = node20.getLastSibling();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) ' ', node17, node20);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor23 = node20.iterator();
        boolean boolean24 = node20.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node6 = node5.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        node8.addChildrenToFront(node10);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(26, node5, node8, 20);
        int int17 = node8.getLineno();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        node20.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean30 = node29.hasChildren();
        node20.addChildrenToFront(node29);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasChildren();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) -1, node29, node33, (int) (short) 10);
        node37.removeProp(24);
        com.google.javascript.rhino.head.Node node40 = node37.getLastChild();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment43 = node42.getJsDocNode();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(12, node8, node37, node42);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, node42);
        node45.setLineno(26);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(comment43);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node10.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node14 = node12.getLastChild();
        java.lang.String str15 = node12.getJsDoc();
        java.lang.Object obj17 = node12.getProp(0);
        boolean boolean18 = node12.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(12);
        node21.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(6, node21);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor26 = node25.iterator();
        node25.removeChildren();
        node12.addChildToFront(node25);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor29 = node25.iterator();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(97);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        boolean boolean39 = node36.hasSideEffects();
        node34.addChildrenToFront(node36);
        node36.removeChildren();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((-1), node32, node36, 10);
        int int44 = node43.getType();
        com.google.javascript.rhino.head.ast.Comment comment45 = node43.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(7, node25, (com.google.javascript.rhino.head.Node) comment45, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeItor26);
        org.junit.Assert.assertNotNull(nodeItor29);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(comment45);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str3 = node2.toString();
        int int6 = node2.getIntProp(17, (int) (byte) 100);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "23" + "'", str3, "23");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2, node5);
        int int7 = node2.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor8 = node2.iterator();
        boolean boolean9 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(0, node12, node15);
        node2.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        int int33 = node30.getLineno();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node30, node35, 9);
        boolean boolean46 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        boolean boolean53 = node50.hasSideEffects();
        node48.addChildrenToFront(node50);
        node50.removeChildren();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("hi!");
        node50.addChildrenToBack(node57);
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str61 = node60.toString();
        boolean boolean62 = node60.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newString("");
        node64.removeProp(23);
        node60.addChildToFront(node64);
        com.google.javascript.rhino.head.Node node68 = node60.getFirstChild();
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node68.addChildrenToBack(node70);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node30, node50, node70);
        node50.setLineno(7);
        node2.addChildToFront(node50);
        boolean boolean76 = node50.hasSideEffects();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "40" + "'", str61, "40");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        int int8 = node1.getType();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node10.setLineno((int) '4');
        com.google.javascript.rhino.head.ast.Comment comment15 = node10.getJsDocNode();
        node1.addChildrenToBack(node10);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(comment15);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node17 = node11.getLastSibling();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node21 = node20.getLastSibling();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) ' ', node17, node20);
        node20.setLineno((int) (byte) 0);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator25 = node20.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator25.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.Node node13 = node10.getLastSibling();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(7, node10, 14);
        com.google.javascript.rhino.head.ast.Comment comment16 = null;
        node15.setJsDocNode(comment16);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node13, node17, (int) (short) 10);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) 'a', node27);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        com.google.javascript.rhino.head.Node node41 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) -1, node27, node37, node39, (int) (short) -1);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 1, node39, 12);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(23);
        node47.removeProp(25);
        boolean boolean50 = node47.hasChildren();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((-1), node22, node39, node47);
        boolean boolean52 = node39.hasSideEffects();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString(0, "hi!");
        node39.putProp(22, (java.lang.Object) 0);
        com.google.javascript.rhino.head.Node node58 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node61 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str62 = node61.toString();
        boolean boolean63 = node61.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        node61.addChildToFront(node65);
        com.google.javascript.rhino.head.Node node69 = node61.getFirstChild();
        node69.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope72 = node69.getScope();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) ' ', node69, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator75 = node69.spliterator();
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str79 = node78.toString();
        com.google.javascript.rhino.head.ast.Comment comment80 = node78.getJsDocNode();
        node69.putProp((int) '#', (java.lang.Object) node78);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = null;
        java.lang.String str83 = node69.toStringTree(scriptNode82);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node39, node69);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = node39.getExistingIntProp((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(scope72);
        org.junit.Assert.assertNotNull(nodeSpliterator75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "-1" + "'", str79, "-1");
        org.junit.Assert.assertNull(comment80);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString("");
        node4.removeProp(23);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        boolean boolean12 = node9.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node9);
        node4.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(9, node4);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) '#', node15);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        node18.addChildrenToFront(node20);
        node20.removeChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node15.addChildAfter(node20, node27);
        com.google.javascript.rhino.head.Node node29 = node15.getLastSibling();
        com.google.javascript.rhino.head.Node node30 = node29.getLastSibling();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node41 = node33.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment42 = node33.getJsDocNode();
        int int43 = node33.getType();
        node33.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        boolean boolean49 = node47.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newString("");
        node51.removeProp(23);
        node47.addChildToFront(node51);
        java.lang.String str55 = node51.getString();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(10, node33, node51, node58, 14);
        node30.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        boolean boolean66 = node64.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newString("");
        node68.removeProp(23);
        node64.addChildToFront(node68);
        com.google.javascript.rhino.head.Node node72 = node64.getFirstChild();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node72.addChildrenToBack(node74);
        com.google.javascript.rhino.head.Node node77 = com.google.javascript.rhino.head.Node.newString("");
        int int80 = node77.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 10, node72, node77);
        boolean boolean82 = node72.hasChildren();
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node(5, 11);
        node72.addChildToFront(node85);
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node(17);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(97, node30, node72, node88);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = node89.getExistingIntProp((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(comment42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 40 + "'", int43 == 40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasChildren();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, node15, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            node11.labelId((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1" + "'", str16, "-1");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node1.removeProp((int) (short) 10);
        java.lang.Object obj5 = node1.getProp(15);
        com.google.javascript.rhino.head.Node node6 = node1.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node6.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(7, "4");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        boolean boolean5 = node2.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment16 = node7.getJsDocNode();
        node2.addChildToBack(node7);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor18 = node2.iterator();
        com.google.javascript.rhino.head.ast.Comment comment19 = node2.getJsDocNode();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator20 = node2.new NodeIterator();
        double double21 = node2.getDouble();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        boolean boolean29 = node26.hasSideEffects();
        node24.addChildrenToFront(node26);
        node26.removeChildren();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("hi!");
        node26.addChildrenToBack(node33);
        node33.setLineno(22);
        boolean boolean37 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("-1");
        node39.removeProp(25);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        int int46 = node43.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        boolean boolean54 = node52.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString("");
        node56.removeProp(23);
        node52.addChildToFront(node56);
        com.google.javascript.rhino.head.Node node60 = node52.getFirstChild();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node60.addChildrenToBack(node62);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        int int68 = node65.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (short) 10, node60, node65);
        com.google.javascript.rhino.head.Node node71 = node60.setType(18);
        node43.addChildAfter(node49, node71);
        node39.addChildToFront(node71);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node33, node71);
        node2.addChildrenToBack(node71);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("");
        int int80 = node79.getLineno();
        com.google.javascript.rhino.head.Node node82 = node79.setType((-1));
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node(23, node82, 22);
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node(15, node82);
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node(10, node2, node82);
        com.google.javascript.rhino.head.ast.Scope scope87 = node82.getScope();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertNull(comment19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 32.0d + "'", double21 == 32.0d);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(scope87);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj3 = node1.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        int int7 = node1.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = node26.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 0, node21, node26, 9);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node((int) 'a', node40);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node52 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str53 = node52.toString();
        com.google.javascript.rhino.head.Node node54 = node52.getLastChild();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (short) -1, node40, node50, node52, (int) (short) -1);
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        boolean boolean60 = node58.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = com.google.javascript.rhino.head.Node.newString("");
        node62.removeProp(23);
        node58.addChildToFront(node62);
        com.google.javascript.rhino.head.Node node66 = node58.getFirstChild();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node66.addChildrenToBack(node68);
        com.google.javascript.rhino.head.Node node70 = node68.getLastChild();
        java.lang.String str71 = node68.getJsDoc();
        java.lang.Object obj73 = node68.getProp(0);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(3, node21, node40, node68);
        com.google.javascript.rhino.head.ast.Comment comment75 = node74.getJsDocNode();
        com.google.javascript.rhino.head.Node node77 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str78 = node77.toString();
        boolean boolean79 = node77.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newString("");
        node81.removeProp(23);
        node77.addChildToFront(node81);
        com.google.javascript.rhino.head.Node node85 = node77.getFirstChild();
        node85.setString("100");
        com.google.javascript.rhino.head.Node node88 = node85.getLastSibling();
        node74.addChildrenToBack(node85);
        node74.removeChildren();
        node1.putProp(32, (java.lang.Object) node74);
        java.lang.String str92 = node74.getJsDoc();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(comment75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "40" + "'", str78, "40");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        int int5 = node2.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node19 = node11.getFirstChild();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node19.addChildrenToBack(node21);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        int int27 = node24.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 10, node19, node24);
        com.google.javascript.rhino.head.Node node30 = node19.setType(18);
        node2.addChildAfter(node8, node30);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean34 = node33.hasSideEffects();
        node8.addChildrenToFront(node33);
        com.google.javascript.rhino.head.Node node36 = node8.getNext();
        int int37 = node8.getLineno();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) 'a', node8, (int) (byte) 100);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str8 = node7.toString();
        com.google.javascript.rhino.head.Node node9 = node7.getFirstChild();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        node16.removeProp(23);
        node12.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean22 = node21.hasChildren();
        node12.addChildrenToFront(node21);
        int int24 = node21.getLineno();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = node26.getFirstChild();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 0, node21, node26, 9);
        node7.addChildrenToFront(node36);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(100, node2, node5, node7, (int) ' ');
        java.lang.String str40 = node5.getJsDoc();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = null;
        java.lang.String str42 = node5.toStringTree(scriptNode41);
        java.lang.String str43 = node5.getString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1" + "'", str8, "-1");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        node15.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node23 = node15.getFirstChild();
        node23.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope26 = node23.getScope();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) ' ', node23, 2);
        com.google.javascript.rhino.head.Node node29 = node23.getLastSibling();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node33 = node32.getLastSibling();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) ' ', node29, node32);
        node3.addChildrenToFront(node34);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(26, node34, 11);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator38 = node34.spliterator();
        com.google.javascript.rhino.head.ast.Scope scope39 = null;
        // The following exception was thrown during execution in test generation
        try {
            node34.setScope(scope39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node9.getFirstChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node17.addChildrenToBack(node19);
        node3.addChildrenToBack(node19);
        com.google.javascript.rhino.head.ast.Comment comment22 = node19.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = comment22.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(comment22);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) 'a', node4);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.head.Node node18 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node4, node14, node16, (int) (short) -1);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 1, node16, 12);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = node22.new NodeIterator();
        int int24 = node22.getLineno();
        node22.removeChildren();
        int int26 = node22.getType();
        node22.setLineno(100);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastChild();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        node8.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean18 = node17.hasChildren();
        node8.addChildrenToFront(node17);
        int int20 = node17.getLineno();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node22, 9);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) 'a', node36);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str49 = node48.toString();
        com.google.javascript.rhino.head.Node node50 = node48.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) -1, node36, node46, node48, (int) (short) -1);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString("");
        node58.removeProp(23);
        node54.addChildToFront(node58);
        com.google.javascript.rhino.head.Node node62 = node54.getFirstChild();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node62.addChildrenToBack(node64);
        com.google.javascript.rhino.head.Node node66 = node64.getLastChild();
        java.lang.String str67 = node64.getJsDoc();
        java.lang.Object obj69 = node64.getProp(0);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(3, node17, node36, node64);
        com.google.javascript.rhino.head.ast.Comment comment71 = node70.getJsDocNode();
        node2.addChildrenToFront(node70);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(12, node2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = node73.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "40" + "'", str49, "40");
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(comment71);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(12);
        node2.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(6, node2);
        int int9 = node6.getIntProp(18, 26);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean24 = node23.hasChildren();
        node14.addChildrenToFront(node23);
        int int26 = node23.getLineno();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        node28.addChildToFront(node32);
        com.google.javascript.rhino.head.Node node36 = node28.getFirstChild();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 0, node23, node28, 9);
        boolean boolean39 = node23.hasSideEffects();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node43 = node42.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator44 = node43.new NodeIterator();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        boolean boolean49 = node46.hasSideEffects();
        com.google.javascript.rhino.head.Node node51 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str52 = node51.toString();
        boolean boolean53 = node51.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("");
        node55.removeProp(23);
        node51.addChildToFront(node55);
        com.google.javascript.rhino.head.Node node59 = node51.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment60 = node51.getJsDocNode();
        node46.addChildToBack(node51);
        java.lang.String str62 = node46.toString();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(0, node23, node43, node46, 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator65 = node46.new NodeIterator();
        node6.putProp(19, (java.lang.Object) node46);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator67 = node6.spliterator();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "40" + "'", str52, "40");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(comment60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "40" + "'", str62, "40");
        org.junit.Assert.assertNotNull(nodeSpliterator67);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node51.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) '4', 7);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.Node node15 = node12.getLastSibling();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(13, node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node(12);
        node23.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(6, node23);
        com.google.javascript.rhino.head.Node node28 = node27.getLastChild();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node19, node27, 0);
        node27.setLineno(8);
        node12.addChildToBack(node27);
        com.google.javascript.rhino.head.Node node34 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildAfter(node12, node34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        boolean boolean35 = node32.hasSideEffects();
        node30.addChildrenToFront(node32);
        node32.removeChildren();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        node32.addChildrenToBack(node39);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("");
        node46.removeProp(23);
        node42.addChildToFront(node46);
        com.google.javascript.rhino.head.Node node50 = node42.getFirstChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node50.addChildrenToBack(node52);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node12, node32, node52);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = node54.new NodeIterator();
        com.google.javascript.rhino.head.Node node56 = nodeIterator55.next();
        boolean boolean57 = nodeIterator55.hasNext();
        com.google.javascript.rhino.head.Node node58 = nodeIterator55.next();
        nodeIterator55.remove();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(24, "100");
        int int4 = node3.getType();
        boolean boolean5 = node3.hasChildren();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = node16.new NodeIterator();
        boolean boolean20 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(11, node3, node16);
        boolean boolean22 = node21.hasConsistentReturnUsage();
        java.lang.Class<?> wildcardClass23 = node21.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 24 + "'", int4 == 24);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str3 = node2.toString();
        int int4 = node2.getLineno();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment7 = node6.getJsDocNode();
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        boolean boolean14 = node11.hasSideEffects();
        node9.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(8, node2, node6, node9);
        com.google.javascript.rhino.head.ast.Comment comment17 = node2.getJsDocNode();
        com.google.javascript.rhino.head.Node node18 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean31 = node30.hasChildren();
        node21.addChildrenToFront(node30);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        boolean boolean37 = node34.hasSideEffects();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        boolean boolean41 = node39.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("");
        node43.removeProp(23);
        node39.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = node39.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment48 = node39.getJsDocNode();
        node34.addChildToBack(node39);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(15, node21, node34);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = null;
        java.lang.String str52 = node34.toStringTree(scriptNode51);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newString("");
        node58.removeProp(23);
        node54.addChildToFront(node58);
        com.google.javascript.rhino.head.Node node62 = node54.getFirstChild();
        node62.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope65 = node62.getScope();
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChild((com.google.javascript.rhino.head.Node) scriptNode51, node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100" + "'", str3, "100");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(comment7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(comment48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(scope65);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(7);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str9 = node8.toString();
        boolean boolean10 = node8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("");
        node12.removeProp(23);
        node8.addChildToFront(node12);
        com.google.javascript.rhino.head.Node node16 = node8.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment17 = node8.getJsDocNode();
        node3.addChildToBack(node8);
        java.lang.String str19 = node3.toString();
        com.google.javascript.rhino.head.Node node21 = node3.setType(25);
        com.google.javascript.rhino.head.Node node22 = node3.getFirstChild();
        node1.addChildrenToBack(node3);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "40" + "'", str9, "40");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(9, node5);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(13, node20);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(7, node20);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) 'a', node2, node16, node20, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            node16.setDouble((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope13 = node10.getScope();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) ' ', node10, 2);
        com.google.javascript.rhino.head.Node node16 = node10.getLastSibling();
        com.google.javascript.rhino.head.Node node17 = node10.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = node10.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator35 = node7.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator35);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        boolean boolean35 = node32.hasSideEffects();
        node30.addChildrenToFront(node32);
        node32.removeChildren();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        node32.addChildrenToBack(node39);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str43 = node42.toString();
        boolean boolean44 = node42.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("");
        node46.removeProp(23);
        node42.addChildToFront(node46);
        com.google.javascript.rhino.head.Node node50 = node42.getFirstChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node50.addChildrenToBack(node52);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node12, node32, node52);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = node54.new NodeIterator();
        com.google.javascript.rhino.head.Node node56 = nodeIterator55.next();
        com.google.javascript.rhino.head.Node node58 = node56.setType(2);
        node58.setLineno(2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40" + "'", str43, "40");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 40);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        boolean boolean8 = node3.hasSideEffects();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = node3.iterator();
        node3.putIntProp(17, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            node3.labelId((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeItor9);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        boolean boolean17 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str20 = node19.toString();
        boolean boolean21 = node19.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        node19.addChildToFront(node23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean29 = node28.hasChildren();
        node19.addChildrenToFront(node28);
        node6.addChildToBack(node28);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString(5, "41");
        node28.addChildrenToBack(node34);
        com.google.javascript.rhino.head.ast.Scope scope36 = null;
        node34.setScope(scope36);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "40" + "'", str20, "40");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean2 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node4 = node1.setType(3);
        int int7 = node1.getIntProp(1, 21);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        boolean boolean14 = node11.hasSideEffects();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(0, node11);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str19 = node18.toString();
        boolean boolean20 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newString("");
        node22.removeProp(23);
        node18.addChildToFront(node22);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean28 = node27.hasChildren();
        node18.addChildrenToFront(node27);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasChildren();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) -1, node27, node31, (int) (short) 10);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node11, node31, node38, (int) (short) 0);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("");
        node47.removeProp(23);
        node43.addChildToFront(node47);
        com.google.javascript.rhino.head.Node node51 = node47.getLastChild();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("1");
        node47.addChildrenToBack(node53);
        int int55 = node53.getLineno();
        node53.removeProp(16);
        node11.putProp(19, (java.lang.Object) 16);
        node1.addChildToFront(node11);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "40" + "'", str19, "40");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(0, "40");
        // The following exception was thrown during execution in test generation
        try {
            double double3 = node2.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node10.addChildrenToBack(node12);
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        int int18 = node15.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 10, node10, node15);
        com.google.javascript.rhino.head.Node node20 = node10.getNext();
        int int23 = node10.getIntProp((int) (byte) 0, 4);
        com.google.javascript.rhino.head.Node node24 = node10.getFirstChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node9.addChildrenToBack(node11);
        com.google.javascript.rhino.head.Node node13 = node11.getLastChild();
        java.lang.String str14 = node11.getJsDoc();
        java.lang.Object obj16 = node11.getProp(0);
        boolean boolean17 = node11.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(12);
        node20.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(6, node20);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor25 = node24.iterator();
        node24.removeChildren();
        node11.addChildToFront(node24);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor28 = node24.iterator();
        // The following exception was thrown during execution in test generation
        try {
            node24.setDouble((double) 17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeItor25);
        org.junit.Assert.assertNotNull(nodeItor28);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.lang.String str17 = node1.toString();
        com.google.javascript.rhino.head.Node node19 = node1.setType(25);
        int int22 = node1.getIntProp(100, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node24 = node1.setType(10);
        // The following exception was thrown during execution in test generation
        try {
            node24.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(0, node3);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean20 = node19.hasChildren();
        node10.addChildrenToFront(node19);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasChildren();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) -1, node19, node23, (int) (short) 10);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node3, node23, node30, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment33 = null;
        node32.setJsDocNode(comment33);
        com.google.javascript.rhino.head.Node node35 = node32.getLastChild();
        node35.setString("1");
        // The following exception was thrown during execution in test generation
        try {
            node35.labelId(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20);
        int int25 = node20.getLineno();
        node16.addChildToFront(node20);
        int int27 = node20.getType();
        java.lang.String str28 = node20.getJsDoc();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(40, node20, (int) (short) 1);
        boolean boolean31 = node20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node32 = node20.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node32.labelId(2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(node32);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str3 = node2.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = node2.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1" + "'", str3, "1");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        com.google.javascript.rhino.head.Node node21 = node15.getLastSibling();
        node4.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(13, node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(12);
        node35.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(6, node35);
        com.google.javascript.rhino.head.Node node40 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node31, node39, 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node45.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(20, node27, node31, node45);
        com.google.javascript.rhino.head.Node node50 = node27.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node59 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((-1), node21, node27, node59, 3);
        int int62 = node27.getLineno();
        node27.setLineno(8);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) (short) -1, "-1");
        java.lang.String str3 = node2.getString();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node2.iterator();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = node2.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1" + "'", str3, "-1");
        org.junit.Assert.assertNotNull(nodeItor4);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(0, (int) (byte) 100);
        java.lang.Object obj4 = node2.getProp(20);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node2.removeProp((int) (short) 10);
        java.lang.Object obj6 = node2.getProp(15);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node((int) (short) 1, node2);
        int int10 = node2.getIntProp(15, (-1));
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = node6.iterator();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(22, node6, 7);
        java.lang.String str12 = node11.getJsDoc();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        boolean boolean20 = node17.hasSideEffects();
        node15.addChildrenToFront(node17);
        node17.removeChildren();
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("hi!");
        node17.addChildrenToBack(node24);
        com.google.javascript.rhino.head.Node node27 = node17.setType((int) (short) -1);
        com.google.javascript.rhino.head.Node node29 = node27.setType(23);
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str34 = node33.toString();
        boolean boolean35 = node33.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        node37.removeProp(23);
        node33.addChildToFront(node37);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean43 = node42.hasChildren();
        node33.addChildrenToFront(node42);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) -1, node42, node46, (int) (short) 10);
        com.google.javascript.rhino.head.Node node51 = node50.getLastChild();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str57 = node56.toString();
        boolean boolean58 = node56.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString("");
        node60.removeProp(23);
        node56.addChildToFront(node60);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) 'a', node56);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node68 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str69 = node68.toString();
        com.google.javascript.rhino.head.Node node70 = node68.getLastChild();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) -1, node56, node66, node68, (int) (short) -1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 1, node68, 12);
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node(23);
        node76.removeProp(25);
        boolean boolean79 = node76.hasChildren();
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node((-1), node51, node68, node76);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node(0, node29, node80);
        node1.addChildAfter(node11, node81);
        int int85 = node11.getIntProp(52, 16);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "40" + "'", str34, "40");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1" + "'", str47, "-1");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "40" + "'", str57, "40");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "40" + "'", str69, "40");
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 16 + "'", int85 == 16);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (short) 10);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        node30.setString("100");
        com.google.javascript.rhino.head.Node node33 = node30.getLastSibling();
        node19.putProp(10, (java.lang.Object) node33);
        boolean boolean35 = node33.hasSideEffects();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        boolean boolean6 = node3.hasSideEffects();
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str10 = node9.toString();
        boolean boolean11 = node9.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("");
        node13.removeProp(23);
        node9.addChildToFront(node13);
        com.google.javascript.rhino.head.Node node17 = node9.getFirstChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node17.addChildrenToBack(node19);
        node3.addChildrenToBack(node19);
        com.google.javascript.rhino.head.Node node23 = node3.setType(23);
        int int24 = node23.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = node23.getExistingIntProp(17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40" + "'", str10, "40");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 23 + "'", int24 == 23);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(12, "");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.head.Node node3 = node1.getLastChild();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        int int19 = node16.getLineno();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, node16, node21, 9);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("");
        node39.removeProp(23);
        node35.addChildToFront(node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node35);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str48 = node47.toString();
        com.google.javascript.rhino.head.Node node49 = node47.getLastChild();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) -1, node35, node45, node47, (int) (short) -1);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str54 = node53.toString();
        boolean boolean55 = node53.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        node57.removeProp(23);
        node53.addChildToFront(node57);
        com.google.javascript.rhino.head.Node node61 = node53.getFirstChild();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node61.addChildrenToBack(node63);
        com.google.javascript.rhino.head.Node node65 = node63.getLastChild();
        java.lang.String str66 = node63.getJsDoc();
        java.lang.Object obj68 = node63.getProp(0);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(3, node16, node35, node63);
        com.google.javascript.rhino.head.ast.Comment comment70 = node69.getJsDocNode();
        node1.addChildrenToFront(node69);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor72 = node69.iterator();
        node69.putIntProp(32, (-1));
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "40" + "'", str48, "40");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "40" + "'", str54, "40");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(comment70);
        org.junit.Assert.assertNotNull(nodeItor72);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12);
        node12.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(6, node12);
        com.google.javascript.rhino.head.Node node17 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node8, node16, 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node22.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(20, node4, node8, node22);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator27 = node8.new NodeIterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = node8.new NodeIterator();
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str33 = node32.toString();
        boolean boolean34 = node32.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        node36.removeProp(23);
        node32.addChildToFront(node36);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean42 = node41.hasChildren();
        node32.addChildrenToFront(node41);
        int int44 = node41.getLineno();
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = node46.getFirstChild();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (short) 0, node41, node46, 9);
        boolean boolean57 = node41.hasSideEffects();
        com.google.javascript.rhino.head.Node node60 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node61 = node60.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator62 = node61.new NodeIterator();
        com.google.javascript.rhino.head.Node node64 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str65 = node64.toString();
        boolean boolean66 = node64.hasConsistentReturnUsage();
        boolean boolean67 = node64.hasSideEffects();
        com.google.javascript.rhino.head.Node node69 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str70 = node69.toString();
        boolean boolean71 = node69.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node73 = com.google.javascript.rhino.head.Node.newString("");
        node73.removeProp(23);
        node69.addChildToFront(node73);
        com.google.javascript.rhino.head.Node node77 = node69.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment78 = node69.getJsDocNode();
        node64.addChildToBack(node69);
        java.lang.String str80 = node64.toString();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node(0, node41, node61, node64, 1);
        node61.setString("23");
        node8.addChildToFront(node61);
        node61.putIntProp((int) (byte) -1, 20);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "40" + "'", str33, "40");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "40" + "'", str65, "40");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(comment78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "40" + "'", str80, "40");
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean14 = node13.hasChildren();
        node4.addChildrenToFront(node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) -1, node13, node17, (int) (short) 10);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str28 = node27.toString();
        boolean boolean29 = node27.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("");
        node31.removeProp(23);
        node27.addChildToFront(node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) 'a', node27);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str40 = node39.toString();
        com.google.javascript.rhino.head.Node node41 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) -1, node27, node37, node39, (int) (short) -1);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 1, node39, 12);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(23);
        node47.removeProp(25);
        boolean boolean50 = node47.hasChildren();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((-1), node22, node39, node47);
        boolean boolean52 = node39.hasSideEffects();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (short) 10, node39, (int) (short) 1);
        com.google.javascript.rhino.head.Node node55 = node54.getLastSibling();
        java.lang.Object obj57 = node55.getProp(0);
        boolean boolean58 = node55.hasSideEffects();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "40" + "'", str28, "40");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40" + "'", str40, "40");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 0.0f);
        com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node(7);
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(22, node2, node4);
        node2.setLineno(6);
        com.google.javascript.rhino.head.Node node8 = node2.getNext();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("-1");
        node10.removeProp(25);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        int int17 = node14.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString("");
        node27.removeProp(23);
        node23.addChildToFront(node27);
        com.google.javascript.rhino.head.Node node31 = node23.getFirstChild();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node31.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("");
        int int39 = node36.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 10, node31, node36);
        com.google.javascript.rhino.head.Node node42 = node31.setType(18);
        node14.addChildAfter(node20, node42);
        node10.addChildToFront(node42);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator45 = node10.spliterator();
        node2.addChildToFront(node10);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "40" + "'", str24, "40");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeSpliterator45);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(13, node7);
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(7, node7);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node9.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node(12);
        node15.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(6, node15);
        com.google.javascript.rhino.head.Node node20 = node19.getLastChild();
        node9.addChildToFront(node19);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(97, node3, node9);
        boolean boolean23 = node22.hasChildren();
        boolean boolean24 = node22.hasSideEffects();
        node22.putIntProp(4, 41);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        node12.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope15 = node12.getScope();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) ' ', node12, 2);
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean32 = node31.hasChildren();
        node22.addChildrenToFront(node31);
        int int34 = node31.getLineno();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str37 = node36.toString();
        boolean boolean38 = node36.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString("");
        node40.removeProp(23);
        node36.addChildToFront(node40);
        com.google.javascript.rhino.head.Node node44 = node36.getFirstChild();
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node((int) (short) 0, node31, node36, 9);
        boolean boolean47 = node31.hasSideEffects();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node51 = node50.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = node51.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString("");
        node63.removeProp(23);
        node59.addChildToFront(node63);
        com.google.javascript.rhino.head.Node node67 = node59.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment68 = node59.getJsDocNode();
        node54.addChildToBack(node59);
        java.lang.String str70 = node54.toString();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(0, node31, node51, node54, 1);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str77 = node76.toString();
        boolean boolean78 = node76.hasConsistentReturnUsage();
        boolean boolean79 = node76.hasSideEffects();
        node74.addChildrenToFront(node76);
        node76.removeChildren();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, node17, node51, node76);
        com.google.javascript.rhino.head.Node node85 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str86 = node85.toString();
        boolean boolean87 = node85.hasConsistentReturnUsage();
        boolean boolean88 = node85.hasSideEffects();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(0, node85);
        com.google.javascript.rhino.head.ast.Comment comment90 = node85.getJsDocNode();
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(18, node17, node85);
        java.lang.String str92 = node85.getJsDoc();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "40" + "'", str37, "40");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(comment68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "40" + "'", str70, "40");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "40" + "'", str77, "40");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "40" + "'", str86, "40");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(comment90);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj3 = node1.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = node1.iterator();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node15.addChildrenToBack(node17);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        int int23 = node20.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (short) 10, node15, node20);
        com.google.javascript.rhino.head.Node node26 = node15.setType(18);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("");
        node33.removeProp(23);
        node29.addChildToFront(node33);
        com.google.javascript.rhino.head.Node node37 = node29.getFirstChild();
        node37.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope40 = node37.getScope();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) ' ', node37, 2);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator43 = node37.spliterator();
        int int46 = node37.getIntProp(1, 15);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildAfter(node26, node37);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: newChild had siblings in addChildAfter");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(scope40);
        org.junit.Assert.assertNotNull(nodeSpliterator43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node4.removeChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1" + "'", str3, "1");
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((-1), 0);
        com.google.javascript.rhino.head.Node node4 = node2.setType((int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(4, 12);
        node4.addChildToFront(node7);
        node4.setLineno(16);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean3 = node2.hasChildren();
        java.lang.String str4 = node2.getJsDoc();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(13, node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(12);
        node17.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(6, node17);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node13, node21, 0);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node27.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(20, node9, node13, node27);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(13, node39);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(7, node39);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node41.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(12);
        node47.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(6, node47);
        com.google.javascript.rhino.head.Node node52 = node51.getLastChild();
        node41.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(97, node35, node41);
        node31.addChildrenToBack(node54);
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        int int60 = node57.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newString("");
        node70.removeProp(23);
        node66.addChildToFront(node70);
        com.google.javascript.rhino.head.Node node74 = node66.getFirstChild();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node74.addChildrenToBack(node76);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("");
        int int82 = node79.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((int) (short) 10, node74, node79);
        com.google.javascript.rhino.head.Node node85 = node74.setType(18);
        node57.addChildAfter(node63, node85);
        node57.putIntProp(32, 26);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(15, node2, node54, node57, 1);
        boolean boolean92 = node91.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            node91.labelId(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        boolean boolean13 = node10.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(0, node10);
        node5.addChildrenToBack(node14);
        node3.addChildToFront(node5);
        java.lang.String str17 = node5.getString();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(13, node5);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newString("");
        node24.removeProp(23);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str30 = node29.toString();
        boolean boolean31 = node29.hasConsistentReturnUsage();
        boolean boolean32 = node29.hasSideEffects();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(0, node29);
        node24.addChildrenToBack(node33);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(9, node24);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(13, node39);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(7, node39);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) 'a', node21, node35, node39, (int) (short) 1);
        com.google.javascript.rhino.head.Node node44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, node18, node21, node44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "40" + "'", str30, "40");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(13, node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(12);
        node17.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(6, node17);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node13, node21, 0);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node27.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(20, node9, node13, node27);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str35 = node34.toString();
        boolean boolean36 = node34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        node34.addChildToFront(node38);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) 'a', node34);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str47 = node46.toString();
        boolean boolean48 = node46.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("");
        node50.removeProp(23);
        node46.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = node46.getFirstChild();
        node54.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope57 = node54.getScope();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) ' ', node54, 2);
        com.google.javascript.rhino.head.Node node60 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node64 = node63.getLastSibling();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) ' ', node60, node63);
        node34.addChildrenToFront(node65);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(24, node4, node31, node65, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope69 = node31.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "40" + "'", str35, "40");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40" + "'", str47, "40");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(scope57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        int int14 = node11.getLineno();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, node11, node16, 9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator27 = node16.new NodeIterator();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        int int33 = node31.getLineno();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator34 = node31.spliterator();
        node16.putProp((int) '4', (java.lang.Object) node31);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = node31.getExistingIntProp(21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator34);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node10 = node2.getFirstChild();
        node10.setString("100");
        com.google.javascript.rhino.head.Node node13 = node10.getLastSibling();
        com.google.javascript.rhino.head.ast.Scope scope14 = null;
        node13.setScope(scope14);
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        boolean boolean29 = node26.hasSideEffects();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(0, node26);
        node21.addChildrenToBack(node30);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(9, node21);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(13, node36);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(7, node36);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) 'a', node18, node32, node36, (int) (short) 1);
        boolean boolean41 = node18.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node43 = node18.setType(3);
        java.lang.String str44 = node43.getJsDoc();
        node43.putIntProp(1, 24);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(13, node54);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(12);
        node58.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(6, node58);
        com.google.javascript.rhino.head.Node node63 = node62.getLastChild();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node54, node62, 0);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(17, node50, node65);
        com.google.javascript.rhino.head.Node node67 = node66.getLastSibling();
        node66.putIntProp((int) (byte) 100, (int) (byte) 0);
        java.lang.Object obj72 = node66.getProp(97);
        node43.addChildrenToBack(node66);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scope14, node66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(obj72);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        node2.putIntProp(0, 18);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2);
        com.google.javascript.rhino.head.ast.Comment comment7 = node6.getJsDocNode();
        com.google.javascript.rhino.head.Node node8 = node6.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(comment7);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(25, 24);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = node2.getExistingIntProp(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("");
        node8.removeProp(23);
        node4.addChildToFront(node8);
        com.google.javascript.rhino.head.Node node12 = node4.getFirstChild();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node12.addChildrenToBack(node14);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newString("");
        int int20 = node17.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) 10, node12, node17);
        com.google.javascript.rhino.head.Node node23 = node12.setType(18);
        boolean boolean24 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) 19);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newString("");
        node32.removeProp(23);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        boolean boolean40 = node37.hasSideEffects();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(0, node37);
        node32.addChildrenToBack(node41);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node(9, node32);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(13, node47);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(7, node47);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) 'a', node29, node43, node47, (int) (short) 1);
        boolean boolean52 = node29.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node54 = node29.setType(3);
        int int55 = node54.getLineno();
        node26.addChildToFront(node54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((-1), node12, node26);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(24, node26);
        // The following exception was thrown during execution in test generation
        try {
            node26.setString("41");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("");
        int int4 = node1.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newString("");
        node14.removeProp(23);
        node10.addChildToFront(node14);
        com.google.javascript.rhino.head.Node node18 = node10.getFirstChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node18.addChildrenToBack(node20);
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        int int26 = node23.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 10, node18, node23);
        com.google.javascript.rhino.head.Node node29 = node18.setType(18);
        node1.addChildAfter(node7, node29);
        com.google.javascript.rhino.head.Node node32 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean33 = node32.hasSideEffects();
        node7.addChildrenToFront(node32);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean47 = node46.hasChildren();
        node37.addChildrenToFront(node46);
        int int49 = node46.getLineno();
        int int50 = node46.getType();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node46);
        node7.addChildrenToFront(node51);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator53 = node7.new NodeIterator();
        com.google.javascript.rhino.head.Node node54 = nodeIterator53.next();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope55 = node54.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "40" + "'", str11, "40");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int2 = node1.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = node32.new NodeIterator();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment49 = node40.getJsDocNode();
        node35.addChildToBack(node40);
        java.lang.String str51 = node35.toString();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, node12, node32, node35, 1);
        com.google.javascript.rhino.head.ast.Comment comment54 = node53.getJsDocNode();
        int int57 = node53.getIntProp((int) (byte) 10, (int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(comment49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertNull(comment54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str3 = node2.toString();
        int int4 = node2.getLineno();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment7 = node6.getJsDocNode();
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        boolean boolean14 = node11.hasSideEffects();
        node9.addChildrenToFront(node11);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(8, node2, node6, node9);
        com.google.javascript.rhino.head.ast.Comment comment17 = node2.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node18 = comment17.getFirstChild();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100" + "'", str3, "100");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(comment7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(comment17);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str4 = node3.toString();
        int int5 = node3.getLineno();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment8 = node7.getJsDocNode();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        boolean boolean15 = node12.hasSideEffects();
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(8, node3, node7, node10);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str23 = node22.toString();
        boolean boolean24 = node22.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString("");
        node26.removeProp(23);
        node22.addChildToFront(node26);
        com.google.javascript.rhino.head.Node node30 = node22.getFirstChild();
        node30.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope33 = node30.getScope();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) ' ', node30, 2);
        com.google.javascript.rhino.head.Node node36 = node30.getLastSibling();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node40 = node39.getLastSibling();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) ' ', node36, node39);
        java.lang.String str42 = node36.getString();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str45 = node44.toString();
        boolean boolean46 = node44.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node48 = com.google.javascript.rhino.head.Node.newString("");
        node48.removeProp(23);
        node44.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean54 = node53.hasChildren();
        node44.addChildrenToFront(node53);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator56 = node53.new NodeIterator();
        com.google.javascript.rhino.head.Node node58 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str59 = node58.toString();
        com.google.javascript.rhino.head.Node node60 = node58.getLastSibling();
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str64 = node63.toString();
        boolean boolean65 = node63.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node67 = com.google.javascript.rhino.head.Node.newString("");
        node67.removeProp(23);
        node63.addChildToFront(node67);
        com.google.javascript.rhino.head.Node node71 = node63.getFirstChild();
        node71.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope74 = node71.getScope();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) ' ', node71, 2);
        com.google.javascript.rhino.head.Node node77 = node71.getLastSibling();
        node60.addChildToFront(node77);
        node53.addChildrenToFront(node60);
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str82 = node81.toString();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (short) 10, node36, node53, node81, 24);
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node((int) 'a', node3, node84);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = node3.getExistingIntProp((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100" + "'", str4, "100");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(comment8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "40" + "'", str23, "40");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(scope33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100" + "'", str42, "100");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "40" + "'", str59, "40");
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "40" + "'", str64, "40");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(scope74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "100" + "'", str82, "100");
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node22 = com.google.javascript.rhino.head.Node.newNumber((double) 7);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node12, node22, (-1));
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        boolean boolean33 = node30.hasSideEffects();
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.head.Node node35 = node30.getLastSibling();
        int int36 = node30.getLineno();
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString("");
        node42.removeProp(23);
        node38.addChildToFront(node42);
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean48 = node47.hasChildren();
        node38.addChildrenToFront(node47);
        int int50 = node47.getLineno();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (byte) 1);
        node52.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((int) (short) 10, node30, node47, node52, 0);
        node22.putProp(15, (java.lang.Object) 0);
        java.lang.String str58 = node22.toString();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator59 = node22.spliterator();
        boolean boolean60 = node22.hasSideEffects();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "40" + "'", str58, "40");
        org.junit.Assert.assertNotNull(nodeSpliterator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        boolean boolean28 = node12.hasSideEffects();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node32 = node31.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = node32.new NodeIterator();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.hasConsistentReturnUsage();
        boolean boolean38 = node35.hasSideEffects();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment49 = node40.getJsDocNode();
        node35.addChildToBack(node40);
        java.lang.String str51 = node35.toString();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, node12, node32, node35, 1);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator54 = node35.spliterator();
        com.google.javascript.rhino.head.Node node55 = node35.getNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = node55.getJsDoc();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(comment49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertNotNull(nodeSpliterator54);
        org.junit.Assert.assertNull(node55);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node11.addChildrenToBack(node13);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newString("");
        int int19 = node16.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) 10, node11, node16);
        com.google.javascript.rhino.head.Node node21 = node11.getNext();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("");
        node23.removeProp(23);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str29 = node28.toString();
        boolean boolean30 = node28.hasConsistentReturnUsage();
        boolean boolean31 = node28.hasSideEffects();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(0, node28);
        node23.addChildrenToBack(node32);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node37 = node36.getLastSibling();
        node32.addChildrenToBack(node37);
        node21.addChildToBack(node32);
        com.google.javascript.rhino.head.Node node42 = com.google.javascript.rhino.head.Node.newString(10, "100");
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(13, node46);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(7, node46);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node48.addChildToFront(node50);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(12);
        node54.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(6, node54);
        com.google.javascript.rhino.head.Node node59 = node58.getLastChild();
        node48.addChildToFront(node58);
        node42.addChildToFront(node48);
        com.google.javascript.rhino.head.Node node63 = com.google.javascript.rhino.head.Node.newNumber((double) 0L);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newString("");
        node65.removeProp(23);
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str71 = node70.toString();
        boolean boolean72 = node70.hasConsistentReturnUsage();
        boolean boolean73 = node70.hasSideEffects();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(0, node70);
        node65.addChildrenToBack(node74);
        node63.addChildToFront(node65);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor77 = node63.iterator();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(14, node21, node42, node63, (int) (byte) -1);
        com.google.javascript.rhino.head.ast.Scope scope80 = null;
        // The following exception was thrown during execution in test generation
        try {
            node63.setScope(scope80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "40" + "'", str71, "40");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeItor77);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, node8);
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(12);
        node12.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node(6, node12);
        com.google.javascript.rhino.head.Node node17 = node16.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node8, node16, 0);
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node22.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node(20, node4, node8, node22);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString((int) '4', "40");
        com.google.javascript.rhino.head.Node node33 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(0, node33, node36);
        int int38 = node33.getLineno();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator39 = node33.new NodeIterator();
        node33.removeProp(5);
        node30.addChildToFront(node33);
        node22.putProp(8, (java.lang.Object) node30);
        com.google.javascript.rhino.head.ast.Scope scope44 = null;
        node30.setScope(scope44);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        node5.removeProp(23);
        node1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node node9 = node1.getFirstChild();
        node9.setLineno(18);
        boolean boolean12 = node9.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(5, 11);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = node2.new NodeIterator();
        com.google.javascript.rhino.head.Node node5 = node2.setType(12);
        // The following exception was thrown during execution in test generation
        try {
            node5.setString("2");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 1.0f);
        java.lang.Object obj4 = node2.getProp((int) 'a');
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor5 = node2.iterator();
        int int8 = node2.getIntProp((int) (byte) -1, 17);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(13, node12);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(7, node12);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node14.addChildToFront(node16);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(12);
        node20.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(6, node20);
        com.google.javascript.rhino.head.Node node25 = node24.getLastChild();
        node14.addChildToFront(node24);
        node2.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node2, node29);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = node2.new NodeIterator();
        boolean boolean32 = node2.hasConsistentReturnUsage();
        // The following exception was thrown during execution in test generation
        try {
            node2.setString("24");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 17 + "'", int8 == 17);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment12 = node3.getJsDocNode();
        int int13 = node3.getType();
        node3.setDouble((double) 17);
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        java.lang.String str25 = node21.getString();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString((int) (short) 0, "-1");
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(10, node3, node21, node28, 14);
        java.lang.String str31 = node30.getJsDoc();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(17, node30, (int) (byte) 0);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str36 = node35.toString();
        com.google.javascript.rhino.head.Node node37 = node35.getLastSibling();
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("");
        node44.removeProp(23);
        node40.addChildToFront(node44);
        com.google.javascript.rhino.head.Node node48 = node40.getFirstChild();
        node48.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope51 = node48.getScope();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) ' ', node48, 2);
        com.google.javascript.rhino.head.Node node54 = node48.getLastSibling();
        node37.addChildToFront(node54);
        node33.addChildrenToBack(node54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = node33.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(comment12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "40" + "'", str36, "40");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(scope51);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        com.google.javascript.rhino.head.Node node4 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node15 = node7.getFirstChild();
        node15.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope18 = node15.getScope();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) ' ', node15, 2);
        com.google.javascript.rhino.head.Node node21 = node15.getLastSibling();
        node4.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node27 = node26.getLastSibling();
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(13, node31);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(12);
        node35.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(6, node35);
        com.google.javascript.rhino.head.Node node40 = node39.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node31, node39, 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node45.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(20, node27, node31, node45);
        com.google.javascript.rhino.head.Node node50 = node27.getLastChild();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str55 = node54.toString();
        boolean boolean56 = node54.hasConsistentReturnUsage();
        boolean boolean57 = node54.hasSideEffects();
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.head.Node node59 = node54.getLastSibling();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((-1), node21, node27, node59, 3);
        node21.putIntProp((int) '4', 22);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40" + "'", str55, "40");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str2 = node1.toString();
        boolean boolean3 = node1.hasConsistentReturnUsage();
        boolean boolean4 = node1.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newString("");
        node10.removeProp(23);
        node6.addChildToFront(node10);
        com.google.javascript.rhino.head.Node node14 = node6.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment15 = node6.getJsDocNode();
        node1.addChildToBack(node6);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = node1.iterator();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20, node23);
        com.google.javascript.rhino.head.Node node25 = node24.getLastSibling();
        node1.addChildToFront(node24);
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str31 = node30.toString();
        boolean boolean32 = node30.hasConsistentReturnUsage();
        boolean boolean33 = node30.hasSideEffects();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node(0, node30);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("");
        node41.removeProp(23);
        node37.addChildToFront(node41);
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean47 = node46.hasChildren();
        node37.addChildrenToFront(node46);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasChildren();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((int) (short) -1, node46, node50, (int) (short) 10);
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (byte) 10, node30, node50, node57, (int) (short) 0);
        node1.addChildToBack(node57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "40" + "'", str2, "40");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "40" + "'", str31, "40");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1" + "'", str51, "-1");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, node2, node5);
        int int7 = node6.getType();
        // The following exception was thrown during execution in test generation
        try {
            node6.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(23);
        node1.removeProp(25);
        boolean boolean4 = node1.hasChildren();
        node1.putIntProp(21, 25);
        int int8 = node1.getLineno();
        int int9 = node1.getType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(13, node6);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(12);
        node10.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(6, node10);
        com.google.javascript.rhino.head.Node node15 = node14.getLastChild();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node6, node14, 0);
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(17, node2, node17);
        com.google.javascript.rhino.head.Node node19 = node18.getLastSibling();
        com.google.javascript.rhino.head.Node node20 = node18.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope21 = node18.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        boolean boolean51 = node38.hasSideEffects();
        com.google.javascript.rhino.head.Node node55 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(13, node55);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(12);
        node59.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(6, node59);
        com.google.javascript.rhino.head.Node node64 = node63.getLastChild();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node55, node63, 0);
        node38.addChildToBack(node66);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor68 = node66.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeItor68);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean3 = node2.hasChildren();
        java.lang.String str4 = node2.getJsDoc();
        com.google.javascript.rhino.head.Node node8 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(13, node13);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(12);
        node17.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(6, node17);
        com.google.javascript.rhino.head.Node node22 = node21.getLastChild();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node13, node21, 0);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node27.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(20, node9, node13, node27);
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString((int) '4', "hi!");
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(13, node39);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(7, node39);
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        node41.addChildToFront(node43);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(12);
        node47.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(6, node47);
        com.google.javascript.rhino.head.Node node52 = node51.getLastChild();
        node41.addChildToFront(node51);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(97, node35, node41);
        node31.addChildrenToBack(node54);
        com.google.javascript.rhino.head.Node node57 = com.google.javascript.rhino.head.Node.newString("");
        int int60 = node57.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node66 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str67 = node66.toString();
        boolean boolean68 = node66.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newString("");
        node70.removeProp(23);
        node66.addChildToFront(node70);
        com.google.javascript.rhino.head.Node node74 = node66.getFirstChild();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node74.addChildrenToBack(node76);
        com.google.javascript.rhino.head.Node node79 = com.google.javascript.rhino.head.Node.newString("");
        int int82 = node79.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((int) (short) 10, node74, node79);
        com.google.javascript.rhino.head.Node node85 = node74.setType(18);
        node57.addChildAfter(node63, node85);
        node57.putIntProp(32, 26);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(15, node2, node54, node57, 1);
        boolean boolean92 = node54.hasChildren();
        com.google.javascript.rhino.head.ast.Comment comment93 = null;
        node54.setJsDocNode(comment93);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = node54.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "40" + "'", str67, "40");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("1");
        com.google.javascript.rhino.head.ast.Scope scope2 = node1.getScope();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node3 = scope2.getLastSibling();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(scope2);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((int) 'a', node3);
        com.google.javascript.rhino.head.Node node13 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str16 = node15.toString();
        com.google.javascript.rhino.head.Node node17 = node15.getLastChild();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) -1, node3, node13, node15, (int) (short) -1);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        int int22 = node21.getLineno();
        node19.addChildToBack(node21);
        com.google.javascript.rhino.head.ast.Scope scope24 = null;
        node21.setScope(scope24);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "40" + "'", str16, "40");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        boolean boolean19 = node16.hasSideEffects();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newString("");
        node25.removeProp(23);
        node21.addChildToFront(node25);
        com.google.javascript.rhino.head.Node node29 = node21.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment30 = node21.getJsDocNode();
        node16.addChildToBack(node21);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(15, node3, node16);
        com.google.javascript.rhino.head.Node node34 = com.google.javascript.rhino.head.Node.newString("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = null;
        java.lang.String str36 = node34.toStringTree(scriptNode35);
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newString("");
        node38.removeProp(23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor41 = node38.iterator();
        com.google.javascript.rhino.head.ast.Scope scope42 = null;
        node38.setScope(scope42);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(100, node3, (com.google.javascript.rhino.head.Node) scriptNode35, (com.google.javascript.rhino.head.Node) scope42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(comment30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeItor41);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.hasConsistentReturnUsage();
        boolean boolean7 = node4.hasSideEffects();
        node2.addChildrenToFront(node4);
        node4.removeChildren();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("hi!");
        node4.addChildrenToBack(node11);
        boolean boolean13 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node node14 = node4.getFirstChild();
        boolean boolean15 = node4.hasSideEffects();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = node4.new NodeIterator();
        com.google.javascript.rhino.head.Node node17 = nodeIterator16.next();
        com.google.javascript.rhino.head.Node node19 = com.google.javascript.rhino.head.Node.newString("");
        node19.removeProp(23);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor22 = node19.iterator();
        java.lang.Object obj24 = node19.getProp((int) (byte) 1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator25 = node19.new NodeIterator();
        java.lang.String str26 = node19.getJsDoc();
        java.lang.String str27 = node19.getJsDoc();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(2, node17, node19, (int) (byte) 0);
        node29.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str22 = node21.toString();
        boolean boolean23 = node21.hasConsistentReturnUsage();
        boolean boolean24 = node21.hasSideEffects();
        node19.addChildrenToFront(node21);
        node21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("hi!");
        node21.addChildrenToBack(node28);
        int int32 = node28.getIntProp(0, 22);
        node11.putProp(15, (java.lang.Object) 22);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) -1, node11, 2);
        int int38 = node11.getIntProp(14, 0);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator39 = node11.spliterator();
        java.lang.Class<?> wildcardClass40 = nodeSpliterator39.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "40" + "'", str22, "40");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        java.lang.String str4 = node3.toString();
        int int5 = node3.getLineno();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) 0);
        com.google.javascript.rhino.head.ast.Comment comment8 = node7.getJsDocNode();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.hasConsistentReturnUsage();
        boolean boolean15 = node12.hasSideEffects();
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(8, node3, node7, node10);
        java.lang.Object obj19 = node10.getProp((int) (short) -1);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(9, node10);
        com.google.javascript.rhino.head.Node node24 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str25 = node24.toString();
        boolean boolean26 = node24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("");
        node28.removeProp(23);
        node24.addChildToFront(node28);
        com.google.javascript.rhino.head.Node node32 = node24.getFirstChild();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node32.addChildrenToBack(node34);
        com.google.javascript.rhino.head.Node node37 = com.google.javascript.rhino.head.Node.newString("");
        int int40 = node37.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (short) 10, node32, node37);
        com.google.javascript.rhino.head.Node node45 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(13, node45);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(7, node45);
        node47.removeChildren();
        java.lang.String str49 = node47.getJsDoc();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(5, node41, node47, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node52 = node20.getChildBefore(node41);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100" + "'", str4, "100");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(comment8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "40" + "'", str13, "40");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40" + "'", str25, "40");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("1");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor30 = node29.iterator();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(21, node27, node29, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            node27.setString("40");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeItor30);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(24, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            node2.setDouble((double) 14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        int int15 = node12.getLineno();
        com.google.javascript.rhino.head.Node node17 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("");
        node21.removeProp(23);
        node17.addChildToFront(node21);
        com.google.javascript.rhino.head.Node node25 = node17.getFirstChild();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((int) (short) 0, node12, node17, 9);
        com.google.javascript.rhino.head.Node node31 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str32 = node31.toString();
        boolean boolean33 = node31.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node35 = com.google.javascript.rhino.head.Node.newString("");
        node35.removeProp(23);
        node31.addChildToFront(node35);
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) 'a', node31);
        com.google.javascript.rhino.head.Node node41 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str44 = node43.toString();
        com.google.javascript.rhino.head.Node node45 = node43.getLastChild();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) -1, node31, node41, node43, (int) (short) -1);
        com.google.javascript.rhino.head.Node node49 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str50 = node49.toString();
        boolean boolean51 = node49.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("");
        node53.removeProp(23);
        node49.addChildToFront(node53);
        com.google.javascript.rhino.head.Node node57 = node49.getFirstChild();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node57.addChildrenToBack(node59);
        com.google.javascript.rhino.head.Node node61 = node59.getLastChild();
        java.lang.String str62 = node59.getJsDoc();
        java.lang.Object obj64 = node59.getProp(0);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(3, node12, node31, node59);
        com.google.javascript.rhino.head.Node node66 = node59.getLastSibling();
        node66.putIntProp((int) (byte) 10, 1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "40" + "'", str18, "40");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "40" + "'", str32, "40");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "40" + "'", str44, "40");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "40" + "'", str50, "40");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        com.google.javascript.rhino.head.Node node4 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.head.Node node9 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(13, node9);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(12);
        node13.putIntProp(14, 3);
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(6, node13);
        com.google.javascript.rhino.head.Node node18 = node17.getLastChild();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (byte) 100, node9, node17, 0);
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (byte) 1, 8);
        node23.putIntProp(20, 100);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(20, node5, node9, node23);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node5.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node31 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) '#', node29, node31, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean13 = node12.hasChildren();
        node3.addChildrenToFront(node12);
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (byte) -1);
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (short) -1, node12, node16, (int) (short) 10);
        com.google.javascript.rhino.head.Node node21 = node20.getLastChild();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str27 = node26.toString();
        boolean boolean28 = node26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node30 = com.google.javascript.rhino.head.Node.newString("");
        node30.removeProp(23);
        node26.addChildToFront(node30);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) 'a', node26);
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("-1");
        com.google.javascript.rhino.head.Node node38 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.head.Node node40 = node38.getLastChild();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((int) (short) -1, node26, node36, node38, (int) (short) -1);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 1, node38, 12);
        com.google.javascript.rhino.head.Node node46 = new com.google.javascript.rhino.head.Node(23);
        node46.removeProp(25);
        boolean boolean49 = node46.hasChildren();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((-1), node21, node38, node46);
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        node54.removeProp(23);
        com.google.javascript.rhino.head.Node node59 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str60 = node59.toString();
        boolean boolean61 = node59.hasConsistentReturnUsage();
        boolean boolean62 = node59.hasSideEffects();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(0, node59);
        node54.addChildrenToBack(node63);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(9, node54);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((int) '#', node65);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node70 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str71 = node70.toString();
        boolean boolean72 = node70.hasConsistentReturnUsage();
        boolean boolean73 = node70.hasSideEffects();
        node68.addChildrenToFront(node70);
        node70.removeChildren();
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (short) 0);
        node65.addChildAfter(node70, node77);
        com.google.javascript.rhino.head.Node node79 = node77.getNext();
        int int80 = node77.getType();
        node50.addChildToBack(node77);
        // The following exception was thrown during execution in test generation
        try {
            node50.labelId((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "40" + "'", str27, "40");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "40" + "'", str39, "40");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "40" + "'", str60, "40");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "40" + "'", str71, "40");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) 10L);
        int int5 = node2.getIntProp((int) (byte) -1, 9);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = null;
        java.lang.String str7 = node2.toStringTree(scriptNode6);
        com.google.javascript.rhino.head.Node node10 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        com.google.javascript.rhino.head.Node node11 = node10.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = node11.new NodeIterator();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(0, node11);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode6, node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(4, (int) (short) 0);
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str8 = node7.toString();
        boolean boolean9 = node7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newString("");
        node11.removeProp(23);
        node7.addChildToFront(node11);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean17 = node16.hasChildren();
        node7.addChildrenToFront(node16);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node33 = node25.getFirstChild();
        com.google.javascript.rhino.head.ast.Comment comment34 = node25.getJsDocNode();
        node20.addChildToBack(node25);
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(15, node7, node20);
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString(23, "");
        java.lang.String str40 = node39.toString();
        com.google.javascript.rhino.head.Node node43 = com.google.javascript.rhino.head.Node.newString("hi!");
        com.google.javascript.rhino.head.Node node46 = com.google.javascript.rhino.head.Node.newString(23, "");
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(0, node43, node46);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(24, node7, node39, node47);
        node3.addChildrenToBack(node7);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40" + "'", str8, "40");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(comment34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "23" + "'", str40, "23");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("");
        node2.removeProp(23);
        node2.setLineno((int) '4');
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str12 = node11.toString();
        boolean boolean13 = node11.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("");
        node15.removeProp(23);
        node11.addChildToFront(node15);
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean21 = node20.hasChildren();
        node11.addChildrenToFront(node20);
        int int23 = node20.getLineno();
        com.google.javascript.rhino.head.Node node25 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node29 = com.google.javascript.rhino.head.Node.newString("");
        node29.removeProp(23);
        node25.addChildToFront(node29);
        com.google.javascript.rhino.head.Node node33 = node25.getFirstChild();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) 0, node20, node25, 9);
        boolean boolean36 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.hasConsistentReturnUsage();
        boolean boolean43 = node40.hasSideEffects();
        node38.addChildrenToFront(node40);
        node40.removeChildren();
        com.google.javascript.rhino.head.Node node47 = com.google.javascript.rhino.head.Node.newString("hi!");
        node40.addChildrenToBack(node47);
        com.google.javascript.rhino.head.Node node50 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str51 = node50.toString();
        boolean boolean52 = node50.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node54 = com.google.javascript.rhino.head.Node.newString("");
        node54.removeProp(23);
        node50.addChildToFront(node54);
        com.google.javascript.rhino.head.Node node58 = node50.getFirstChild();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node58.addChildrenToBack(node60);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (byte) 1, node20, node40, node60);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(9, node20);
        com.google.javascript.rhino.head.Node node65 = com.google.javascript.rhino.head.Node.newNumber((double) 13);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(12, node2, node63, node65);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator67 = node66.new NodeIterator();
        boolean boolean68 = nodeIterator67.hasNext();
        boolean boolean69 = nodeIterator67.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator67.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "40" + "'", str12, "40");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "40" + "'", str41, "40");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "40" + "'", str51, "40");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str3 = node2.toString();
        boolean boolean4 = node2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newString("");
        node6.removeProp(23);
        node2.addChildToFront(node6);
        com.google.javascript.rhino.head.Node node11 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        boolean boolean12 = node11.hasChildren();
        node2.addChildrenToFront(node11);
        int int14 = node11.getLineno();
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str17 = node16.toString();
        boolean boolean18 = node16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newString("");
        node20.removeProp(23);
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node24 = node16.getFirstChild();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, node11, node16, 9);
        node16.putIntProp(11, 26);
        boolean boolean30 = node16.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40" + "'", str3, "40");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40" + "'", str17, "40");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        com.google.javascript.rhino.head.Node node3 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newString("");
        node7.removeProp(23);
        node3.addChildToFront(node7);
        com.google.javascript.rhino.head.Node node11 = node3.getFirstChild();
        node11.setString("100");
        com.google.javascript.rhino.head.ast.Scope scope14 = node11.getScope();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) ' ', node11, 2);
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.head.Node node20 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str21 = node20.toString();
        boolean boolean22 = node20.hasConsistentReturnUsage();
        boolean boolean23 = node20.hasSideEffects();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(0, node20);
        int int25 = node20.getLineno();
        node16.addChildToFront(node20);
        com.google.javascript.rhino.head.Node node28 = com.google.javascript.rhino.head.Node.newString("-1");
        node28.removeProp(25);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(7, node20, node28, 1);
        java.lang.Class<?> wildcardClass33 = node28.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        com.google.javascript.rhino.head.Node node3 = new com.google.javascript.rhino.head.Node(23, (int) (short) -1);
        com.google.javascript.rhino.head.Node node6 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str7 = node6.toString();
        boolean boolean8 = node6.hasConsistentReturnUsage();
        boolean boolean9 = node6.hasSideEffects();
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node(0, node6);
        com.google.javascript.rhino.head.Node node11 = node10.getLastChild();
        node10.removeChildren();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(19, node3, node10, 24);
        com.google.javascript.rhino.head.Node node15 = node3.getLastSibling();
        com.google.javascript.rhino.head.Node node16 = node3.getLastSibling();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = node16.iterator();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "40" + "'", str7, "40");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeItor17);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(21, "52");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor3 = node2.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeItor3);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("-1");
        node1.removeProp(25);
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString("");
        int int8 = node5.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(40, 8);
        com.google.javascript.rhino.head.Node node14 = com.google.javascript.rhino.head.Node.newNumber((double) ' ');
        java.lang.String str15 = node14.toString();
        boolean boolean16 = node14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node18 = com.google.javascript.rhino.head.Node.newString("");
        node18.removeProp(23);
        node14.addChildToFront(node18);
        com.google.javascript.rhino.head.Node node22 = node14.getFirstChild();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (short) 100);
        node22.addChildrenToBack(node24);
        com.google.javascript.rhino.head.Node node27 = com.google.javascript.rhino.head.Node.newString("");
        int int30 = node27.getIntProp(17, (int) (byte) -1);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 10, node22, node27);
        com.google.javascript.rhino.head.Node node33 = node22.setType(18);
        node5.addChildAfter(node11, node33);
        node1.addChildToFront(node33);
        java.lang.String str36 = node1.toString();
        int int37 = node1.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "41" + "'", str36, "41");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(100, "52");
        com.google.javascript.rhino.head.Node node3 = node2.getLastSibling();
        boolean boolean4 = node3.hasSideEffects();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }
}


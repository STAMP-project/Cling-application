import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutesBetween(readableInstant0, readableInstant1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadableInstant objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = minutes1.getValue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds3 = minutes2.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483646 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = minutes5.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = minutes4.plus(minutes5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2147483648");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.Class<?> wildcardClass4 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.base.BaseSingleFieldPeriod baseSingleFieldPeriod3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = minutes2.compareTo(baseSingleFieldPeriod3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds3 = minutes2.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.Days days4 = minutes0.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = days4.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days4);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
        org.junit.Assert.assertNotNull(minutes0);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = minutes0.getValue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod2 = minutes0.toMutablePeriod();
        java.lang.Class<?> wildcardClass3 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = minutes0.getFieldType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration3 = minutes2.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod4 = minutes2.toMutablePeriod();
        org.joda.time.Seconds seconds5 = minutes2.toStandardSeconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes6 = minutes0.minus(minutes2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(seconds5);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutesBetween(readablePartial0, readablePartial1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes1.plus(0);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = minutes1.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Period period5 = minutes0.toPeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        org.joda.time.Weeks weeks2 = minutes0.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = weeks2.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds8 = minutes0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        java.lang.Class<?> wildcardClass3 = periodType2.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = minutes6.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration4 = minutes3.toStandardDuration();
        org.joda.time.Duration duration5 = minutes3.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes6 = minutes0.plus(minutes3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType9 = minutes2.getFieldType((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod2 = minutes0.toMutablePeriod();
        org.joda.time.Weeks weeks3 = minutes0.toStandardWeeks();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(weeks3);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        int int3 = minutes2.size();
        org.joda.time.Days days4 = minutes2.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes0.plus(minutes2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 3");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(days4);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.base.BaseSingleFieldPeriod baseSingleFieldPeriod3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = minutes1.compareTo(baseSingleFieldPeriod3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        int int8 = minutes7.size();
        org.joda.time.Minutes minutes9 = minutes0.plus(minutes7);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = minutes0.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(minutes9);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration11 = minutes10.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod12 = minutes10.toMutablePeriod();
        org.joda.time.Seconds seconds13 = minutes10.toStandardSeconds();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = minutes9.compareTo((org.joda.time.base.BaseSingleFieldPeriod) seconds13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Minutes cannot be compared to class org.joda.time.Seconds");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(seconds13);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType7 = minutes3.getFieldType();
        org.joda.time.Minutes minutes9 = minutes3.dividedBy((-1));
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        int int11 = minutes10.size();
        org.joda.time.Minutes minutes12 = minutes3.plus(minutes10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes13 = minutes0.minus(minutes10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(minutes12);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy(0);
        org.joda.time.Minutes minutes6 = minutes4.plus((-2147483648));
        java.lang.Class<?> wildcardClass7 = minutes4.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes3.multipliedBy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483645 * 52");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType7 = minutes3.getFieldType();
        org.joda.time.Minutes minutes9 = minutes3.dividedBy((-1));
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        int int11 = minutes10.size();
        org.joda.time.Minutes minutes12 = minutes3.plus(minutes10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes13 = minutes0.plus(minutes12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(minutes12);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = minutes4.negated();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 0);
        java.lang.Class<?> wildcardClass3 = minutes2.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = minutes0.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 0);
        org.joda.time.base.BaseSingleFieldPeriod baseSingleFieldPeriod3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = minutes2.compareTo(baseSingleFieldPeriod3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes4.plus(0);
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = minutes2.minus(minutes6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes3 = minutes2.negated();
        org.joda.time.Minutes minutes5 = minutes3.dividedBy((int) (byte) -1);
        boolean boolean6 = minutes0.isLessThan(minutes3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds7 = minutes3.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes11 = minutes10.negated();
        org.joda.time.PeriodType periodType12 = minutes11.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes13 = minutes2.minus(minutes11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = minutes1.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType5 = minutes3.getFieldType((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hi!\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.Hours hours2 = minutes0.toStandardHours();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = minutes0.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        java.lang.Class<?> wildcardClass2 = minutes1.getClass();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes10 = minutes7.plus((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.DurationFieldType durationFieldType9 = minutes7.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes11 = minutes7.multipliedBy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 100");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes5.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType9 = minutes5.getFieldType();
        int int10 = minutes0.get(durationFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds11 = minutes0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes6 = minutes0.multipliedBy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 100");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = minutes7.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes5 = minutes3.plus((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes7 = minutes3.multipliedBy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483645 * 52");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes5 = minutes0.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        int int7 = minutes6.size();
        org.joda.time.Days days8 = minutes6.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Minutes cannot be compared to class org.joda.time.Days");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(days8);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Duration duration12 = minutes2.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType14 = minutes2.getFieldType((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration12);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes6 = minutes4.dividedBy((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes7 = minutes2.plus(minutes4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = minutes0.getFieldType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean12 = minutes2.isLessThan(minutes11);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = minutes2.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean12 = minutes2.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes2);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = minutes13.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes13);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds11 = minutes9.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType11 = minutes1.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = minutes0.getFieldType((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483648");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = minutes4.getFieldType((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) ' ');
        java.lang.String str21 = minutes13.toString();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean24 = minutes13.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = minutes2.minus(minutes13);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType27 = null;
        int int28 = minutes26.get(durationFieldType27);
        org.joda.time.MutablePeriod mutablePeriod29 = minutes26.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType30 = minutes26.getFieldType();
        org.joda.time.Minutes minutes32 = minutes26.dividedBy((-1));
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.MAX_VALUE;
        int int34 = minutes33.size();
        org.joda.time.Minutes minutes35 = minutes26.plus(minutes33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes36 = minutes13.plus(minutes33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2M" + "'", str21, "PT2M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(minutes35);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes3 = minutes1.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = minutes6.plus(0);
        int int11 = minutes4.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes6);
        org.joda.time.Minutes minutes13 = minutes6.plus((int) ' ');
        java.lang.String str14 = minutes6.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes15 = minutes3.plus(minutes6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT2M" + "'", str14, "PT2M");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes4 = minutes0.minus(2);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = minutes5.negated();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes9.negated();
        org.joda.time.Minutes minutes11 = minutes9.negated();
        boolean boolean12 = minutes5.equals((java.lang.Object) minutes11);
        boolean boolean13 = minutes4.isLessThan(minutes5);
        java.lang.Class<?> wildcardClass14 = minutes4.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes13 = minutes9.minus((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -52");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes4.getFieldType();
        int int8 = minutes3.get(durationFieldType7);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        boolean boolean11 = minutes0.isGreaterThan(minutes3);
        org.joda.time.DurationFieldType durationFieldType12 = minutes3.getFieldType();
        java.lang.Class<?> wildcardClass13 = minutes3.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-2) + "'", int8 == (-2));
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes36 = minutes34.dividedBy(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes4.negated();
        org.joda.time.Minutes minutes6 = minutes4.negated();
        boolean boolean7 = minutes0.equals((java.lang.Object) minutes6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = minutes0.multipliedBy(2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2 * 2147483646");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        int int4 = minutes3.size();
        int int5 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes3);
        java.lang.Class<?> wildcardClass6 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes4 = minutes1.minus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.THREE;
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes7 = minutes1.minus(minutes5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483647 + -3");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = minutes15.getFieldType();
        int int19 = minutes14.get(durationFieldType18);
        org.joda.time.Minutes minutes21 = minutes14.plus((-1));
        boolean boolean22 = minutes11.isGreaterThan(minutes14);
        org.joda.time.DurationFieldType durationFieldType23 = minutes14.getFieldType();
        boolean boolean24 = minutes10.isSupported(durationFieldType23);
        java.lang.Class<?> wildcardClass25 = minutes10.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes0.dividedBy(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes5 = minutes0.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (byte) 0);
        boolean boolean10 = minutes5.equals((java.lang.Object) minutes7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds11 = minutes5.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 214748364 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes5 = minutes0.dividedBy((int) (byte) 10);
        java.lang.Class<?> wildcardClass6 = minutes5.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType13 = minutes11.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes3 = minutes0.negated();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes8 = minutes0.minus((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(0);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean13 = minutes2.isLessThan(minutes12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes15 = minutes12.plus(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 10");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy((int) 'a');
        org.joda.time.Minutes minutes4 = minutes0.plus((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = minutes0.getValue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = minutes13.negated();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.Minutes minutes17 = minutes15.negated();
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = minutes13.getValue(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = minutes0.getValue(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) ' ');
        java.lang.String str21 = minutes13.toString();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean24 = minutes13.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = minutes2.minus(minutes13);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes27 = minutes26.negated();
        org.joda.time.DurationFieldType durationFieldType28 = minutes26.getFieldType();
        org.joda.time.DurationFieldType durationFieldType29 = minutes26.getFieldType();
        boolean boolean30 = minutes2.isSupported(durationFieldType29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = minutes31.get(durationFieldType32);
        org.joda.time.MutablePeriod mutablePeriod34 = minutes31.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType35 = minutes31.getFieldType();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration37 = minutes36.toStandardDuration();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes36);
        boolean boolean39 = minutes31.isGreaterThan(minutes36);
        org.joda.time.Minutes minutes40 = minutes2.plus(minutes36);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.MutablePeriod mutablePeriod44 = minutes41.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType45 = minutes41.getFieldType();
        org.joda.time.Minutes minutes47 = minutes41.dividedBy((-1));
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.MAX_VALUE;
        int int49 = minutes48.size();
        org.joda.time.Minutes minutes50 = minutes41.plus(minutes48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes51 = minutes40.minus(minutes41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2M" + "'", str21, "PT2M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(minutes50);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        int int5 = minutes0.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType2 = minutes0.getFieldType();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds4 = minutes0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = minutes13.negated();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.Minutes minutes17 = minutes15.negated();
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType22 = minutes21.getFieldType();
        int int23 = minutes18.get(durationFieldType22);
        org.joda.time.Period period24 = minutes18.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = minutes18.getFieldType(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = minutes0.multipliedBy(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 100");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Weeks weeks2 = minutes0.toStandardWeeks();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        org.joda.time.Period period10 = minutes2.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod11 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(minutes12);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT-2147483648M");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = minutes1.getValue((-2147483647));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483647");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Duration duration12 = minutes2.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = minutes2.getValue(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2147483647");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration12);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = minutes1.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes7 = minutes5.plus(0);
        org.joda.time.DurationFieldType durationFieldType8 = minutes7.getFieldType();
        int int9 = minutes3.get(durationFieldType8);
        org.joda.time.Minutes minutes11 = minutes3.dividedBy((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes13 = minutes11.plus(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 67108863 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(minutes11);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes3 = minutes1.dividedBy((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes3.plus((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 97");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = minutes13.negated();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.Minutes minutes17 = minutes15.negated();
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        org.joda.time.Minutes minutes20 = minutes17.plus((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes22 = minutes17.minus(2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483647 + -2147483646");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean6 = minutes0.isGreaterThan(minutes5);
        java.lang.Class<?> wildcardClass7 = minutes5.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 0);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        boolean boolean7 = minutes0.isSupported(durationFieldType6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = minutes0.multipliedBy((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * -1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Weeks weeks2 = minutes0.toStandardWeeks();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType8 = null;
        int int9 = minutes7.get(durationFieldType8);
        org.joda.time.MutablePeriod mutablePeriod10 = minutes7.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType11 = minutes7.getFieldType();
        org.joda.time.Minutes minutes13 = minutes7.dividedBy((-1));
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MAX_VALUE;
        int int15 = minutes14.size();
        org.joda.time.Minutes minutes16 = minutes7.plus(minutes14);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = minutes20.get(durationFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = minutes20.getFieldType();
        int int24 = minutes19.get(durationFieldType23);
        int int25 = minutes7.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes19);
        int int26 = minutes6.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes7);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = minutes6.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-2) + "'", int24 == (-2));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.THREE;
        org.joda.time.Duration duration9 = minutes8.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes10 = minutes0.minus(minutes8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -3");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes37 = minutes2.dividedBy(2);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = minutes41.getFieldType();
        int int45 = minutes40.get(durationFieldType44);
        org.joda.time.Minutes minutes47 = minutes40.plus((-1));
        org.joda.time.Minutes minutes48 = minutes47.negated();
        org.joda.time.Minutes minutes49 = minutes37.plus(minutes48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes51 = minutes48.minus((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Duration duration12 = minutes2.toStandardDuration();
        java.lang.Class<?> wildcardClass13 = minutes2.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        int int3 = minutes2.getMinutes();
        org.joda.time.DurationFieldType durationFieldType4 = minutes2.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes6 = minutes2.multipliedBy(2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483647 * 2147483646");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-2147483647) + "'", int3 == (-2147483647));
        org.junit.Assert.assertNotNull(durationFieldType4);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes8.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        org.joda.time.Minutes minutes22 = minutes15.plus((-1));
        org.joda.time.Minutes minutes24 = minutes15.minus((int) (short) 10);
        org.joda.time.Minutes minutes26 = minutes24.dividedBy((-2147483648));
        org.joda.time.Minutes minutes27 = minutes12.plus(minutes26);
        org.joda.time.Minutes minutes28 = minutes2.minus(minutes12);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes35 = minutes31.plus(0);
        int int36 = minutes29.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes31);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes39 = minutes37.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = minutes37.plus(0);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes44 = minutes42.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType46 = null;
        int int47 = minutes45.get(durationFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = minutes45.getFieldType();
        int int49 = minutes44.get(durationFieldType48);
        org.joda.time.Minutes minutes51 = minutes44.plus((-1));
        org.joda.time.Minutes minutes53 = minutes44.minus((int) (short) 10);
        org.joda.time.Minutes minutes55 = minutes53.dividedBy((-2147483648));
        org.joda.time.Minutes minutes56 = minutes41.plus(minutes55);
        org.joda.time.Minutes minutes57 = minutes31.minus(minutes41);
        org.joda.time.PeriodType periodType58 = minutes31.getPeriodType();
        boolean boolean59 = minutes12.isLessThan(minutes31);
        java.lang.Class<?> wildcardClass60 = minutes31.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-2) + "'", int49 == (-2));
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        java.lang.String str9 = minutes3.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds10 = minutes3.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483645 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT-2147483645M" + "'", str9, "PT-2147483645M");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes3 = minutes1.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes6 = minutes4.multipliedBy((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * -2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod15 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes17 = minutes14.plus(minutes16);
        org.joda.time.Minutes minutes18 = minutes11.minus(minutes16);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = minutes11.getValue(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2147483647");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.Days days4 = minutes0.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = minutes0.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days4);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Period period4 = minutes3.toPeriod();
        int int5 = minutes3.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = minutes3.getValue((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-2147483645) + "'", int5 == (-2147483645));
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes5 = minutes2.plus(minutes4);
        int int6 = minutes1.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes4);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        int int8 = minutes1.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes7);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutes((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes11 = minutes1.minus(minutes10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483647 + -10");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(minutes10);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.ZERO;
        int int36 = minutes34.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes35);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = minutes35.getValue((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes4.negated();
        org.joda.time.Minutes minutes6 = minutes4.negated();
        boolean boolean7 = minutes0.equals((java.lang.Object) minutes6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = minutes6.minus((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483647 + -100");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes3 = minutes2.negated();
        org.joda.time.Minutes minutes4 = minutes2.negated();
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        int int6 = minutes0.get(durationFieldType5);
        int int7 = minutes0.getMinutes();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        int int9 = minutes8.getMinutes();
        org.joda.time.PeriodType periodType10 = minutes8.getPeriodType();
        org.joda.time.Period period11 = minutes8.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes12 = minutes0.plus(minutes8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2147483648");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-2147483648) + "'", int6 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2147483648) + "'", int7 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2147483648) + "'", int9 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes4 = minutes2.dividedBy((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = minutes0.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.PeriodType periodType2 = minutes0.getPeriodType();
        org.joda.time.Period period3 = minutes0.toPeriod();
        java.lang.Class<?> wildcardClass4 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = minutes1.getFieldType((-2147483645));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483645");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Period period2 = minutes0.toPeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = minutes2.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus((int) (short) 1);
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy(0);
        boolean boolean15 = minutes0.isGreaterThan(minutes14);
        org.joda.time.Minutes minutes17 = minutes0.multipliedBy((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds18 = minutes0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(minutes17);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod15 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes17 = minutes14.plus(minutes16);
        org.joda.time.Minutes minutes18 = minutes11.minus(minutes16);
        org.joda.time.MutablePeriod mutablePeriod19 = minutes18.toMutablePeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes3 = minutes0.plus((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 10");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy((int) 'a');
        org.joda.time.Minutes minutes4 = minutes0.plus((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = minutes0.getValue((-2147483647));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483647");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int3 = minutes1.getValue((-2147483647));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483647");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        int int8 = minutes7.size();
        org.joda.time.Minutes minutes9 = minutes0.plus(minutes7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes10 = minutes0.negated();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(minutes9);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes3 = minutes2.negated();
        org.joda.time.Minutes minutes4 = minutes2.negated();
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        java.lang.String str6 = minutes2.toString();
        boolean boolean7 = minutes0.isGreaterThan(minutes2);
        org.joda.time.Minutes minutes8 = minutes2.negated();
        org.joda.time.MutablePeriod mutablePeriod9 = minutes8.toMutablePeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT2147483647M" + "'", str6, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy(0);
        org.joda.time.Minutes minutes6 = minutes4.plus((-2147483648));
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes8 = minutes7.negated();
        org.joda.time.Minutes minutes9 = minutes7.negated();
        boolean boolean10 = minutes6.isGreaterThan(minutes9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        boolean boolean19 = minutes6.equals((java.lang.Object) minutes13);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes23 = minutes21.plus(0);
        org.joda.time.PeriodType periodType24 = minutes21.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes25 = minutes6.plus(minutes21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes5.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType9 = minutes5.getFieldType();
        int int10 = minutes0.get(durationFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes12 = minutes0.multipliedBy((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * -2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod2 = minutes0.toMutablePeriod();
        org.joda.time.Duration duration3 = minutes0.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType5 = minutes0.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes37 = minutes2.dividedBy(2);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = minutes41.getFieldType();
        int int45 = minutes40.get(durationFieldType44);
        org.joda.time.Minutes minutes47 = minutes40.plus((-1));
        org.joda.time.Minutes minutes48 = minutes47.negated();
        org.joda.time.Minutes minutes49 = minutes37.plus(minutes48);
        org.joda.time.Minutes minutes51 = minutes37.minus((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes53 = minutes51.minus((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes4.negated();
        org.joda.time.Minutes minutes6 = minutes4.negated();
        boolean boolean7 = minutes0.equals((java.lang.Object) minutes6);
        java.lang.String str8 = minutes0.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT2M" + "'", str8, "PT2M");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes1.plus(0);
        org.joda.time.PeriodType periodType4 = minutes1.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = minutes1.getValue((-12));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -12");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Weeks weeks1 = minutes0.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(weeks1);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean6 = minutes0.isGreaterThan(minutes5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes8 = minutes5.multipliedBy((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * -2147483648");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType2 = minutes0.getFieldType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        boolean boolean7 = minutes0.isSupported(durationFieldType6);
        org.joda.time.Minutes minutes8 = null;
        boolean boolean9 = minutes0.isGreaterThan(minutes8);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes15 = minutes11.plus(100);
        java.lang.Class<?> wildcardClass16 = minutes11.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = minutes6.plus(0);
        int int11 = minutes4.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes6);
        org.joda.time.Minutes minutes13 = minutes6.plus((int) ' ');
        java.lang.String str14 = minutes6.toString();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod16 = minutes15.toMutablePeriod();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = minutes17.plus(0);
        int int22 = minutes15.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes17);
        org.joda.time.Minutes minutes24 = minutes17.plus((int) ' ');
        java.lang.String str25 = minutes17.toString();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean28 = minutes17.isLessThan(minutes27);
        org.joda.time.Minutes minutes29 = minutes6.minus(minutes17);
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes31 = minutes30.negated();
        org.joda.time.DurationFieldType durationFieldType32 = minutes30.getFieldType();
        org.joda.time.DurationFieldType durationFieldType33 = minutes30.getFieldType();
        boolean boolean34 = minutes6.isSupported(durationFieldType33);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType36 = null;
        int int37 = minutes35.get(durationFieldType36);
        org.joda.time.MutablePeriod mutablePeriod38 = minutes35.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType39 = minutes35.getFieldType();
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes40);
        boolean boolean43 = minutes35.isGreaterThan(minutes40);
        org.joda.time.Minutes minutes44 = minutes6.plus(minutes40);
        boolean boolean45 = minutes2.equals((java.lang.Object) minutes6);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT2M" + "'", str14, "PT2M");
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT2M" + "'", str25, "PT2M");
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = minutes3.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType6 = minutes5.getFieldType();
        org.joda.time.Minutes minutes7 = minutes5.negated();
        boolean boolean8 = minutes0.isLessThan(minutes5);
        org.joda.time.Minutes minutes10 = minutes0.multipliedBy((int) (short) 0);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes10);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes8.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        org.joda.time.Minutes minutes22 = minutes15.plus((-1));
        org.joda.time.Minutes minutes24 = minutes15.minus((int) (short) 10);
        org.joda.time.Minutes minutes26 = minutes24.dividedBy((-2147483648));
        org.joda.time.Minutes minutes27 = minutes12.plus(minutes26);
        org.joda.time.Minutes minutes28 = minutes2.minus(minutes12);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes35 = minutes31.plus(0);
        int int36 = minutes29.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes31);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes39 = minutes37.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = minutes37.plus(0);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes44 = minutes42.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType46 = null;
        int int47 = minutes45.get(durationFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = minutes45.getFieldType();
        int int49 = minutes44.get(durationFieldType48);
        org.joda.time.Minutes minutes51 = minutes44.plus((-1));
        org.joda.time.Minutes minutes53 = minutes44.minus((int) (short) 10);
        org.joda.time.Minutes minutes55 = minutes53.dividedBy((-2147483648));
        org.joda.time.Minutes minutes56 = minutes41.plus(minutes55);
        org.joda.time.Minutes minutes57 = minutes31.minus(minutes41);
        org.joda.time.PeriodType periodType58 = minutes31.getPeriodType();
        boolean boolean59 = minutes12.isLessThan(minutes31);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType61 = minutes60.getPeriodType();
        org.joda.time.Minutes minutes62 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes63 = minutes62.negated();
        org.joda.time.Minutes minutes64 = minutes62.negated();
        org.joda.time.DurationFieldType durationFieldType65 = minutes62.getFieldType();
        java.lang.String str66 = minutes62.toString();
        boolean boolean67 = minutes60.isGreaterThan(minutes62);
        boolean boolean68 = minutes31.isLessThan(minutes60);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = minutes31.getValue(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-2) + "'", int49 == (-2));
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT2147483647M" + "'", str66, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes3 = minutes2.negated();
        org.joda.time.Minutes minutes4 = minutes2.negated();
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        java.lang.String str6 = minutes2.toString();
        boolean boolean7 = minutes0.isGreaterThan(minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes8.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean14 = minutes8.isGreaterThan(minutes13);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes22 = minutes20.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType24 = null;
        int int25 = minutes23.get(durationFieldType24);
        org.joda.time.DurationFieldType durationFieldType26 = minutes23.getFieldType();
        int int27 = minutes22.get(durationFieldType26);
        int int28 = minutes19.get(durationFieldType26);
        org.joda.time.PeriodType periodType29 = minutes19.getPeriodType();
        int int30 = minutes19.getMinutes();
        boolean boolean31 = minutes8.isLessThan(minutes19);
        boolean boolean32 = minutes0.equals((java.lang.Object) boolean31);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT2147483647M" + "'", str6, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-2) + "'", int27 == (-2));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Days days2 = minutes0.toStandardDays();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType5 = minutes4.getPeriodType();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes7 = minutes6.negated();
        org.joda.time.Minutes minutes8 = minutes6.negated();
        org.joda.time.DurationFieldType durationFieldType9 = minutes6.getFieldType();
        java.lang.String str10 = minutes6.toString();
        boolean boolean11 = minutes4.isGreaterThan(minutes6);
        boolean boolean12 = minutes3.equals((java.lang.Object) minutes4);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes15 = minutes14.negated();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes14);
        org.joda.time.Minutes minutes17 = minutes13.minus(minutes16);
        org.joda.time.DurationFieldType durationFieldType18 = minutes13.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = days2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Days cannot be compared to class org.joda.time.Minutes");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2147483647M" + "'", str10, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(durationFieldType18);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType13 = minutes12.getPeriodType();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes15 = minutes14.negated();
        org.joda.time.Minutes minutes16 = minutes14.negated();
        org.joda.time.DurationFieldType durationFieldType17 = minutes14.getFieldType();
        java.lang.String str18 = minutes14.toString();
        boolean boolean19 = minutes12.isGreaterThan(minutes14);
        boolean boolean20 = minutes11.equals((java.lang.Object) minutes12);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes11);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes22);
        org.joda.time.Minutes minutes25 = minutes21.minus(minutes24);
        org.joda.time.DurationFieldType durationFieldType26 = minutes24.getFieldType();
        int int27 = minutes24.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes28 = minutes0.plus(minutes24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT2147483647M" + "'", str18, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        org.joda.time.Minutes minutes14 = minutes7.plus((-1));
        org.joda.time.Minutes minutes16 = minutes7.minus((int) (short) 10);
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((-2147483648));
        org.joda.time.Minutes minutes19 = minutes4.plus(minutes18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes22 = minutes20.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType24 = null;
        int int25 = minutes23.get(durationFieldType24);
        org.joda.time.MutablePeriod mutablePeriod26 = minutes23.toMutablePeriod();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes23);
        boolean boolean28 = minutes22.isLessThan(minutes27);
        org.joda.time.DurationFieldType durationFieldType29 = minutes27.getFieldType();
        boolean boolean30 = minutes19.isSupported(durationFieldType29);
        org.joda.time.Minutes minutes32 = minutes19.plus((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType34 = minutes32.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes32);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = minutes0.getValue(34);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 34");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes4 = minutes1.minus(0);
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes7 = minutes6.negated();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod9 = minutes8.toMutablePeriod();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes11 = minutes8.plus(minutes10);
        int int12 = minutes7.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes10);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MAX_VALUE;
        int int14 = minutes7.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes15 = minutes4.plus(minutes7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483647 + -2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutesIn(readableInterval0);
        org.joda.time.Days days2 = minutes1.toStandardDays();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(days2);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        org.joda.time.Minutes minutes4 = minutes0.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds5 = minutes0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = minutes15.getFieldType();
        int int19 = minutes14.get(durationFieldType18);
        org.joda.time.Minutes minutes21 = minutes14.plus((-1));
        boolean boolean22 = minutes11.isGreaterThan(minutes14);
        org.joda.time.DurationFieldType durationFieldType23 = minutes14.getFieldType();
        boolean boolean24 = minutes10.isSupported(durationFieldType23);
        java.lang.String str25 = minutes10.toString();
        org.joda.time.Duration duration26 = minutes10.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT2147483647M" + "'", str25, "PT2147483647M");
        org.junit.Assert.assertNotNull(duration26);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes5 = minutes3.plus((int) 'a');
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes7 = minutes6.negated();
        org.joda.time.DurationFieldType durationFieldType8 = minutes6.getFieldType();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType10 = null;
        int int11 = minutes9.get(durationFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = minutes9.getFieldType();
        boolean boolean13 = minutes6.isSupported(durationFieldType12);
        int int14 = minutes5.get(durationFieldType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes16 = minutes5.plus((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483548 + -2147483648");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2147483548) + "'", int14 == (-2147483548));
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        int int4 = minutes0.size();
        org.joda.time.Minutes minutes6 = minutes0.minus(0);
        org.joda.time.Minutes minutes8 = minutes0.plus((int) (short) 0);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = minutes0.getValue(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.base.BaseSingleFieldPeriod baseSingleFieldPeriod5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = minutes4.compareTo(baseSingleFieldPeriod5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int8 = minutes0.getValue(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2147483647");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus((int) (short) 1);
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy(0);
        boolean boolean15 = minutes0.isGreaterThan(minutes14);
        org.joda.time.Minutes minutes17 = minutes0.multipliedBy((-1));
        java.lang.Class<?> wildcardClass18 = minutes17.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean13 = minutes2.isLessThan(minutes12);
        org.joda.time.MutablePeriod mutablePeriod14 = minutes12.toMutablePeriod();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType17 = minutes16.getPeriodType();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes19 = minutes18.negated();
        org.joda.time.Minutes minutes20 = minutes18.negated();
        org.joda.time.DurationFieldType durationFieldType21 = minutes18.getFieldType();
        java.lang.String str22 = minutes18.toString();
        boolean boolean23 = minutes16.isGreaterThan(minutes18);
        boolean boolean24 = minutes15.equals((java.lang.Object) minutes16);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes15);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes27 = minutes26.negated();
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes26);
        org.joda.time.Minutes minutes29 = minutes25.minus(minutes28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes30 = minutes12.plus(minutes25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT2147483647M" + "'", str22, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy(0);
        org.joda.time.Minutes minutes6 = minutes4.plus((-2147483648));
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.TWO;
        boolean boolean8 = minutes4.isGreaterThan(minutes7);
        java.lang.Class<?> wildcardClass9 = minutes7.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (short) -1);
        int int2 = minutes1.size();
        int int3 = minutes1.getMinutes();
        org.joda.time.Hours hours4 = minutes1.toStandardHours();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(hours4);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        int int4 = minutes2.getMinutes();
        org.joda.time.PeriodType periodType5 = minutes2.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = minutes2.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod11 = minutes10.toMutablePeriod();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = minutes12.plus(0);
        int int17 = minutes10.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes12);
        org.joda.time.Minutes minutes19 = minutes12.plus((int) ' ');
        java.lang.String str20 = minutes12.toString();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean23 = minutes12.isLessThan(minutes22);
        boolean boolean24 = minutes9.isLessThan(minutes12);
        org.joda.time.DurationFieldType durationFieldType25 = minutes12.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT2M" + "'", str20, "PT2M");
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        int int4 = minutes0.size();
        org.joda.time.Minutes minutes6 = minutes0.minus(0);
        org.joda.time.Minutes minutes8 = minutes0.plus((int) (short) 0);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        int int10 = minutes0.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        org.joda.time.Weeks weeks2 = minutes0.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = minutes0.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod2 = minutes0.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = minutes0.getValue((-2147483645));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483645");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        org.joda.time.Minutes minutes14 = minutes7.plus((-1));
        org.joda.time.Minutes minutes16 = minutes7.minus((int) (short) 10);
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((-2147483648));
        org.joda.time.Minutes minutes19 = minutes4.plus(minutes18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes22 = minutes20.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType24 = null;
        int int25 = minutes23.get(durationFieldType24);
        org.joda.time.MutablePeriod mutablePeriod26 = minutes23.toMutablePeriod();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes23);
        boolean boolean28 = minutes22.isLessThan(minutes27);
        org.joda.time.DurationFieldType durationFieldType29 = minutes27.getFieldType();
        boolean boolean30 = minutes19.isSupported(durationFieldType29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Period period34 = minutes33.toPeriod();
        org.joda.time.Minutes minutes35 = minutes19.plus(minutes33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType37 = minutes35.getFieldType((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483648");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(minutes35);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy(0);
        org.joda.time.Duration duration5 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        int int7 = minutes6.size();
        int int9 = minutes6.getValue(0);
        org.joda.time.Minutes minutes10 = minutes6.negated();
        org.joda.time.DurationFieldType durationFieldType12 = minutes6.getFieldType(0);
        boolean boolean13 = minutes2.equals((java.lang.Object) 0);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes16 = minutes14.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType18 = null;
        int int19 = minutes17.get(durationFieldType18);
        org.joda.time.MutablePeriod mutablePeriod20 = minutes17.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes17);
        boolean boolean22 = minutes16.isLessThan(minutes21);
        int int23 = minutes16.getMinutes();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean26 = minutes16.isLessThan(minutes25);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes16);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes30 = minutes28.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes31 = minutes28.negated();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes34 = minutes28.minus(minutes33);
        boolean boolean35 = minutes16.isLessThan(minutes28);
        boolean boolean36 = minutes2.isLessThan(minutes16);
        org.joda.time.DurationFieldType durationFieldType37 = minutes16.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-2) + "'", int23 == (-2));
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        boolean boolean6 = minutes0.isSupported(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes0.getFieldType();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration9 = minutes8.toStandardDuration();
        org.joda.time.Duration duration10 = minutes8.toStandardDuration();
        org.joda.time.Minutes minutes12 = minutes8.minus(2);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        int int14 = minutes13.getMinutes();
        org.joda.time.PeriodType periodType15 = minutes13.getPeriodType();
        org.joda.time.Minutes minutes16 = null;
        org.joda.time.Minutes minutes17 = minutes13.plus(minutes16);
        boolean boolean18 = minutes8.isLessThan(minutes17);
        org.joda.time.Minutes minutes20 = minutes17.multipliedBy((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes21 = minutes0.minus(minutes17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2147483648) + "'", int14 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(minutes20);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes10 = minutes9.negated();
        org.joda.time.Duration duration11 = minutes10.toStandardDuration();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes13 = minutes12.negated();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes12);
        org.joda.time.MutablePeriod mutablePeriod15 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes17 = minutes14.plus(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes18 = minutes10.plus(minutes17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 3 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes17);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes15 = minutes11.plus(100);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = minutes15.getValue((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483648");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds3 = minutes2.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes0.minus((-2147483548));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2147483548");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes11.negated();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes11);
        org.joda.time.Minutes minutes14 = minutes10.minus(minutes13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes10.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds16 = minutes10.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(durationFieldType15);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes3 = minutes2.negated();
        org.joda.time.Minutes minutes4 = minutes2.negated();
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        java.lang.String str6 = minutes2.toString();
        boolean boolean7 = minutes0.isGreaterThan(minutes2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds8 = minutes2.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT2147483647M" + "'", str6, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType((-22139006));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -22139006");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean12 = minutes2.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Duration duration15 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes13.minus(2);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = minutes18.negated();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = minutes22.negated();
        boolean boolean25 = minutes18.equals((java.lang.Object) minutes24);
        boolean boolean26 = minutes17.isLessThan(minutes18);
        org.joda.time.Minutes minutes27 = minutes11.minus(minutes18);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes29 = minutes28.negated();
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes28);
        java.lang.String str31 = minutes28.toString();
        org.joda.time.Minutes minutes32 = minutes27.plus(minutes28);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = minutes32.getValue((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT2147483647M" + "'", str31, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes32);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes15 = minutes11.plus(100);
        int int16 = minutes11.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-12) + "'", int16 == (-12));
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        org.joda.time.Minutes minutes4 = minutes0.negated();
        org.joda.time.Minutes minutes6 = minutes4.plus(0);
        org.joda.time.Minutes minutes8 = minutes4.dividedBy((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = minutes4.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus((int) (short) 1);
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy(0);
        org.joda.time.Minutes minutes9 = minutes7.plus((-2147483648));
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes11 = minutes10.negated();
        org.joda.time.Minutes minutes12 = minutes10.negated();
        boolean boolean13 = minutes9.isGreaterThan(minutes12);
        int int14 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes9);
        org.joda.time.MutablePeriod mutablePeriod15 = minutes9.toMutablePeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration17 = minutes16.toStandardDuration();
        org.joda.time.Duration duration18 = minutes16.toStandardDuration();
        org.joda.time.Minutes minutes20 = minutes16.minus(2);
        boolean boolean21 = minutes9.isGreaterThan(minutes20);
        java.lang.Class<?> wildcardClass22 = minutes20.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes11 = minutes9.multipliedBy((-2147483647));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -3 * -2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Period period4 = minutes3.toPeriod();
        int int5 = minutes3.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType7 = minutes3.getFieldType(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-2147483645) + "'", int5 == (-2147483645));
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.PeriodType periodType5 = minutes4.getPeriodType();
        org.joda.time.Minutes minutes7 = minutes4.minus(0);
        org.joda.time.DurationFieldType durationFieldType8 = minutes7.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = minutes2.plus(minutes7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(durationFieldType8);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        int int4 = minutes0.size();
        org.joda.time.Minutes minutes6 = minutes0.minus(0);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes8 = minutes7.negated();
        org.joda.time.DurationFieldType durationFieldType9 = minutes7.getFieldType();
        boolean boolean10 = minutes0.equals((java.lang.Object) durationFieldType9);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod37 = minutes36.toMutablePeriod();
        boolean boolean38 = minutes2.isLessThan(minutes36);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType41 = minutes39.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(minutes39);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes11.negated();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes11);
        org.joda.time.Minutes minutes14 = minutes10.minus(minutes13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes10.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = minutes10.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(durationFieldType15);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Hours hours3 = minutes0.toStandardHours();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes6 = minutes0.plus(minutes5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 10");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(minutes5);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        java.lang.Class<?> wildcardClass4 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod2 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes4 = minutes0.dividedBy((int) (short) 10);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        int int10 = minutes9.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = minutes9.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.ZERO;
        int int36 = minutes34.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes35);
        org.joda.time.Minutes minutes38 = minutes35.multipliedBy((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType40 = minutes35.getFieldType((-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(minutes38);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean12 = minutes2.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Duration duration15 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes13.minus(2);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = minutes18.negated();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = minutes22.negated();
        boolean boolean25 = minutes18.equals((java.lang.Object) minutes24);
        boolean boolean26 = minutes17.isLessThan(minutes18);
        org.joda.time.Minutes minutes27 = minutes11.minus(minutes18);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes29 = minutes28.negated();
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes28);
        java.lang.String str31 = minutes28.toString();
        org.joda.time.Minutes minutes32 = minutes27.plus(minutes28);
        org.joda.time.Period period33 = minutes28.toPeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT2147483647M" + "'", str31, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT-2147483648M");
        org.joda.time.Weeks weeks2 = minutes1.toStandardWeeks();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        int int3 = minutes0.size();
        org.joda.time.MutablePeriod mutablePeriod4 = minutes0.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes6 = minutes0.plus((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 52");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod4);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes5 = minutes0.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (byte) 0);
        boolean boolean10 = minutes5.equals((java.lang.Object) minutes7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes12 = minutes7.plus((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 10");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes8.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        org.joda.time.Minutes minutes22 = minutes15.plus((-1));
        org.joda.time.Minutes minutes24 = minutes15.minus((int) (short) 10);
        org.joda.time.Minutes minutes26 = minutes24.dividedBy((-2147483648));
        org.joda.time.Minutes minutes27 = minutes12.plus(minutes26);
        org.joda.time.Minutes minutes28 = minutes2.minus(minutes12);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes32 = minutes29.plus(minutes31);
        org.joda.time.Minutes minutes33 = minutes28.plus(minutes31);
        org.joda.time.Duration duration34 = minutes28.toStandardDuration();
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes36 = minutes35.negated();
        org.joda.time.Minutes minutes37 = minutes35.negated();
        java.lang.String str38 = minutes35.toString();
        org.joda.time.Minutes minutes40 = minutes35.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes44 = minutes42.multipliedBy((int) (byte) 0);
        boolean boolean45 = minutes40.equals((java.lang.Object) minutes42);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes47 = minutes46.negated();
        org.joda.time.DurationFieldType durationFieldType48 = minutes46.getFieldType();
        boolean boolean49 = minutes40.isSupported(durationFieldType48);
        int int50 = minutes28.get(durationFieldType48);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT2147483647M" + "'", str38, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus((int) (short) 1);
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy(0);
        boolean boolean15 = minutes0.isGreaterThan(minutes14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType17 = minutes0.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes5 = minutes0.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (byte) 0);
        boolean boolean10 = minutes5.equals((java.lang.Object) minutes7);
        java.lang.Class<?> wildcardClass11 = minutes7.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        int int3 = minutes2.getMinutes();
        org.joda.time.DurationFieldType durationFieldType4 = minutes2.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes6 = minutes2.multipliedBy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483647 * 52");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-2147483647) + "'", int3 == (-2147483647));
        org.junit.Assert.assertNotNull(durationFieldType4);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod15 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes17 = minutes14.plus(minutes16);
        org.joda.time.Minutes minutes18 = minutes11.minus(minutes16);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes23 = minutes19.plus(0);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes26 = minutes24.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = minutes27.get(durationFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = minutes27.getFieldType();
        int int31 = minutes26.get(durationFieldType30);
        org.joda.time.Minutes minutes33 = minutes26.plus((-1));
        org.joda.time.Minutes minutes35 = minutes26.minus((int) (short) 10);
        org.joda.time.Minutes minutes37 = minutes35.dividedBy((-2147483648));
        org.joda.time.Minutes minutes38 = minutes23.plus(minutes37);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes41 = minutes39.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType43 = null;
        int int44 = minutes42.get(durationFieldType43);
        org.joda.time.MutablePeriod mutablePeriod45 = minutes42.toMutablePeriod();
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes42);
        boolean boolean47 = minutes41.isLessThan(minutes46);
        org.joda.time.DurationFieldType durationFieldType48 = minutes46.getFieldType();
        boolean boolean49 = minutes38.isSupported(durationFieldType48);
        int int50 = minutes11.get(durationFieldType48);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes11);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = minutes11.getValue((-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-2) + "'", int31 == (-2));
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-12) + "'", int50 == (-12));
        org.junit.Assert.assertNotNull(minutes51);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy(0);
        org.joda.time.Minutes minutes6 = minutes4.plus((-2147483648));
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.TWO;
        boolean boolean8 = minutes4.isGreaterThan(minutes7);
        org.joda.time.DurationFieldType durationFieldType9 = minutes7.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes11 = minutes7.multipliedBy(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2 * 2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = minutes0.getFieldType();
        org.joda.time.Period period2 = minutes0.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes3 = minutes0.negated();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean12 = minutes2.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes2);
        boolean boolean15 = minutes13.equals((java.lang.Object) (-1.0f));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes5);
        int int8 = minutes5.size();
        org.joda.time.MutablePeriod mutablePeriod9 = minutes5.toMutablePeriod();
        boolean boolean10 = minutes0.equals((java.lang.Object) minutes5);
        org.joda.time.DurationFieldType durationFieldType12 = minutes5.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod14 = minutes13.toMutablePeriod();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes17 = minutes15.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes19 = minutes15.plus(0);
        int int20 = minutes13.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes15);
        org.joda.time.Minutes minutes22 = minutes15.plus((int) ' ');
        java.lang.String str23 = minutes15.toString();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean26 = minutes15.isLessThan(minutes25);
        org.joda.time.Period period27 = minutes25.toPeriod();
        boolean boolean28 = minutes5.isGreaterThan(minutes25);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes35 = minutes31.plus(0);
        int int36 = minutes29.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes31);
        org.joda.time.Minutes minutes38 = minutes31.plus((int) ' ');
        java.lang.String str39 = minutes31.toString();
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod41 = minutes40.toMutablePeriod();
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes44 = minutes42.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes46 = minutes42.plus(0);
        int int47 = minutes40.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes42);
        org.joda.time.Minutes minutes49 = minutes42.plus((int) ' ');
        java.lang.String str50 = minutes42.toString();
        org.joda.time.Minutes minutes52 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean53 = minutes42.isLessThan(minutes52);
        org.joda.time.Minutes minutes54 = minutes31.minus(minutes42);
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes56 = minutes55.negated();
        org.joda.time.DurationFieldType durationFieldType57 = minutes55.getFieldType();
        org.joda.time.DurationFieldType durationFieldType58 = minutes55.getFieldType();
        boolean boolean59 = minutes31.isSupported(durationFieldType58);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType61 = null;
        int int62 = minutes60.get(durationFieldType61);
        org.joda.time.MutablePeriod mutablePeriod63 = minutes60.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType64 = minutes60.getFieldType();
        org.joda.time.Minutes minutes65 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration66 = minutes65.toStandardDuration();
        org.joda.time.Minutes minutes67 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes65);
        boolean boolean68 = minutes60.isGreaterThan(minutes65);
        org.joda.time.Minutes minutes69 = minutes31.plus(minutes65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes70 = minutes25.plus(minutes31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT2M" + "'", str23, "PT2M");
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT2M" + "'", str39, "PT2M");
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT2M" + "'", str50, "PT2M");
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(minutes69);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes4 = minutes0.minus(2);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.MutablePeriod mutablePeriod11 = minutes8.toMutablePeriod();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes8);
        boolean boolean13 = minutes7.isLessThan(minutes12);
        int int14 = minutes7.getMinutes();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean17 = minutes7.isLessThan(minutes16);
        org.joda.time.Minutes minutes18 = minutes4.minus(minutes16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType20 = minutes18.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2) + "'", int14 == (-2));
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(minutes18);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        java.lang.String str9 = minutes3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = minutes3.toMutablePeriod();
        org.joda.time.Duration duration11 = minutes3.toStandardDuration();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.MutablePeriod mutablePeriod15 = minutes12.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType16 = minutes12.getFieldType();
        org.joda.time.Minutes minutes18 = minutes12.dividedBy((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MAX_VALUE;
        int int20 = minutes19.size();
        org.joda.time.Minutes minutes21 = minutes12.plus(minutes19);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.PeriodType periodType24 = minutes23.getPeriodType();
        org.joda.time.Minutes minutes25 = minutes23.negated();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes29 = minutes27.plus(0);
        org.joda.time.DurationFieldType durationFieldType30 = minutes29.getFieldType();
        int int31 = minutes25.get(durationFieldType30);
        boolean boolean32 = minutes19.isSupported(durationFieldType30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes33 = minutes3.minus(minutes19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483645 + -2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT-2147483645M" + "'", str9, "PT-2147483645M");
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Seconds seconds3 = minutes0.toStandardSeconds();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Seconds seconds2 = minutes1.toStandardSeconds();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(seconds2);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes4 = minutes2.dividedBy((int) (short) 10);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = minutes5.negated();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes11 = minutes5.minus(minutes10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod13 = minutes12.toMutablePeriod();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod13);
        boolean boolean15 = minutes5.isLessThan(minutes14);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes14);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType18 = null;
        int int19 = minutes17.get(durationFieldType18);
        org.joda.time.MutablePeriod mutablePeriod20 = minutes17.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType21 = minutes17.getFieldType();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType23 = null;
        int int24 = minutes22.get(durationFieldType23);
        org.joda.time.MutablePeriod mutablePeriod25 = minutes22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType26 = minutes22.getFieldType();
        boolean boolean27 = minutes17.isSupported(durationFieldType26);
        int int28 = minutes16.get(durationFieldType26);
        boolean boolean29 = minutes4.isLessThan(minutes16);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-2147483648) + "'", int28 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = minutes1.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes7 = minutes5.plus(0);
        org.joda.time.DurationFieldType durationFieldType8 = minutes7.getFieldType();
        int int9 = minutes3.get(durationFieldType8);
        org.joda.time.Minutes minutes11 = minutes3.dividedBy((int) ' ');
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.MutablePeriod mutablePeriod18 = minutes15.toMutablePeriod();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes15);
        boolean boolean20 = minutes14.isLessThan(minutes19);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType25 = null;
        int int26 = minutes24.get(durationFieldType25);
        org.joda.time.DurationFieldType durationFieldType27 = minutes24.getFieldType();
        int int28 = minutes23.get(durationFieldType27);
        org.joda.time.Minutes minutes30 = minutes23.plus((-1));
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod32 = minutes31.toMutablePeriod();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes35 = minutes33.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes37 = minutes33.plus(0);
        int int38 = minutes31.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes33);
        org.joda.time.Minutes minutes40 = minutes33.plus((int) ' ');
        java.lang.String str41 = minutes33.toString();
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean44 = minutes33.isLessThan(minutes43);
        boolean boolean45 = minutes30.isLessThan(minutes33);
        org.joda.time.Minutes minutes46 = minutes14.minus(minutes30);
        org.joda.time.MutablePeriod mutablePeriod47 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod49 = minutes48.toMutablePeriod();
        boolean boolean50 = minutes14.isLessThan(minutes48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes51 = minutes11.minus(minutes48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-2) + "'", int28 == (-2));
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT2M" + "'", str41, "PT2M");
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        org.joda.time.Minutes minutes10 = minutes9.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = minutes10.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = minutes1.getFieldType((-22139006));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -22139006");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        java.lang.String str3 = minutes0.toString();
        org.joda.time.PeriodType periodType4 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = minutes10.get(durationFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = minutes10.getFieldType();
        int int14 = minutes9.get(durationFieldType13);
        org.joda.time.Minutes minutes16 = minutes9.plus((-1));
        org.joda.time.Minutes minutes18 = minutes9.minus((int) (short) 10);
        org.joda.time.Minutes minutes20 = minutes18.dividedBy((-2147483648));
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod22 = minutes21.toMutablePeriod();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes24 = minutes21.plus(minutes23);
        org.joda.time.Minutes minutes25 = minutes18.minus(minutes23);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes28 = minutes26.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes30 = minutes26.plus(0);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType35 = null;
        int int36 = minutes34.get(durationFieldType35);
        org.joda.time.DurationFieldType durationFieldType37 = minutes34.getFieldType();
        int int38 = minutes33.get(durationFieldType37);
        org.joda.time.Minutes minutes40 = minutes33.plus((-1));
        org.joda.time.Minutes minutes42 = minutes33.minus((int) (short) 10);
        org.joda.time.Minutes minutes44 = minutes42.dividedBy((-2147483648));
        org.joda.time.Minutes minutes45 = minutes30.plus(minutes44);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes48 = minutes46.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes49 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType50 = null;
        int int51 = minutes49.get(durationFieldType50);
        org.joda.time.MutablePeriod mutablePeriod52 = minutes49.toMutablePeriod();
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes49);
        boolean boolean54 = minutes48.isLessThan(minutes53);
        org.joda.time.DurationFieldType durationFieldType55 = minutes53.getFieldType();
        boolean boolean56 = minutes45.isSupported(durationFieldType55);
        int int57 = minutes18.get(durationFieldType55);
        int int58 = minutes6.get(durationFieldType55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes60 = minutes6.multipliedBy((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 32");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2) + "'", int14 == (-2));
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-2) + "'", int38 == (-2));
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-12) + "'", int57 == (-12));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.standardMinutesIn(readablePeriod0);
        java.lang.String str2 = minutes1.toString();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0M" + "'", str2, "PT0M");
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy(0);
        org.joda.time.Duration duration5 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        int int7 = minutes6.size();
        int int9 = minutes6.getValue(0);
        org.joda.time.Minutes minutes10 = minutes6.negated();
        org.joda.time.DurationFieldType durationFieldType12 = minutes6.getFieldType(0);
        boolean boolean13 = minutes2.equals((java.lang.Object) 0);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes16 = minutes14.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType18 = null;
        int int19 = minutes17.get(durationFieldType18);
        org.joda.time.MutablePeriod mutablePeriod20 = minutes17.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes17);
        boolean boolean22 = minutes16.isLessThan(minutes21);
        int int23 = minutes16.getMinutes();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean26 = minutes16.isLessThan(minutes25);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes16);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes30 = minutes28.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes31 = minutes28.negated();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes34 = minutes28.minus(minutes33);
        boolean boolean35 = minutes16.isLessThan(minutes28);
        boolean boolean36 = minutes2.isLessThan(minutes16);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = minutes41.getFieldType();
        int int45 = minutes40.get(durationFieldType44);
        org.joda.time.Minutes minutes47 = minutes40.plus((-1));
        boolean boolean48 = minutes37.isGreaterThan(minutes40);
        org.joda.time.Minutes minutes50 = minutes40.multipliedBy(2);
        org.joda.time.Minutes minutes51 = minutes50.negated();
        org.joda.time.Minutes minutes52 = minutes51.negated();
        boolean boolean53 = minutes16.isLessThan(minutes52);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-2) + "'", int23 == (-2));
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = minutes0.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes3 = minutes0.multipliedBy(34);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 34");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds5 = minutes0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        int int4 = minutes2.getMinutes();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType10 = null;
        int int11 = minutes9.get(durationFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = minutes9.getFieldType();
        int int13 = minutes8.get(durationFieldType12);
        org.joda.time.Minutes minutes15 = minutes8.plus((-1));
        boolean boolean16 = minutes5.isGreaterThan(minutes8);
        org.joda.time.DurationFieldType durationFieldType17 = minutes8.getFieldType();
        org.joda.time.PeriodType periodType18 = minutes8.getPeriodType();
        boolean boolean19 = minutes2.equals((java.lang.Object) minutes8);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.MAX_VALUE;
        int int21 = minutes20.size();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes25 = minutes23.dividedBy((int) (byte) -1);
        boolean boolean26 = minutes20.isLessThan(minutes23);
        boolean boolean27 = minutes8.isGreaterThan(minutes23);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes29 = minutes28.negated();
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod31 = minutes30.toMutablePeriod();
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes33 = minutes30.plus(minutes32);
        int int34 = minutes29.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes32);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.MAX_VALUE;
        int int36 = minutes29.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes35);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes39 = minutes37.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType41 = null;
        int int42 = minutes40.get(durationFieldType41);
        org.joda.time.MutablePeriod mutablePeriod43 = minutes40.toMutablePeriod();
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes40);
        boolean boolean45 = minutes39.isLessThan(minutes44);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes48 = minutes46.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes49 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType50 = null;
        int int51 = minutes49.get(durationFieldType50);
        org.joda.time.DurationFieldType durationFieldType52 = minutes49.getFieldType();
        int int53 = minutes48.get(durationFieldType52);
        org.joda.time.Minutes minutes55 = minutes48.plus((-1));
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod57 = minutes56.toMutablePeriod();
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes60 = minutes58.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes62 = minutes58.plus(0);
        int int63 = minutes56.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes58);
        org.joda.time.Minutes minutes65 = minutes58.plus((int) ' ');
        java.lang.String str66 = minutes58.toString();
        org.joda.time.Minutes minutes68 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean69 = minutes58.isLessThan(minutes68);
        boolean boolean70 = minutes55.isLessThan(minutes58);
        org.joda.time.Minutes minutes71 = minutes39.minus(minutes55);
        org.joda.time.MutablePeriod mutablePeriod72 = minutes39.toMutablePeriod();
        org.joda.time.Minutes minutes74 = minutes39.dividedBy(2);
        org.joda.time.Minutes minutes75 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes77 = minutes75.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes78 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType79 = null;
        int int80 = minutes78.get(durationFieldType79);
        org.joda.time.DurationFieldType durationFieldType81 = minutes78.getFieldType();
        int int82 = minutes77.get(durationFieldType81);
        org.joda.time.Minutes minutes84 = minutes77.plus((-1));
        org.joda.time.Minutes minutes85 = minutes84.negated();
        org.joda.time.Minutes minutes86 = minutes74.plus(minutes85);
        org.joda.time.Minutes minutes88 = minutes74.minus((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType89 = minutes88.getFieldType();
        int int90 = minutes35.get(durationFieldType89);
        boolean boolean91 = minutes8.isSupported(durationFieldType89);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-2) + "'", int13 == (-2));
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-2) + "'", int53 == (-2));
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT2M" + "'", str66, "PT2M");
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertNotNull(minutes75);
        org.junit.Assert.assertNotNull(minutes77);
        org.junit.Assert.assertNotNull(minutes78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-2) + "'", int82 == (-2));
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertNotNull(minutes85);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2147483647 + "'", int90 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        org.joda.time.Minutes minutes14 = minutes7.plus((-1));
        org.joda.time.Minutes minutes16 = minutes7.minus((int) (short) 10);
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((-2147483648));
        org.joda.time.Minutes minutes19 = minutes4.plus(minutes18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType21 = minutes20.getPeriodType();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = minutes22.negated();
        org.joda.time.DurationFieldType durationFieldType25 = minutes22.getFieldType();
        java.lang.String str26 = minutes22.toString();
        boolean boolean27 = minutes20.isGreaterThan(minutes22);
        boolean boolean28 = minutes4.isLessThan(minutes22);
        org.joda.time.PeriodType periodType29 = minutes22.getPeriodType();
        org.joda.time.Period period30 = minutes22.toPeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT2147483647M" + "'", str26, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        org.joda.time.Minutes minutes14 = minutes7.plus((-1));
        org.joda.time.Minutes minutes16 = minutes7.minus((int) (short) 10);
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((-2147483648));
        org.joda.time.Minutes minutes19 = minutes4.plus(minutes18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes22 = minutes20.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType24 = null;
        int int25 = minutes23.get(durationFieldType24);
        org.joda.time.MutablePeriod mutablePeriod26 = minutes23.toMutablePeriod();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes23);
        boolean boolean28 = minutes22.isLessThan(minutes27);
        org.joda.time.DurationFieldType durationFieldType29 = minutes27.getFieldType();
        boolean boolean30 = minutes19.isSupported(durationFieldType29);
        org.joda.time.Minutes minutes32 = minutes19.plus((int) (short) -1);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes35 = minutes33.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes36 = minutes33.negated();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes39 = minutes33.minus(minutes38);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod41 = minutes40.toMutablePeriod();
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod41);
        boolean boolean43 = minutes33.isLessThan(minutes42);
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes42);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes47 = minutes45.minus((int) (short) 0);
        boolean boolean48 = minutes42.isLessThan(minutes47);
        org.joda.time.Minutes minutes50 = minutes47.multipliedBy((int) (short) 0);
        boolean boolean51 = minutes19.isGreaterThan(minutes50);
        org.joda.time.Minutes minutes52 = minutes19.negated();
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes55 = minutes53.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes57 = minutes53.plus(0);
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes60 = minutes58.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes61 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType62 = null;
        int int63 = minutes61.get(durationFieldType62);
        org.joda.time.DurationFieldType durationFieldType64 = minutes61.getFieldType();
        int int65 = minutes60.get(durationFieldType64);
        org.joda.time.Minutes minutes67 = minutes60.plus((-1));
        org.joda.time.Minutes minutes69 = minutes60.minus((int) (short) 10);
        org.joda.time.Minutes minutes71 = minutes69.dividedBy((-2147483648));
        org.joda.time.Minutes minutes72 = minutes57.plus(minutes71);
        org.joda.time.Minutes minutes73 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes75 = minutes73.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes76 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType77 = null;
        int int78 = minutes76.get(durationFieldType77);
        org.joda.time.MutablePeriod mutablePeriod79 = minutes76.toMutablePeriod();
        org.joda.time.Minutes minutes80 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes76);
        boolean boolean81 = minutes75.isLessThan(minutes80);
        org.joda.time.DurationFieldType durationFieldType82 = minutes80.getFieldType();
        boolean boolean83 = minutes72.isSupported(durationFieldType82);
        boolean boolean84 = minutes19.isSupported(durationFieldType82);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-2) + "'", int65 == (-2));
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(minutes73);
        org.junit.Assert.assertNotNull(minutes75);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(minutes80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType2 = minutes0.getFieldType();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes4.negated();
        org.joda.time.Minutes minutes6 = minutes4.negated();
        java.lang.String str7 = minutes4.toString();
        int int8 = minutes4.size();
        org.joda.time.Minutes minutes10 = minutes4.minus(0);
        org.joda.time.Minutes minutes12 = minutes4.plus((int) (short) 0);
        boolean boolean13 = minutes0.isLessThan(minutes4);
        int int14 = minutes4.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod4 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes9 = minutes5.plus(0);
        int int10 = minutes3.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes5);
        org.joda.time.Minutes minutes12 = minutes5.plus((int) ' ');
        org.joda.time.Period period13 = minutes5.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod14 = minutes5.toMutablePeriod();
        int int15 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes5);
        int int16 = minutes0.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes18 = minutes0.minus((-4));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 4");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy(0);
        org.joda.time.Minutes minutes6 = minutes4.plus((-2147483648));
        org.joda.time.Minutes minutes8 = minutes6.minus((int) (byte) 0);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes9.negated();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes9);
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        int int13 = minutes8.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes11);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes15 = minutes14.negated();
        org.joda.time.Minutes minutes17 = minutes15.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes17);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType23 = null;
        int int24 = minutes22.get(durationFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = minutes22.getFieldType();
        int int26 = minutes21.get(durationFieldType25);
        int int27 = minutes18.get(durationFieldType25);
        int int28 = minutes18.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes29 = minutes11.plus(minutes18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-2) + "'", int26 == (-2));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        int int8 = minutes7.size();
        org.joda.time.Minutes minutes9 = minutes0.plus(minutes7);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = minutes13.get(durationFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = minutes13.getFieldType();
        int int17 = minutes12.get(durationFieldType16);
        int int18 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes12);
        org.joda.time.Minutes minutes20 = minutes0.plus(2147483647);
        java.lang.Class<?> wildcardClass21 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = minutes0.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT214748364M");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes6 = minutes4.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = minutes4.plus(0);
        int int9 = minutes2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes4);
        org.joda.time.Minutes minutes11 = minutes4.plus((int) ' ');
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = minutes12.getFieldType();
        int int14 = minutes4.get(durationFieldType13);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes17 = minutes15.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes18 = minutes15.negated();
        org.joda.time.Minutes minutes19 = minutes4.plus(minutes15);
        boolean boolean20 = minutes1.isGreaterThan(minutes15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes22 = minutes1.minus((-2147483645));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 214748364 + 2147483645");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean6 = minutes0.isGreaterThan(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes8 = minutes7.negated();
        org.joda.time.Minutes minutes10 = minutes8.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = minutes15.getFieldType();
        int int19 = minutes14.get(durationFieldType18);
        int int20 = minutes11.get(durationFieldType18);
        org.joda.time.PeriodType periodType21 = minutes11.getPeriodType();
        int int22 = minutes11.getMinutes();
        boolean boolean23 = minutes0.isLessThan(minutes11);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.THREE;
        int int25 = minutes24.size();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod27 = minutes26.toMutablePeriod();
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes30 = minutes28.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes32 = minutes28.plus(0);
        int int33 = minutes26.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes28);
        org.joda.time.Minutes minutes35 = minutes28.plus((int) ' ');
        int int36 = minutes24.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes35);
        org.joda.time.Minutes minutes38 = minutes35.minus((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes39 = minutes11.plus(minutes38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 34");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(minutes38);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = minutes2.multipliedBy(2);
        java.lang.Class<?> wildcardClass12 = minutes11.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        org.joda.time.Minutes minutes8 = minutes0.dividedBy(2147483646);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutes((int) (byte) 10);
        boolean boolean11 = minutes0.isLessThan(minutes10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.MutablePeriod mutablePeriod18 = minutes15.toMutablePeriod();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes15);
        boolean boolean20 = minutes14.isLessThan(minutes19);
        org.joda.time.Minutes minutes21 = minutes10.plus(minutes14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType23 = minutes21.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(minutes21);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean13 = minutes2.isLessThan(minutes12);
        org.joda.time.Period period14 = minutes12.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes16 = minutes12.multipliedBy((-2147483647));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * -2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod4 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes9 = minutes5.plus(0);
        int int10 = minutes3.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes5);
        org.joda.time.Minutes minutes12 = minutes5.plus((int) ' ');
        org.joda.time.Period period13 = minutes5.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod14 = minutes5.toMutablePeriod();
        int int15 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes17 = minutes0.multipliedBy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 3");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes11 = minutes0.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes13 = minutes11.multipliedBy((-2147483645));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483647 * -2147483645");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType2 = minutes0.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        int int4 = minutes0.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = minutes3.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType7 = null;
        int int8 = minutes6.get(durationFieldType7);
        org.joda.time.DurationFieldType durationFieldType9 = minutes6.getFieldType();
        int int10 = minutes5.get(durationFieldType9);
        org.joda.time.Minutes minutes12 = minutes5.plus((-1));
        boolean boolean13 = minutes2.isGreaterThan(minutes5);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes16 = minutes14.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType18 = null;
        int int19 = minutes17.get(durationFieldType18);
        org.joda.time.DurationFieldType durationFieldType20 = minutes17.getFieldType();
        int int21 = minutes16.get(durationFieldType20);
        boolean boolean22 = minutes5.isSupported(durationFieldType20);
        org.joda.time.Minutes minutes24 = minutes5.dividedBy((-2));
        int int25 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes5);
        java.lang.Class<?> wildcardClass26 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-2) + "'", int21 == (-2));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        org.joda.time.Minutes minutes14 = minutes7.plus((-1));
        org.joda.time.Minutes minutes16 = minutes7.minus((int) (short) 10);
        org.joda.time.Duration duration17 = minutes7.toStandardDuration();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes19 = minutes18.negated();
        org.joda.time.Minutes minutes20 = minutes18.negated();
        java.lang.String str21 = minutes18.toString();
        org.joda.time.Minutes minutes23 = minutes18.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes27 = minutes25.multipliedBy((int) (byte) 0);
        boolean boolean28 = minutes23.equals((java.lang.Object) minutes25);
        boolean boolean29 = minutes7.isGreaterThan(minutes25);
        boolean boolean30 = minutes4.equals((java.lang.Object) boolean29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType35 = null;
        int int36 = minutes34.get(durationFieldType35);
        org.joda.time.DurationFieldType durationFieldType37 = minutes34.getFieldType();
        int int38 = minutes33.get(durationFieldType37);
        org.joda.time.Minutes minutes40 = minutes33.plus((-1));
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod42 = minutes41.toMutablePeriod();
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes45 = minutes43.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes47 = minutes43.plus(0);
        int int48 = minutes41.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes43);
        org.joda.time.Minutes minutes50 = minutes43.plus((int) ' ');
        java.lang.String str51 = minutes43.toString();
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean54 = minutes43.isLessThan(minutes53);
        boolean boolean55 = minutes40.isLessThan(minutes43);
        int int56 = minutes40.getMinutes();
        org.joda.time.DurationFieldType durationFieldType57 = minutes40.getFieldType();
        int int58 = minutes4.get(durationFieldType57);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2147483647M" + "'", str21, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-2) + "'", int38 == (-2));
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT2M" + "'", str51, "PT2M");
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        int int8 = minutes7.size();
        org.joda.time.Minutes minutes9 = minutes0.plus(minutes7);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = minutes13.get(durationFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = minutes13.getFieldType();
        int int17 = minutes12.get(durationFieldType16);
        int int18 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes20 = minutes0.minus((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes9);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.MutablePeriod mutablePeriod15 = minutes12.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType16 = minutes12.getFieldType();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType18 = null;
        int int19 = minutes17.get(durationFieldType18);
        org.joda.time.MutablePeriod mutablePeriod20 = minutes17.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType21 = minutes17.getFieldType();
        boolean boolean22 = minutes12.isSupported(durationFieldType21);
        int int23 = minutes11.get(durationFieldType21);
        java.lang.Class<?> wildcardClass24 = durationFieldType21.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-2147483648) + "'", int23 == (-2147483648));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes3 = minutes2.negated();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = minutes1.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes7 = minutes5.plus(0);
        org.joda.time.DurationFieldType durationFieldType8 = minutes7.getFieldType();
        int int9 = minutes3.get(durationFieldType8);
        org.joda.time.Minutes minutes11 = minutes3.dividedBy((int) ' ');
        java.lang.String str12 = minutes3.toString();
        org.joda.time.Duration duration13 = minutes3.toStandardDuration();
        org.joda.time.Period period14 = minutes3.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds15 = minutes3.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT2147483647M" + "'", str12, "PT2147483647M");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes5 = minutes2.plus(minutes4);
        int int6 = minutes1.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes4);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        int int8 = minutes1.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes7);
        java.lang.Class<?> wildcardClass9 = minutes7.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod2 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        int int4 = minutes3.size();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy((int) (byte) -1);
        boolean boolean9 = minutes3.isLessThan(minutes6);
        boolean boolean10 = minutes0.isLessThan(minutes3);
        int int11 = minutes3.size();
        org.joda.time.PeriodType periodType12 = minutes3.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        java.lang.Class<?> wildcardClass8 = minutes2.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        org.joda.time.Minutes minutes14 = minutes7.plus((-1));
        org.joda.time.Minutes minutes16 = minutes7.minus((int) (short) 10);
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((-2147483648));
        org.joda.time.Minutes minutes19 = minutes4.plus(minutes18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes22 = minutes20.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType24 = null;
        int int25 = minutes23.get(durationFieldType24);
        org.joda.time.MutablePeriod mutablePeriod26 = minutes23.toMutablePeriod();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes23);
        boolean boolean28 = minutes22.isLessThan(minutes27);
        org.joda.time.DurationFieldType durationFieldType29 = minutes27.getFieldType();
        boolean boolean30 = minutes19.isSupported(durationFieldType29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Period period34 = minutes33.toPeriod();
        org.joda.time.Minutes minutes35 = minutes19.plus(minutes33);
        org.joda.time.MutablePeriod mutablePeriod36 = minutes33.toMutablePeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes4.getFieldType();
        int int8 = minutes3.get(durationFieldType7);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        boolean boolean11 = minutes0.isGreaterThan(minutes3);
        org.joda.time.DurationFieldType durationFieldType12 = minutes3.getFieldType();
        org.joda.time.PeriodType periodType13 = minutes3.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType15 = minutes3.getFieldType(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-2) + "'", int8 == (-2));
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes5.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType9 = minutes5.getFieldType();
        int int10 = minutes0.get(durationFieldType9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        boolean boolean12 = minutes0.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = null;
        org.joda.time.Minutes minutes14 = minutes11.plus(minutes13);
        org.joda.time.Minutes minutes15 = minutes14.negated();
        int int16 = minutes15.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes4 = minutes1.minus(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds5 = minutes1.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        java.lang.String str9 = minutes3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes11.negated();
        org.joda.time.Minutes minutes13 = minutes11.negated();
        org.joda.time.DurationFieldType durationFieldType14 = minutes11.getFieldType();
        java.lang.String str15 = minutes11.toString();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes17 = minutes16.negated();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes16);
        int int19 = minutes16.size();
        org.joda.time.MutablePeriod mutablePeriod20 = minutes16.toMutablePeriod();
        boolean boolean21 = minutes11.equals((java.lang.Object) minutes16);
        org.joda.time.DurationFieldType durationFieldType23 = minutes16.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod25 = minutes24.toMutablePeriod();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes28 = minutes26.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes30 = minutes26.plus(0);
        int int31 = minutes24.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes26);
        org.joda.time.Minutes minutes33 = minutes26.plus((int) ' ');
        java.lang.String str34 = minutes26.toString();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean37 = minutes26.isLessThan(minutes36);
        org.joda.time.Period period38 = minutes36.toPeriod();
        boolean boolean39 = minutes16.isGreaterThan(minutes36);
        boolean boolean40 = minutes3.isLessThan(minutes16);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = minutes3.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT-2147483645M" + "'", str9, "PT-2147483645M");
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT2147483647M" + "'", str15, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT2M" + "'", str34, "PT2M");
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy(0);
        org.joda.time.Duration duration5 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        int int7 = minutes6.size();
        int int9 = minutes6.getValue(0);
        org.joda.time.Minutes minutes10 = minutes6.negated();
        org.joda.time.DurationFieldType durationFieldType12 = minutes6.getFieldType(0);
        boolean boolean13 = minutes2.equals((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds14 = minutes2.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483646 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.PeriodType periodType5 = minutes0.getPeriodType();
        java.lang.Class<?> wildcardClass6 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus((int) (short) 1);
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy(0);
        boolean boolean15 = minutes0.isGreaterThan(minutes14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType17 = minutes0.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Duration duration8 = minutes0.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = minutes0.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        int int4 = minutes2.getMinutes();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MAX_VALUE;
        int int9 = minutes8.size();
        int int10 = minutes5.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes8);
        org.joda.time.Minutes minutes11 = minutes2.minus(minutes5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType13 = minutes11.getFieldType((-12));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -12");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(minutes11);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        org.joda.time.Minutes minutes12 = minutes10.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MAX_VALUE;
        int int14 = minutes13.size();
        int int16 = minutes13.getValue(0);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes13);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = minutes21.get(durationFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = minutes21.getFieldType();
        int int25 = minutes20.get(durationFieldType24);
        org.joda.time.Minutes minutes27 = minutes20.plus((-1));
        org.joda.time.Minutes minutes29 = minutes20.minus((int) (short) 10);
        org.joda.time.Duration duration30 = minutes20.toStandardDuration();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes32 = minutes31.negated();
        org.joda.time.Minutes minutes33 = minutes31.negated();
        java.lang.String str34 = minutes31.toString();
        org.joda.time.Minutes minutes36 = minutes31.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (byte) 0);
        boolean boolean41 = minutes36.equals((java.lang.Object) minutes38);
        boolean boolean42 = minutes20.isGreaterThan(minutes38);
        boolean boolean43 = minutes17.equals((java.lang.Object) boolean42);
        org.joda.time.Minutes minutes44 = minutes17.negated();
        int int45 = minutes12.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes44);
        int int46 = minutes12.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT2147483647M" + "'", str34, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType11 = minutes10.getFieldType();
        int int12 = minutes2.get(durationFieldType11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = minutes13.negated();
        org.joda.time.Minutes minutes17 = minutes2.plus(minutes13);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = minutes21.get(durationFieldType22);
        org.joda.time.MutablePeriod mutablePeriod24 = minutes21.toMutablePeriod();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes21);
        boolean boolean26 = minutes20.isLessThan(minutes25);
        int int27 = minutes20.getMinutes();
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean30 = minutes20.isLessThan(minutes29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration32 = minutes31.toStandardDuration();
        org.joda.time.Duration duration33 = minutes31.toStandardDuration();
        org.joda.time.Minutes minutes35 = minutes31.minus(2);
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes38 = minutes36.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes39 = minutes36.negated();
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes41 = minutes40.negated();
        org.joda.time.Minutes minutes42 = minutes40.negated();
        boolean boolean43 = minutes36.equals((java.lang.Object) minutes42);
        boolean boolean44 = minutes35.isLessThan(minutes36);
        org.joda.time.Minutes minutes45 = minutes29.minus(minutes36);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes47 = minutes46.negated();
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes46);
        java.lang.String str49 = minutes46.toString();
        org.joda.time.Minutes minutes50 = minutes45.plus(minutes46);
        boolean boolean51 = minutes17.isGreaterThan(minutes50);
        org.joda.time.DurationFieldType durationFieldType52 = null;
        boolean boolean53 = minutes50.isSupported(durationFieldType52);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-2) + "'", int27 == (-2));
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT2147483647M" + "'", str49, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes8.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        org.joda.time.Minutes minutes22 = minutes15.plus((-1));
        org.joda.time.Minutes minutes24 = minutes15.minus((int) (short) 10);
        org.joda.time.Minutes minutes26 = minutes24.dividedBy((-2147483648));
        org.joda.time.Minutes minutes27 = minutes12.plus(minutes26);
        org.joda.time.Minutes minutes28 = minutes2.minus(minutes12);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes35 = minutes31.plus(0);
        int int36 = minutes29.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes31);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes39 = minutes37.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = minutes37.plus(0);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes44 = minutes42.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType46 = null;
        int int47 = minutes45.get(durationFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = minutes45.getFieldType();
        int int49 = minutes44.get(durationFieldType48);
        org.joda.time.Minutes minutes51 = minutes44.plus((-1));
        org.joda.time.Minutes minutes53 = minutes44.minus((int) (short) 10);
        org.joda.time.Minutes minutes55 = minutes53.dividedBy((-2147483648));
        org.joda.time.Minutes minutes56 = minutes41.plus(minutes55);
        org.joda.time.Minutes minutes57 = minutes31.minus(minutes41);
        org.joda.time.PeriodType periodType58 = minutes31.getPeriodType();
        boolean boolean59 = minutes12.isLessThan(minutes31);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType61 = minutes60.getPeriodType();
        org.joda.time.Minutes minutes62 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes63 = minutes62.negated();
        org.joda.time.Minutes minutes64 = minutes62.negated();
        org.joda.time.DurationFieldType durationFieldType65 = minutes62.getFieldType();
        java.lang.String str66 = minutes62.toString();
        boolean boolean67 = minutes60.isGreaterThan(minutes62);
        boolean boolean68 = minutes31.isLessThan(minutes60);
        org.joda.time.Minutes minutes69 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes70 = minutes69.negated();
        org.joda.time.Minutes minutes71 = minutes69.negated();
        java.lang.String str72 = minutes69.toString();
        org.joda.time.Minutes minutes74 = minutes69.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes76 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes78 = minutes76.multipliedBy((int) (byte) 0);
        boolean boolean79 = minutes74.equals((java.lang.Object) minutes76);
        int int80 = minutes60.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes76);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-2) + "'", int49 == (-2));
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT2147483647M" + "'", str66, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT2147483647M" + "'", str72, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertNotNull(minutes78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        org.joda.time.Period period10 = minutes2.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod11 = minutes2.toMutablePeriod();
        org.joda.time.Period period12 = minutes2.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod13 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes15 = minutes2.plus((int) '4');
        java.lang.Class<?> wildcardClass16 = minutes2.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType5 = minutes1.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        org.joda.time.Minutes minutes12 = minutes10.plus(0);
        org.joda.time.DurationFieldType durationFieldType13 = minutes12.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Period period2 = minutes0.toPeriod();
        java.lang.Class<?> wildcardClass3 = period2.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy((int) 'a');
        int int3 = minutes2.getMinutes();
        org.joda.time.DurationFieldType durationFieldType4 = minutes2.getFieldType();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.MutablePeriod mutablePeriod11 = minutes8.toMutablePeriod();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes8);
        boolean boolean13 = minutes7.isLessThan(minutes12);
        int int14 = minutes7.getMinutes();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean17 = minutes7.isLessThan(minutes16);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration19 = minutes18.toStandardDuration();
        org.joda.time.Duration duration20 = minutes18.toStandardDuration();
        org.joda.time.Minutes minutes22 = minutes18.minus(2);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes25 = minutes23.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes26 = minutes23.negated();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes28 = minutes27.negated();
        org.joda.time.Minutes minutes29 = minutes27.negated();
        boolean boolean30 = minutes23.equals((java.lang.Object) minutes29);
        boolean boolean31 = minutes22.isLessThan(minutes23);
        org.joda.time.Minutes minutes32 = minutes16.minus(minutes23);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes34 = minutes33.negated();
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes33);
        java.lang.String str36 = minutes33.toString();
        org.joda.time.Minutes minutes37 = minutes32.plus(minutes33);
        int int38 = minutes33.getMinutes();
        int int39 = minutes2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes33);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-22139006) + "'", int3 == (-22139006));
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2) + "'", int14 == (-2));
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT2147483647M" + "'", str36, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes3 = minutes2.negated();
        org.joda.time.Minutes minutes4 = minutes2.negated();
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        java.lang.String str6 = minutes2.toString();
        boolean boolean7 = minutes0.isGreaterThan(minutes2);
        org.joda.time.Minutes minutes8 = minutes2.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes10 = minutes8.multipliedBy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483647 * 3");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT2147483647M" + "'", str6, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes8);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        int int8 = minutes7.size();
        org.joda.time.Minutes minutes9 = minutes0.plus(minutes7);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes11 = minutes10.negated();
        org.joda.time.PeriodType periodType12 = minutes11.getPeriodType();
        org.joda.time.Minutes minutes13 = minutes11.negated();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes15.plus(0);
        org.joda.time.DurationFieldType durationFieldType18 = minutes17.getFieldType();
        int int19 = minutes13.get(durationFieldType18);
        boolean boolean20 = minutes7.isSupported(durationFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes22 = minutes7.plus((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 35");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Period period1 = minutes0.toPeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod4 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes9 = minutes5.plus(0);
        int int10 = minutes3.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes5);
        org.joda.time.Minutes minutes12 = minutes5.plus((int) ' ');
        org.joda.time.Minutes minutes13 = minutes12.negated();
        org.joda.time.Period period14 = minutes12.toPeriod();
        boolean boolean15 = minutes0.equals((java.lang.Object) minutes12);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes37 = minutes2.dividedBy(2);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = minutes41.getFieldType();
        int int45 = minutes40.get(durationFieldType44);
        org.joda.time.Minutes minutes47 = minutes40.plus((-1));
        org.joda.time.Minutes minutes48 = minutes47.negated();
        org.joda.time.Minutes minutes49 = minutes37.plus(minutes48);
        org.joda.time.Minutes minutes51 = minutes37.minus((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType52 = minutes51.getFieldType();
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes55 = minutes53.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes57 = minutes53.plus(0);
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes60 = minutes58.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes61 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType62 = null;
        int int63 = minutes61.get(durationFieldType62);
        org.joda.time.DurationFieldType durationFieldType64 = minutes61.getFieldType();
        int int65 = minutes60.get(durationFieldType64);
        org.joda.time.Minutes minutes67 = minutes60.plus((-1));
        org.joda.time.Minutes minutes69 = minutes60.minus((int) (short) 10);
        org.joda.time.Minutes minutes71 = minutes69.dividedBy((-2147483648));
        org.joda.time.Minutes minutes72 = minutes57.plus(minutes71);
        org.joda.time.Minutes minutes73 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes75 = minutes73.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes76 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType77 = null;
        int int78 = minutes76.get(durationFieldType77);
        org.joda.time.MutablePeriod mutablePeriod79 = minutes76.toMutablePeriod();
        org.joda.time.Minutes minutes80 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes76);
        boolean boolean81 = minutes75.isLessThan(minutes80);
        org.joda.time.DurationFieldType durationFieldType82 = minutes80.getFieldType();
        boolean boolean83 = minutes72.isSupported(durationFieldType82);
        org.joda.time.Minutes minutes84 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes86 = minutes84.multipliedBy((int) (short) -1);
        org.joda.time.Period period87 = minutes86.toPeriod();
        org.joda.time.Minutes minutes88 = minutes72.plus(minutes86);
        boolean boolean89 = minutes51.equals((java.lang.Object) minutes72);
        java.lang.String str90 = minutes72.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-2) + "'", int65 == (-2));
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(minutes73);
        org.junit.Assert.assertNotNull(minutes75);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(minutes80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "PT2M" + "'", str90, "PT2M");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = minutes0.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean13 = minutes2.isLessThan(minutes12);
        org.joda.time.Minutes minutes14 = minutes2.negated();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(minutes14);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean6 = minutes0.isGreaterThan(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes8 = minutes7.negated();
        org.joda.time.Minutes minutes10 = minutes8.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = minutes15.getFieldType();
        int int19 = minutes14.get(durationFieldType18);
        int int20 = minutes11.get(durationFieldType18);
        org.joda.time.PeriodType periodType21 = minutes11.getPeriodType();
        int int22 = minutes11.getMinutes();
        boolean boolean23 = minutes0.isLessThan(minutes11);
        int int24 = minutes11.getMinutes();
        org.joda.time.Period period25 = minutes11.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes27 = minutes11.plus((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 52");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        java.lang.Class<?> wildcardClass3 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        java.lang.String str2 = minutes0.toString();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes0.minus((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0M" + "'", str2, "PT0M");
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes8.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        org.joda.time.Minutes minutes22 = minutes15.plus((-1));
        org.joda.time.Minutes minutes24 = minutes15.minus((int) (short) 10);
        org.joda.time.Minutes minutes26 = minutes24.dividedBy((-2147483648));
        org.joda.time.Minutes minutes27 = minutes12.plus(minutes26);
        org.joda.time.Minutes minutes28 = minutes2.minus(minutes12);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes32 = minutes29.plus(minutes31);
        org.joda.time.Minutes minutes33 = minutes28.plus(minutes31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType35 = minutes31.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes5 = minutes0.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (byte) 0);
        boolean boolean10 = minutes5.equals((java.lang.Object) minutes7);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes11.negated();
        org.joda.time.DurationFieldType durationFieldType13 = minutes11.getFieldType();
        boolean boolean14 = minutes5.isSupported(durationFieldType13);
        java.lang.Class<?> wildcardClass15 = durationFieldType13.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.PeriodType periodType2 = minutes0.getPeriodType();
        org.joda.time.Period period3 = minutes0.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds4 = minutes0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType12 = null;
        int int13 = minutes11.get(durationFieldType12);
        org.joda.time.MutablePeriod mutablePeriod14 = minutes11.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType15 = minutes11.getFieldType();
        org.joda.time.Minutes minutes17 = minutes11.dividedBy((-1));
        org.joda.time.Minutes minutes19 = minutes11.dividedBy(2147483646);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.minutes((int) (byte) 10);
        boolean boolean22 = minutes11.isLessThan(minutes21);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes25 = minutes23.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType27 = null;
        int int28 = minutes26.get(durationFieldType27);
        org.joda.time.MutablePeriod mutablePeriod29 = minutes26.toMutablePeriod();
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes26);
        boolean boolean31 = minutes25.isLessThan(minutes30);
        org.joda.time.Minutes minutes32 = minutes21.plus(minutes25);
        boolean boolean33 = minutes2.isGreaterThan(minutes21);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.minutes((int) (byte) -1);
        org.joda.time.Minutes minutes36 = minutes21.minus(minutes35);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration38 = minutes37.toStandardDuration();
        org.joda.time.Duration duration39 = minutes37.toStandardDuration();
        org.joda.time.Minutes minutes41 = minutes37.minus(2);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes44 = minutes42.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType46 = null;
        int int47 = minutes45.get(durationFieldType46);
        org.joda.time.MutablePeriod mutablePeriod48 = minutes45.toMutablePeriod();
        org.joda.time.Minutes minutes49 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes45);
        boolean boolean50 = minutes44.isLessThan(minutes49);
        int int51 = minutes44.getMinutes();
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean54 = minutes44.isLessThan(minutes53);
        org.joda.time.Minutes minutes55 = minutes41.minus(minutes53);
        org.joda.time.Minutes minutes56 = minutes36.minus(minutes55);
        org.joda.time.Minutes minutes58 = minutes56.plus(2147483646);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-2) + "'", int51 == (-2));
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = minutes1.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes7 = minutes5.plus(0);
        org.joda.time.DurationFieldType durationFieldType8 = minutes7.getFieldType();
        int int9 = minutes3.get(durationFieldType8);
        int int11 = minutes3.getValue((int) (byte) 0);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod13 = minutes12.toMutablePeriod();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes15 = minutes3.minus(minutes14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes14);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        org.joda.time.Minutes minutes4 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes0.getFieldType(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = minutes0.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType6);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType3 = minutes2.getFieldType();
        org.joda.time.Period period4 = minutes2.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = minutes2.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType12 = null;
        int int13 = minutes11.get(durationFieldType12);
        org.joda.time.MutablePeriod mutablePeriod14 = minutes11.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType15 = minutes11.getFieldType();
        org.joda.time.Minutes minutes17 = minutes11.dividedBy((-1));
        org.joda.time.Minutes minutes19 = minutes11.dividedBy(2147483646);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.minutes((int) (byte) 10);
        boolean boolean22 = minutes11.isLessThan(minutes21);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes25 = minutes23.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType27 = null;
        int int28 = minutes26.get(durationFieldType27);
        org.joda.time.MutablePeriod mutablePeriod29 = minutes26.toMutablePeriod();
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes26);
        boolean boolean31 = minutes25.isLessThan(minutes30);
        org.joda.time.Minutes minutes32 = minutes21.plus(minutes25);
        boolean boolean33 = minutes2.isGreaterThan(minutes21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes35 = minutes2.multipliedBy((-2147483645));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2 * -2147483645");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean12 = minutes2.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Duration duration15 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes13.minus(2);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = minutes18.negated();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = minutes22.negated();
        boolean boolean25 = minutes18.equals((java.lang.Object) minutes24);
        boolean boolean26 = minutes17.isLessThan(minutes18);
        org.joda.time.Minutes minutes27 = minutes11.minus(minutes18);
        java.lang.Class<?> wildcardClass28 = minutes27.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes3 = minutes2.negated();
        org.joda.time.Minutes minutes5 = minutes3.dividedBy((int) (byte) -1);
        boolean boolean6 = minutes0.isLessThan(minutes3);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = minutes10.get(durationFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = minutes10.getFieldType();
        int int14 = minutes9.get(durationFieldType13);
        org.joda.time.Minutes minutes16 = minutes9.plus((-1));
        org.joda.time.PeriodType periodType17 = minutes9.getPeriodType();
        org.joda.time.Minutes minutes18 = minutes9.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes19 = minutes0.plus(minutes18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2) + "'", int14 == (-2));
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(minutes18);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes4 = minutes1.minus(0);
        org.joda.time.Minutes minutes6 = minutes1.minus((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = minutes1.getFieldType((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483648");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes4 = minutes0.minus(2);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = minutes5.negated();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes9.negated();
        org.joda.time.Minutes minutes11 = minutes9.negated();
        boolean boolean12 = minutes5.equals((java.lang.Object) minutes11);
        boolean boolean13 = minutes4.isLessThan(minutes5);
        org.joda.time.Minutes minutes15 = minutes4.plus((int) '#');
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(minutes15);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT-12M");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration3 = minutes2.toStandardDuration();
        org.joda.time.Duration duration4 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes6 = minutes2.minus(2);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = minutes10.get(durationFieldType11);
        org.joda.time.MutablePeriod mutablePeriod13 = minutes10.toMutablePeriod();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes10);
        boolean boolean15 = minutes9.isLessThan(minutes14);
        int int16 = minutes9.getMinutes();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean19 = minutes9.isLessThan(minutes18);
        org.joda.time.Minutes minutes20 = minutes6.minus(minutes18);
        int int21 = minutes18.getMinutes();
        org.joda.time.Minutes minutes22 = minutes1.minus(minutes18);
        org.joda.time.Minutes minutes23 = minutes18.negated();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-2147483645) + "'", int21 == (-2147483645));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes5.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType9 = minutes5.getFieldType();
        int int10 = minutes0.get(durationFieldType9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        boolean boolean12 = minutes0.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = null;
        org.joda.time.Minutes minutes14 = minutes11.plus(minutes13);
        java.lang.String str15 = minutes14.toString();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes17 = minutes16.negated();
        org.joda.time.Minutes minutes18 = minutes16.negated();
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        java.lang.String str20 = minutes16.toString();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes22 = minutes21.negated();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes21);
        int int24 = minutes21.size();
        org.joda.time.MutablePeriod mutablePeriod25 = minutes21.toMutablePeriod();
        boolean boolean26 = minutes16.equals((java.lang.Object) minutes21);
        org.joda.time.DurationFieldType durationFieldType28 = minutes21.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes35 = minutes31.plus(0);
        int int36 = minutes29.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes31);
        org.joda.time.Minutes minutes38 = minutes31.plus((int) ' ');
        java.lang.String str39 = minutes31.toString();
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean42 = minutes31.isLessThan(minutes41);
        org.joda.time.Period period43 = minutes41.toPeriod();
        boolean boolean44 = minutes21.isGreaterThan(minutes41);
        org.joda.time.Period period45 = minutes21.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes46 = minutes14.plus(minutes21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT2147483647M" + "'", str15, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT2147483647M" + "'", str20, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT2M" + "'", str39, "PT2M");
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = minutes13.negated();
        org.joda.time.DurationFieldType durationFieldType15 = minutes13.getFieldType();
        org.joda.time.PeriodType periodType16 = minutes13.getPeriodType();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes19 = minutes17.minus((int) (short) 1);
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy(0);
        org.joda.time.Period period22 = minutes19.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod23 = minutes19.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType24 = minutes19.getFieldType();
        int int25 = minutes13.get(durationFieldType24);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.PeriodType periodType10 = minutes2.getPeriodType();
        org.joda.time.Minutes minutes11 = minutes2.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType13 = minutes2.getFieldType((-22139006));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -22139006");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(minutes11);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes4 = minutes0.minus(2);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = minutes5.negated();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes9.negated();
        org.joda.time.Minutes minutes11 = minutes9.negated();
        boolean boolean12 = minutes5.equals((java.lang.Object) minutes11);
        boolean boolean13 = minutes4.isLessThan(minutes5);
        org.joda.time.PeriodType periodType14 = minutes5.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT-2147483648M");
        org.joda.time.Hours hours2 = minutes1.toStandardHours();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        org.joda.time.Minutes minutes14 = minutes7.plus((-1));
        org.joda.time.Minutes minutes16 = minutes7.minus((int) (short) 10);
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((-2147483648));
        org.joda.time.Minutes minutes19 = minutes4.plus(minutes18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType21 = minutes20.getPeriodType();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = minutes22.negated();
        org.joda.time.DurationFieldType durationFieldType25 = minutes22.getFieldType();
        java.lang.String str26 = minutes22.toString();
        boolean boolean27 = minutes20.isGreaterThan(minutes22);
        boolean boolean28 = minutes4.isLessThan(minutes22);
        org.joda.time.PeriodType periodType29 = minutes22.getPeriodType();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes33 = minutes31.plus(0);
        org.joda.time.DurationFieldType durationFieldType34 = minutes33.getFieldType();
        boolean boolean35 = minutes22.isSupported(durationFieldType34);
        org.joda.time.Duration duration36 = minutes22.toStandardDuration();
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType38 = minutes37.getPeriodType();
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes40 = minutes39.negated();
        org.joda.time.Minutes minutes41 = minutes39.negated();
        org.joda.time.DurationFieldType durationFieldType42 = minutes39.getFieldType();
        java.lang.String str43 = minutes39.toString();
        boolean boolean44 = minutes37.isGreaterThan(minutes39);
        org.joda.time.Minutes minutes45 = minutes39.negated();
        boolean boolean46 = minutes22.isGreaterThan(minutes45);
        org.joda.time.Duration duration47 = minutes45.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT2147483647M" + "'", str26, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT2147483647M" + "'", str43, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType15 = minutes11.getFieldType((-4));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod15 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes17 = minutes14.plus(minutes16);
        org.joda.time.Minutes minutes18 = minutes11.minus(minutes16);
        org.joda.time.MutablePeriod mutablePeriod19 = minutes11.toMutablePeriod();
        java.lang.Class<?> wildcardClass20 = mutablePeriod19.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = minutes2.getFieldType((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        int int4 = minutes0.size();
        org.joda.time.Minutes minutes6 = minutes0.minus(0);
        org.joda.time.Minutes minutes8 = minutes0.plus((int) (short) 0);
        int int9 = minutes8.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes0.multipliedBy((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2 * -2147483648");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes5 = minutes2.plus(0);
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType10 = null;
        int int11 = minutes9.get(durationFieldType10);
        org.joda.time.MutablePeriod mutablePeriod12 = minutes9.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes9);
        boolean boolean14 = minutes8.isLessThan(minutes13);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes17 = minutes15.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType19 = null;
        int int20 = minutes18.get(durationFieldType19);
        org.joda.time.DurationFieldType durationFieldType21 = minutes18.getFieldType();
        int int22 = minutes17.get(durationFieldType21);
        org.joda.time.Minutes minutes24 = minutes17.plus((-1));
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod26 = minutes25.toMutablePeriod();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes29 = minutes27.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes31 = minutes27.plus(0);
        int int32 = minutes25.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes27);
        org.joda.time.Minutes minutes34 = minutes27.plus((int) ' ');
        java.lang.String str35 = minutes27.toString();
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean38 = minutes27.isLessThan(minutes37);
        boolean boolean39 = minutes24.isLessThan(minutes27);
        org.joda.time.Minutes minutes40 = minutes8.minus(minutes24);
        org.joda.time.MutablePeriod mutablePeriod41 = minutes8.toMutablePeriod();
        org.joda.time.Minutes minutes43 = minutes8.dividedBy(2);
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes46 = minutes44.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.MAX_VALUE;
        int int48 = minutes47.size();
        int int49 = minutes44.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes47);
        org.joda.time.Minutes minutes50 = minutes8.plus(minutes44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes51 = minutes5.minus(minutes8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT2M" + "'", str35, "PT2M");
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(minutes50);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        int int4 = minutes3.size();
        int int5 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes7 = minutes3.plus((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 100");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes3 = minutes2.negated();
        org.joda.time.Minutes minutes5 = minutes3.dividedBy((int) (byte) -1);
        boolean boolean6 = minutes0.isLessThan(minutes3);
        org.joda.time.DurationFieldType durationFieldType7 = minutes3.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Duration duration12 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes2);
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy(3);
        org.joda.time.Duration duration16 = minutes13.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(duration16);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT-2M");
        int int2 = minutes1.size();
        org.joda.time.Days days3 = minutes1.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType5 = minutes1.getFieldType((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(days3);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        org.joda.time.PeriodType periodType9 = minutes3.getPeriodType();
        org.joda.time.Minutes minutes11 = minutes3.dividedBy(3);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy(10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod15 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes18 = minutes16.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes20 = minutes16.plus(0);
        int int21 = minutes14.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes16);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes24 = minutes22.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes26 = minutes22.plus(0);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes29 = minutes27.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType31 = null;
        int int32 = minutes30.get(durationFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = minutes30.getFieldType();
        int int34 = minutes29.get(durationFieldType33);
        org.joda.time.Minutes minutes36 = minutes29.plus((-1));
        org.joda.time.Minutes minutes38 = minutes29.minus((int) (short) 10);
        org.joda.time.Minutes minutes40 = minutes38.dividedBy((-2147483648));
        org.joda.time.Minutes minutes41 = minutes26.plus(minutes40);
        org.joda.time.Minutes minutes42 = minutes16.minus(minutes26);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod44 = minutes43.toMutablePeriod();
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes46 = minutes43.plus(minutes45);
        org.joda.time.Minutes minutes47 = minutes42.plus(minutes45);
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes50 = minutes48.multipliedBy((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes48.toMutablePeriod();
        org.joda.time.Minutes minutes52 = minutes45.minus(minutes48);
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes55 = minutes53.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType57 = null;
        int int58 = minutes56.get(durationFieldType57);
        org.joda.time.DurationFieldType durationFieldType59 = minutes56.getFieldType();
        int int60 = minutes55.get(durationFieldType59);
        org.joda.time.Minutes minutes62 = minutes55.plus((-1));
        org.joda.time.Minutes minutes64 = minutes55.minus((int) (short) 10);
        org.joda.time.Minutes minutes66 = minutes64.dividedBy((-2147483648));
        org.joda.time.Minutes minutes67 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes64);
        java.lang.Class<?> wildcardClass68 = minutes64.getClass();
        boolean boolean69 = minutes45.equals((java.lang.Object) minutes64);
        boolean boolean70 = minutes13.equals((java.lang.Object) minutes45);
        org.joda.time.Minutes minutes71 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType72 = null;
        int int73 = minutes71.get(durationFieldType72);
        org.joda.time.DurationFieldType durationFieldType74 = minutes71.getFieldType();
        boolean boolean75 = minutes13.isSupported(durationFieldType74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType77 = minutes13.getFieldType(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2) + "'", int34 == (-2));
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-2) + "'", int60 == (-2));
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes37 = minutes2.dividedBy(2);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = minutes41.getFieldType();
        int int45 = minutes40.get(durationFieldType44);
        org.joda.time.Minutes minutes47 = minutes40.plus((-1));
        org.joda.time.Minutes minutes48 = minutes47.negated();
        org.joda.time.Minutes minutes49 = minutes37.plus(minutes48);
        org.joda.time.Minutes minutes51 = minutes48.multipliedBy((-22139006));
        org.joda.time.Minutes minutes53 = minutes48.plus((-12));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes53);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes37 = minutes2.dividedBy(2);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = minutes41.getFieldType();
        int int45 = minutes40.get(durationFieldType44);
        org.joda.time.Minutes minutes47 = minutes40.plus((-1));
        org.joda.time.Minutes minutes48 = minutes47.negated();
        org.joda.time.Minutes minutes49 = minutes37.plus(minutes48);
        org.joda.time.Minutes minutes51 = minutes37.minus((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType52 = minutes51.getFieldType();
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes55 = minutes53.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes57 = minutes53.plus(0);
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes60 = minutes58.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes61 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType62 = null;
        int int63 = minutes61.get(durationFieldType62);
        org.joda.time.DurationFieldType durationFieldType64 = minutes61.getFieldType();
        int int65 = minutes60.get(durationFieldType64);
        org.joda.time.Minutes minutes67 = minutes60.plus((-1));
        org.joda.time.Minutes minutes69 = minutes60.minus((int) (short) 10);
        org.joda.time.Minutes minutes71 = minutes69.dividedBy((-2147483648));
        org.joda.time.Minutes minutes72 = minutes57.plus(minutes71);
        org.joda.time.Minutes minutes73 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes75 = minutes73.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes76 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType77 = null;
        int int78 = minutes76.get(durationFieldType77);
        org.joda.time.MutablePeriod mutablePeriod79 = minutes76.toMutablePeriod();
        org.joda.time.Minutes minutes80 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes76);
        boolean boolean81 = minutes75.isLessThan(minutes80);
        org.joda.time.DurationFieldType durationFieldType82 = minutes80.getFieldType();
        boolean boolean83 = minutes72.isSupported(durationFieldType82);
        org.joda.time.Minutes minutes84 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes86 = minutes84.multipliedBy((int) (short) -1);
        org.joda.time.Period period87 = minutes86.toPeriod();
        org.joda.time.Minutes minutes88 = minutes72.plus(minutes86);
        boolean boolean89 = minutes51.equals((java.lang.Object) minutes72);
        org.joda.time.Minutes minutes91 = minutes72.multipliedBy((-4));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-2) + "'", int65 == (-2));
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(minutes73);
        org.junit.Assert.assertNotNull(minutes75);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(minutes80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(minutes91);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = minutes1.negated();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration5 = minutes4.toStandardDuration();
        org.joda.time.Duration duration6 = minutes4.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes4.minus(2);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        int int10 = minutes9.getMinutes();
        org.joda.time.PeriodType periodType11 = minutes9.getPeriodType();
        org.joda.time.Minutes minutes12 = null;
        org.joda.time.Minutes minutes13 = minutes9.plus(minutes12);
        boolean boolean14 = minutes4.isLessThan(minutes13);
        boolean boolean15 = minutes1.equals((java.lang.Object) boolean14);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2147483648) + "'", int10 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean12 = minutes2.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Duration duration15 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes13.minus(2);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = minutes18.negated();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = minutes22.negated();
        boolean boolean25 = minutes18.equals((java.lang.Object) minutes24);
        boolean boolean26 = minutes17.isLessThan(minutes18);
        org.joda.time.Minutes minutes27 = minutes11.minus(minutes18);
        org.joda.time.Minutes minutes29 = minutes11.dividedBy((-12));
        int int30 = minutes29.size();
        org.joda.time.Duration duration31 = minutes29.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(duration31);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy(0);
        org.joda.time.Period period5 = minutes2.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes7 = minutes2.multipliedBy((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483646 * 10");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        org.joda.time.Period period10 = minutes2.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod11 = minutes2.toMutablePeriod();
        org.joda.time.Period period12 = minutes2.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod13 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes15 = minutes2.plus((int) '4');
        int int16 = minutes15.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes9);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes14 = minutes12.minus((int) (short) 0);
        boolean boolean15 = minutes9.isLessThan(minutes14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds16 = minutes9.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy((int) 'a');
        org.joda.time.Minutes minutes4 = minutes0.plus((int) (short) 1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.PeriodType periodType7 = minutes6.getPeriodType();
        org.joda.time.Minutes minutes8 = minutes6.negated();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes10.plus(0);
        org.joda.time.DurationFieldType durationFieldType13 = minutes12.getFieldType();
        int int14 = minutes8.get(durationFieldType13);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes17 = minutes15.minus((int) (short) 1);
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy(0);
        org.joda.time.Duration duration20 = minutes17.toStandardDuration();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes22 = minutes21.negated();
        org.joda.time.DurationFieldType durationFieldType23 = minutes21.getFieldType();
        int int24 = minutes17.get(durationFieldType23);
        boolean boolean25 = minutes8.isSupported(durationFieldType23);
        int int26 = minutes0.get(durationFieldType23);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes28 = minutes27.negated();
        org.joda.time.PeriodType periodType29 = minutes28.getPeriodType();
        org.joda.time.Minutes minutes30 = minutes28.negated();
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes34 = minutes32.plus(0);
        org.joda.time.DurationFieldType durationFieldType35 = minutes34.getFieldType();
        int int36 = minutes30.get(durationFieldType35);
        org.joda.time.Minutes minutes38 = minutes30.dividedBy((int) ' ');
        org.joda.time.Minutes minutes39 = minutes0.plus(minutes30);
        org.joda.time.Minutes minutes41 = minutes0.dividedBy(1);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483646 + "'", int24 == 2147483646);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-2147483648) + "'", int26 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes3.plus(2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2 + 2147483646");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        org.joda.time.Minutes minutes14 = minutes7.plus((-1));
        org.joda.time.Minutes minutes16 = minutes7.minus((int) (short) 10);
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((-2147483648));
        org.joda.time.Minutes minutes19 = minutes4.plus(minutes18);
        org.joda.time.Period period20 = minutes18.toPeriod();
        org.joda.time.Period period21 = minutes18.toPeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes4 = minutes2.dividedBy((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = minutes2.getFieldType((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((-12));
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes2.minus((int) (short) 1);
        org.joda.time.Minutes minutes6 = minutes4.multipliedBy(0);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes9 = minutes7.dividedBy((int) 'a');
        org.joda.time.Minutes minutes11 = minutes7.plus((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType12 = minutes11.getFieldType();
        boolean boolean13 = minutes4.isSupported(durationFieldType12);
        boolean boolean14 = minutes1.isSupported(durationFieldType12);
        org.joda.time.DurationFieldType durationFieldType15 = minutes1.getFieldType();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationFieldType15);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = minutes5.getFieldType();
        int int9 = minutes4.get(durationFieldType8);
        org.joda.time.Minutes minutes11 = minutes4.plus((-1));
        org.joda.time.Minutes minutes13 = minutes4.minus((int) (short) 10);
        org.joda.time.Minutes minutes15 = minutes13.dividedBy((-2147483648));
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes18 = minutes17.negated();
        org.joda.time.Minutes minutes19 = minutes17.negated();
        org.joda.time.Minutes minutes20 = minutes15.minus(minutes19);
        org.joda.time.Minutes minutes22 = minutes19.plus((int) 'a');
        boolean boolean23 = minutes0.isLessThan(minutes22);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes26 = minutes24.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = minutes27.get(durationFieldType28);
        org.joda.time.MutablePeriod mutablePeriod30 = minutes27.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes27);
        boolean boolean32 = minutes26.isLessThan(minutes31);
        int int33 = minutes26.getMinutes();
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean36 = minutes26.isLessThan(minutes35);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration38 = minutes37.toStandardDuration();
        org.joda.time.Duration duration39 = minutes37.toStandardDuration();
        org.joda.time.Minutes minutes41 = minutes37.minus(2);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes44 = minutes42.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes45 = minutes42.negated();
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes47 = minutes46.negated();
        org.joda.time.Minutes minutes48 = minutes46.negated();
        boolean boolean49 = minutes42.equals((java.lang.Object) minutes48);
        boolean boolean50 = minutes41.isLessThan(minutes42);
        org.joda.time.Minutes minutes51 = minutes35.minus(minutes42);
        org.joda.time.Minutes minutes52 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes53 = minutes52.negated();
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes52);
        java.lang.String str55 = minutes52.toString();
        org.joda.time.Minutes minutes56 = minutes51.plus(minutes52);
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.minutes((int) (short) -1);
        int int59 = minutes58.size();
        boolean boolean60 = minutes56.isGreaterThan(minutes58);
        int int61 = minutes22.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes58);
        int int62 = minutes22.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-2) + "'", int33 == (-2));
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT2147483647M" + "'", str55, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT2M");
        org.joda.time.Duration duration2 = minutes1.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod3 = minutes1.toMutablePeriod();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean6 = minutes0.isGreaterThan(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes8 = minutes7.negated();
        org.joda.time.Minutes minutes10 = minutes8.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = minutes15.getFieldType();
        int int19 = minutes14.get(durationFieldType18);
        int int20 = minutes11.get(durationFieldType18);
        org.joda.time.PeriodType periodType21 = minutes11.getPeriodType();
        int int22 = minutes11.getMinutes();
        boolean boolean23 = minutes0.isLessThan(minutes11);
        int int24 = minutes11.getMinutes();
        org.joda.time.Period period25 = minutes11.toPeriod();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes11);
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes29 = minutes26.minus((-2147483548));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2147483548");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) ' ');
        java.lang.String str21 = minutes13.toString();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean24 = minutes13.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = minutes2.minus(minutes13);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes27 = minutes26.negated();
        org.joda.time.DurationFieldType durationFieldType28 = minutes26.getFieldType();
        org.joda.time.DurationFieldType durationFieldType29 = minutes26.getFieldType();
        boolean boolean30 = minutes2.isSupported(durationFieldType29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = minutes31.get(durationFieldType32);
        org.joda.time.MutablePeriod mutablePeriod34 = minutes31.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType35 = minutes31.getFieldType();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration37 = minutes36.toStandardDuration();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes36);
        boolean boolean39 = minutes31.isGreaterThan(minutes36);
        org.joda.time.Minutes minutes40 = minutes2.plus(minutes36);
        org.joda.time.DurationFieldType durationFieldType42 = minutes2.getFieldType(0);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.THREE;
        int int44 = minutes43.size();
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod46 = minutes45.toMutablePeriod();
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes49 = minutes47.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes51 = minutes47.plus(0);
        int int52 = minutes45.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes47);
        org.joda.time.Minutes minutes54 = minutes47.plus((int) ' ');
        int int55 = minutes43.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes54);
        org.joda.time.MutablePeriod mutablePeriod56 = minutes54.toMutablePeriod();
        int int58 = minutes54.getValue(0);
        boolean boolean59 = minutes2.equals((java.lang.Object) int58);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2M" + "'", str21, "PT2M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 34 + "'", int58 == 34);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType3 = minutes2.getFieldType();
        org.joda.time.Minutes minutes4 = minutes2.negated();
        org.joda.time.PeriodType periodType5 = minutes4.getPeriodType();
        java.lang.Class<?> wildcardClass6 = periodType5.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes6 = minutes4.dividedBy((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int8 = minutes6.getValue((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483648");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        org.joda.time.Minutes minutes14 = minutes7.plus((-1));
        org.joda.time.Minutes minutes16 = minutes7.minus((int) (short) 10);
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((-2147483648));
        org.joda.time.Minutes minutes19 = minutes4.plus(minutes18);
        org.joda.time.Period period20 = minutes19.toPeriod();
        org.joda.time.Minutes minutes22 = minutes19.plus((-2147483645));
        int int23 = minutes19.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.MutablePeriod mutablePeriod11 = minutes8.toMutablePeriod();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes8);
        boolean boolean13 = minutes7.isLessThan(minutes12);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes16 = minutes14.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType18 = null;
        int int19 = minutes17.get(durationFieldType18);
        org.joda.time.DurationFieldType durationFieldType20 = minutes17.getFieldType();
        int int21 = minutes16.get(durationFieldType20);
        org.joda.time.Minutes minutes23 = minutes16.plus((-1));
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod25 = minutes24.toMutablePeriod();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes28 = minutes26.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes30 = minutes26.plus(0);
        int int31 = minutes24.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes26);
        org.joda.time.Minutes minutes33 = minutes26.plus((int) ' ');
        java.lang.String str34 = minutes26.toString();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean37 = minutes26.isLessThan(minutes36);
        boolean boolean38 = minutes23.isLessThan(minutes26);
        org.joda.time.Minutes minutes39 = minutes7.minus(minutes23);
        org.joda.time.MutablePeriod mutablePeriod40 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes42 = minutes7.dividedBy(2);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes45 = minutes43.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = minutes46.get(durationFieldType47);
        org.joda.time.DurationFieldType durationFieldType49 = minutes46.getFieldType();
        int int50 = minutes45.get(durationFieldType49);
        org.joda.time.Minutes minutes52 = minutes45.plus((-1));
        org.joda.time.Minutes minutes53 = minutes52.negated();
        org.joda.time.Minutes minutes54 = minutes42.plus(minutes53);
        org.joda.time.Minutes minutes56 = minutes53.multipliedBy((-22139006));
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.minutes((int) ' ');
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes60 = minutes59.negated();
        org.joda.time.PeriodType periodType61 = minutes60.getPeriodType();
        org.joda.time.Minutes minutes62 = minutes60.negated();
        org.joda.time.Minutes minutes64 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes66 = minutes64.plus(0);
        org.joda.time.DurationFieldType durationFieldType67 = minutes66.getFieldType();
        int int68 = minutes62.get(durationFieldType67);
        boolean boolean69 = minutes58.isSupported(durationFieldType67);
        boolean boolean70 = minutes56.isSupported(durationFieldType67);
        boolean boolean71 = minutes0.isSupported(durationFieldType67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds72 = minutes0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-2) + "'", int21 == (-2));
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT2M" + "'", str34, "PT2M");
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2) + "'", int50 == (-2));
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes4.getFieldType();
        int int8 = minutes3.get(durationFieldType7);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        boolean boolean11 = minutes0.isGreaterThan(minutes3);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = minutes15.getFieldType();
        int int19 = minutes14.get(durationFieldType18);
        boolean boolean20 = minutes3.isSupported(durationFieldType18);
        org.joda.time.Minutes minutes22 = minutes3.dividedBy(100);
        int int23 = minutes22.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType25 = minutes22.getFieldType(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2147483647");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-2) + "'", int8 == (-2));
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod11 = minutes10.toMutablePeriod();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = minutes12.plus(0);
        int int17 = minutes10.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes12);
        org.joda.time.Duration duration18 = minutes10.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes19 = minutes9.minus(minutes10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(duration18);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (short) -1);
        int int2 = minutes1.size();
        int int3 = minutes1.getMinutes();
        org.joda.time.DurationFieldType durationFieldType4 = minutes1.getFieldType();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType4);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = minutes15.getFieldType();
        int int19 = minutes14.get(durationFieldType18);
        org.joda.time.Minutes minutes21 = minutes14.plus((-1));
        boolean boolean22 = minutes11.isGreaterThan(minutes14);
        org.joda.time.Minutes minutes24 = minutes14.multipliedBy(2);
        org.joda.time.Minutes minutes25 = minutes24.negated();
        org.joda.time.Minutes minutes26 = minutes25.negated();
        boolean boolean27 = minutes0.isLessThan(minutes25);
        org.joda.time.Minutes minutes29 = minutes25.dividedBy((int) (short) 1);
        org.joda.time.Duration duration30 = minutes25.toStandardDuration();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod32 = minutes31.toMutablePeriod();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes35 = minutes33.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes37 = minutes33.plus(0);
        int int38 = minutes31.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes33);
        org.joda.time.Minutes minutes40 = minutes33.plus((int) ' ');
        java.lang.String str41 = minutes33.toString();
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod43 = minutes42.toMutablePeriod();
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes46 = minutes44.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes48 = minutes44.plus(0);
        int int49 = minutes42.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes44);
        org.joda.time.Minutes minutes51 = minutes44.plus((int) ' ');
        java.lang.String str52 = minutes44.toString();
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean55 = minutes44.isLessThan(minutes54);
        org.joda.time.Minutes minutes56 = minutes33.minus(minutes44);
        java.lang.String str57 = minutes44.toString();
        org.joda.time.Minutes minutes58 = minutes25.plus(minutes44);
        org.joda.time.Minutes minutes60 = minutes58.plus(0);
        int int61 = minutes60.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT2M" + "'", str41, "PT2M");
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT2M" + "'", str52, "PT2M");
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT2M" + "'", str57, "PT2M");
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        org.joda.time.Period period10 = minutes2.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod11 = minutes2.toMutablePeriod();
        org.joda.time.Period period12 = minutes2.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType14 = minutes2.getFieldType((-12));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -12");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod2 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        int int4 = minutes3.size();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy((int) (byte) -1);
        boolean boolean9 = minutes3.isLessThan(minutes6);
        boolean boolean10 = minutes0.isLessThan(minutes3);
        org.joda.time.Minutes minutes12 = minutes0.multipliedBy((int) (short) -1);
        int int13 = minutes12.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) ' ');
        java.lang.String str21 = minutes13.toString();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean24 = minutes13.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = minutes2.minus(minutes13);
        int int26 = minutes25.size();
        org.joda.time.Minutes minutes28 = minutes25.multipliedBy(0);
        org.joda.time.Duration duration29 = minutes25.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2M" + "'", str21, "PT2M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(duration29);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes5 = minutes0.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (byte) 0);
        boolean boolean10 = minutes5.equals((java.lang.Object) minutes7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = minutes5.getFieldType((-22139006));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -22139006");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes8.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        org.joda.time.Minutes minutes22 = minutes15.plus((-1));
        org.joda.time.Minutes minutes24 = minutes15.minus((int) (short) 10);
        org.joda.time.Minutes minutes26 = minutes24.dividedBy((-2147483648));
        org.joda.time.Minutes minutes27 = minutes12.plus(minutes26);
        org.joda.time.Minutes minutes28 = minutes2.minus(minutes12);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes35 = minutes31.plus(0);
        int int36 = minutes29.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes31);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes39 = minutes37.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = minutes37.plus(0);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes44 = minutes42.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType46 = null;
        int int47 = minutes45.get(durationFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = minutes45.getFieldType();
        int int49 = minutes44.get(durationFieldType48);
        org.joda.time.Minutes minutes51 = minutes44.plus((-1));
        org.joda.time.Minutes minutes53 = minutes44.minus((int) (short) 10);
        org.joda.time.Minutes minutes55 = minutes53.dividedBy((-2147483648));
        org.joda.time.Minutes minutes56 = minutes41.plus(minutes55);
        org.joda.time.Minutes minutes57 = minutes31.minus(minutes41);
        org.joda.time.PeriodType periodType58 = minutes31.getPeriodType();
        boolean boolean59 = minutes12.isLessThan(minutes31);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType61 = minutes60.getPeriodType();
        org.joda.time.Minutes minutes62 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes63 = minutes62.negated();
        org.joda.time.Minutes minutes64 = minutes62.negated();
        org.joda.time.DurationFieldType durationFieldType65 = minutes62.getFieldType();
        java.lang.String str66 = minutes62.toString();
        boolean boolean67 = minutes60.isGreaterThan(minutes62);
        boolean boolean68 = minutes31.isLessThan(minutes60);
        int int69 = minutes60.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-2) + "'", int49 == (-2));
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT2147483647M" + "'", str66, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.PeriodType periodType5 = minutes0.getPeriodType();
        boolean boolean7 = minutes0.equals((java.lang.Object) 2);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        java.lang.String str9 = minutes3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes11.negated();
        org.joda.time.Minutes minutes13 = minutes11.negated();
        org.joda.time.DurationFieldType durationFieldType14 = minutes11.getFieldType();
        java.lang.String str15 = minutes11.toString();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes17 = minutes16.negated();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes16);
        int int19 = minutes16.size();
        org.joda.time.MutablePeriod mutablePeriod20 = minutes16.toMutablePeriod();
        boolean boolean21 = minutes11.equals((java.lang.Object) minutes16);
        org.joda.time.DurationFieldType durationFieldType23 = minutes16.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod25 = minutes24.toMutablePeriod();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes28 = minutes26.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes30 = minutes26.plus(0);
        int int31 = minutes24.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes26);
        org.joda.time.Minutes minutes33 = minutes26.plus((int) ' ');
        java.lang.String str34 = minutes26.toString();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean37 = minutes26.isLessThan(minutes36);
        org.joda.time.Period period38 = minutes36.toPeriod();
        boolean boolean39 = minutes16.isGreaterThan(minutes36);
        boolean boolean40 = minutes3.isLessThan(minutes16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds41 = minutes16.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT-2147483645M" + "'", str9, "PT-2147483645M");
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT2147483647M" + "'", str15, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT2M" + "'", str34, "PT2M");
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod2 = minutes1.toMutablePeriod();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = minutes3.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes7 = minutes3.plus(0);
        int int8 = minutes1.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes3);
        org.joda.time.Minutes minutes10 = minutes3.plus((int) ' ');
        java.lang.String str11 = minutes3.toString();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod13 = minutes12.toMutablePeriod();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes16 = minutes14.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes18 = minutes14.plus(0);
        int int19 = minutes12.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes14);
        org.joda.time.Minutes minutes21 = minutes14.plus((int) ' ');
        java.lang.String str22 = minutes14.toString();
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean25 = minutes14.isLessThan(minutes24);
        org.joda.time.Minutes minutes26 = minutes3.minus(minutes14);
        int int27 = minutes26.size();
        org.joda.time.Minutes minutes29 = minutes26.multipliedBy(0);
        boolean boolean30 = minutes0.equals((java.lang.Object) minutes26);
        org.joda.time.Minutes minutes32 = minutes0.minus(4);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT2M" + "'", str11, "PT2M");
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT2M" + "'", str22, "PT2M");
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(minutes32);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        org.joda.time.Period period10 = minutes2.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod11 = minutes2.toMutablePeriod();
        org.joda.time.Period period12 = minutes2.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod13 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes16 = minutes14.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes18 = minutes14.plus(0);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType23 = null;
        int int24 = minutes22.get(durationFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = minutes22.getFieldType();
        int int26 = minutes21.get(durationFieldType25);
        org.joda.time.Minutes minutes28 = minutes21.plus((-1));
        org.joda.time.Minutes minutes30 = minutes21.minus((int) (short) 10);
        org.joda.time.Minutes minutes32 = minutes30.dividedBy((-2147483648));
        org.joda.time.Minutes minutes33 = minutes18.plus(minutes32);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes36 = minutes34.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType38 = null;
        int int39 = minutes37.get(durationFieldType38);
        org.joda.time.MutablePeriod mutablePeriod40 = minutes37.toMutablePeriod();
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes37);
        boolean boolean42 = minutes36.isLessThan(minutes41);
        org.joda.time.DurationFieldType durationFieldType43 = minutes41.getFieldType();
        boolean boolean44 = minutes33.isSupported(durationFieldType43);
        boolean boolean45 = minutes2.isSupported(durationFieldType43);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-2) + "'", int26 == (-2));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) ' ');
        java.lang.String str21 = minutes13.toString();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean24 = minutes13.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = minutes2.minus(minutes13);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes27 = minutes26.negated();
        org.joda.time.DurationFieldType durationFieldType28 = minutes26.getFieldType();
        org.joda.time.DurationFieldType durationFieldType29 = minutes26.getFieldType();
        boolean boolean30 = minutes2.isSupported(durationFieldType29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = minutes31.get(durationFieldType32);
        org.joda.time.MutablePeriod mutablePeriod34 = minutes31.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType35 = minutes31.getFieldType();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration37 = minutes36.toStandardDuration();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes36);
        boolean boolean39 = minutes31.isGreaterThan(minutes36);
        org.joda.time.Minutes minutes40 = minutes2.plus(minutes36);
        org.joda.time.DurationFieldType durationFieldType42 = minutes2.getFieldType(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType44 = minutes2.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2M" + "'", str21, "PT2M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(durationFieldType42);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes5);
        int int8 = minutes5.size();
        org.joda.time.MutablePeriod mutablePeriod9 = minutes5.toMutablePeriod();
        boolean boolean10 = minutes0.equals((java.lang.Object) minutes5);
        org.joda.time.DurationFieldType durationFieldType12 = minutes5.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod14 = minutes13.toMutablePeriod();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes17 = minutes15.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes19 = minutes15.plus(0);
        int int20 = minutes13.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes15);
        org.joda.time.Minutes minutes22 = minutes15.plus((int) ' ');
        java.lang.String str23 = minutes15.toString();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean26 = minutes15.isLessThan(minutes25);
        org.joda.time.Period period27 = minutes25.toPeriod();
        boolean boolean28 = minutes5.isGreaterThan(minutes25);
        org.joda.time.Period period29 = minutes5.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = minutes5.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT2M" + "'", str23, "PT2M");
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes8.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        org.joda.time.Minutes minutes22 = minutes15.plus((-1));
        org.joda.time.Minutes minutes24 = minutes15.minus((int) (short) 10);
        org.joda.time.Minutes minutes26 = minutes24.dividedBy((-2147483648));
        org.joda.time.Minutes minutes27 = minutes12.plus(minutes26);
        org.joda.time.Minutes minutes28 = minutes2.minus(minutes12);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes32 = minutes29.plus(minutes31);
        org.joda.time.Minutes minutes33 = minutes28.plus(minutes31);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes36 = minutes34.multipliedBy((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod37 = minutes34.toMutablePeriod();
        org.joda.time.Minutes minutes38 = minutes31.minus(minutes34);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes41 = minutes39.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType43 = null;
        int int44 = minutes42.get(durationFieldType43);
        org.joda.time.MutablePeriod mutablePeriod45 = minutes42.toMutablePeriod();
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes42);
        boolean boolean47 = minutes41.isLessThan(minutes46);
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes50 = minutes48.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType52 = null;
        int int53 = minutes51.get(durationFieldType52);
        org.joda.time.DurationFieldType durationFieldType54 = minutes51.getFieldType();
        int int55 = minutes50.get(durationFieldType54);
        org.joda.time.Minutes minutes57 = minutes50.plus((-1));
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod59 = minutes58.toMutablePeriod();
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes62 = minutes60.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes64 = minutes60.plus(0);
        int int65 = minutes58.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes60);
        org.joda.time.Minutes minutes67 = minutes60.plus((int) ' ');
        java.lang.String str68 = minutes60.toString();
        org.joda.time.Minutes minutes70 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean71 = minutes60.isLessThan(minutes70);
        boolean boolean72 = minutes57.isLessThan(minutes60);
        org.joda.time.Minutes minutes73 = minutes41.minus(minutes57);
        org.joda.time.MutablePeriod mutablePeriod74 = minutes41.toMutablePeriod();
        org.joda.time.Minutes minutes76 = minutes41.dividedBy(2);
        org.joda.time.Minutes minutes77 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes79 = minutes77.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes80 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType81 = null;
        int int82 = minutes80.get(durationFieldType81);
        org.joda.time.DurationFieldType durationFieldType83 = minutes80.getFieldType();
        int int84 = minutes79.get(durationFieldType83);
        org.joda.time.Minutes minutes86 = minutes79.plus((-1));
        org.joda.time.Minutes minutes87 = minutes86.negated();
        org.joda.time.Minutes minutes88 = minutes76.plus(minutes87);
        boolean boolean89 = minutes31.isLessThan(minutes76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType91 = minutes76.getFieldType(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-2) + "'", int55 == (-2));
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PT2M" + "'", str68, "PT2M");
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(minutes73);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertNotNull(minutes77);
        org.junit.Assert.assertNotNull(minutes79);
        org.junit.Assert.assertNotNull(minutes80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-2) + "'", int84 == (-2));
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(minutes87);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 0);
        org.joda.time.Period period3 = minutes0.toPeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        int int6 = minutes5.getMinutes();
        org.joda.time.PeriodType periodType7 = minutes5.getPeriodType();
        java.lang.String str8 = minutes5.toString();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes9.negated();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes14 = minutes11.plus(minutes13);
        int int15 = minutes10.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        int int16 = minutes5.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        boolean boolean17 = minutes4.isGreaterThan(minutes5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes19 = minutes4.plus((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2147483648");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-2147483648) + "'", int6 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT-2147483648M" + "'", str8, "PT-2147483648M");
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType2 = minutes0.getFieldType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        boolean boolean7 = minutes0.isSupported(durationFieldType6);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = minutes0.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (short) -1);
        int int2 = minutes1.size();
        int int3 = minutes1.getMinutes();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod9 = minutes8.toMutablePeriod();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes11 = minutes8.plus(minutes10);
        boolean boolean12 = minutes7.isLessThan(minutes8);
        java.lang.String str13 = minutes7.toString();
        boolean boolean14 = minutes1.equals((java.lang.Object) minutes7);
        org.joda.time.Duration duration15 = minutes1.toStandardDuration();
        org.joda.time.PeriodType periodType16 = minutes1.getPeriodType();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT-2147483645M" + "'", str13, "PT-2147483645M");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes8.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        org.joda.time.Minutes minutes22 = minutes15.plus((-1));
        org.joda.time.Minutes minutes24 = minutes15.minus((int) (short) 10);
        org.joda.time.Minutes minutes26 = minutes24.dividedBy((-2147483648));
        org.joda.time.Minutes minutes27 = minutes12.plus(minutes26);
        org.joda.time.Minutes minutes28 = minutes2.minus(minutes12);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes32 = minutes29.plus(minutes31);
        org.joda.time.Minutes minutes33 = minutes28.plus(minutes31);
        org.joda.time.Minutes minutes35 = minutes33.multipliedBy((int) '4');
        java.lang.Class<?> wildcardClass36 = minutes33.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes37 = minutes2.dividedBy(2);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = minutes41.getFieldType();
        int int45 = minutes40.get(durationFieldType44);
        org.joda.time.Minutes minutes47 = minutes40.plus((-1));
        org.joda.time.Minutes minutes48 = minutes47.negated();
        org.joda.time.Minutes minutes49 = minutes37.plus(minutes48);
        org.joda.time.Minutes minutes51 = minutes37.dividedBy((-2147483647));
        // The following exception was thrown during execution in test generation
        try {
            int int53 = minutes37.getValue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes37 = minutes2.dividedBy(2);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = minutes41.getFieldType();
        int int45 = minutes40.get(durationFieldType44);
        org.joda.time.Minutes minutes47 = minutes40.plus((-1));
        org.joda.time.Minutes minutes48 = minutes47.negated();
        org.joda.time.Minutes minutes49 = minutes37.plus(minutes48);
        org.joda.time.Minutes minutes51 = minutes49.multipliedBy((-12));
        // The following exception was thrown during execution in test generation
        try {
            int int53 = minutes51.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod9 = minutes8.toMutablePeriod();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes11 = minutes8.plus(minutes10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod13 = minutes12.toMutablePeriod();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes15 = minutes12.plus(minutes14);
        boolean boolean16 = minutes11.isLessThan(minutes12);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes20 = minutes18.plus(0);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MAX_VALUE;
        int int22 = minutes21.size();
        int int24 = minutes21.getValue(0);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes21);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes28 = minutes26.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = minutes29.get(durationFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = minutes29.getFieldType();
        int int33 = minutes28.get(durationFieldType32);
        org.joda.time.Minutes minutes35 = minutes28.plus((-1));
        org.joda.time.Minutes minutes37 = minutes28.minus((int) (short) 10);
        org.joda.time.Duration duration38 = minutes28.toStandardDuration();
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes40 = minutes39.negated();
        org.joda.time.Minutes minutes41 = minutes39.negated();
        java.lang.String str42 = minutes39.toString();
        org.joda.time.Minutes minutes44 = minutes39.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes48 = minutes46.multipliedBy((int) (byte) 0);
        boolean boolean49 = minutes44.equals((java.lang.Object) minutes46);
        boolean boolean50 = minutes28.isGreaterThan(minutes46);
        boolean boolean51 = minutes25.equals((java.lang.Object) boolean50);
        org.joda.time.Minutes minutes52 = minutes25.negated();
        int int53 = minutes20.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes52);
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes56 = minutes54.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType58 = null;
        int int59 = minutes57.get(durationFieldType58);
        org.joda.time.DurationFieldType durationFieldType60 = minutes57.getFieldType();
        int int61 = minutes56.get(durationFieldType60);
        org.joda.time.Minutes minutes63 = minutes56.plus((-1));
        org.joda.time.Minutes minutes65 = minutes56.minus((int) (short) 10);
        org.joda.time.Minutes minutes67 = minutes65.dividedBy((-2147483648));
        org.joda.time.DurationFieldType durationFieldType68 = minutes65.getFieldType();
        int int69 = minutes20.get(durationFieldType68);
        int int70 = minutes0.get(durationFieldType68);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-2) + "'", int33 == (-2));
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT2147483647M" + "'", str42, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-2) + "'", int61 == (-2));
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-2147483646) + "'", int69 == (-2147483646));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-2147483648) + "'", int70 == (-2147483648));
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = minutes1.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes7 = minutes5.plus(0);
        org.joda.time.DurationFieldType durationFieldType8 = minutes7.getFieldType();
        int int9 = minutes3.get(durationFieldType8);
        int int11 = minutes3.getValue((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = minutes3.getValue(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = minutes15.getFieldType();
        int int19 = minutes14.get(durationFieldType18);
        org.joda.time.Minutes minutes21 = minutes14.plus((-1));
        boolean boolean22 = minutes11.isGreaterThan(minutes14);
        org.joda.time.Minutes minutes24 = minutes14.multipliedBy(2);
        org.joda.time.Minutes minutes25 = minutes24.negated();
        org.joda.time.Minutes minutes26 = minutes25.negated();
        boolean boolean27 = minutes0.isLessThan(minutes25);
        org.joda.time.Minutes minutes29 = minutes25.dividedBy((int) (short) 1);
        org.joda.time.Duration duration30 = minutes25.toStandardDuration();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod32 = minutes31.toMutablePeriod();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes35 = minutes33.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes37 = minutes33.plus(0);
        int int38 = minutes31.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes33);
        org.joda.time.Minutes minutes40 = minutes33.plus((int) ' ');
        java.lang.String str41 = minutes33.toString();
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod43 = minutes42.toMutablePeriod();
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes46 = minutes44.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes48 = minutes44.plus(0);
        int int49 = minutes42.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes44);
        org.joda.time.Minutes minutes51 = minutes44.plus((int) ' ');
        java.lang.String str52 = minutes44.toString();
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean55 = minutes44.isLessThan(minutes54);
        org.joda.time.Minutes minutes56 = minutes33.minus(minutes44);
        java.lang.String str57 = minutes44.toString();
        org.joda.time.Minutes minutes58 = minutes25.plus(minutes44);
        java.lang.Class<?> wildcardClass59 = minutes58.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT2M" + "'", str41, "PT2M");
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT2M" + "'", str52, "PT2M");
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT2M" + "'", str57, "PT2M");
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = minutes6.plus(0);
        int int11 = minutes4.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes6);
        org.joda.time.Duration duration12 = minutes4.toStandardDuration();
        org.joda.time.Minutes minutes13 = minutes0.plus(minutes4);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = minutes14.minus((int) (short) 1);
        org.joda.time.Minutes minutes18 = minutes16.multipliedBy(0);
        org.joda.time.Minutes minutes20 = minutes18.plus((-2147483648));
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes22 = minutes21.negated();
        org.joda.time.Minutes minutes23 = minutes21.negated();
        boolean boolean24 = minutes20.isGreaterThan(minutes23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes25 = minutes4.plus(minutes20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2147483648");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod10 = minutes2.toMutablePeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(mutablePeriod10);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes4.getFieldType();
        int int8 = minutes3.get(durationFieldType7);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        boolean boolean11 = minutes0.isGreaterThan(minutes3);
        org.joda.time.DurationFieldType durationFieldType12 = minutes3.getFieldType();
        int int14 = minutes3.getValue((int) (short) 0);
        org.joda.time.Period period15 = minutes3.toPeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes17 = minutes16.negated();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod19 = minutes18.toMutablePeriod();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes21 = minutes18.plus(minutes20);
        int int22 = minutes17.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes20);
        org.joda.time.Minutes minutes23 = minutes3.minus(minutes17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType25 = minutes17.getFieldType(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2147483647");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-2) + "'", int8 == (-2));
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2) + "'", int14 == (-2));
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(minutes23);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes37 = minutes2.dividedBy(2);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = minutes41.getFieldType();
        int int45 = minutes40.get(durationFieldType44);
        org.joda.time.Minutes minutes47 = minutes40.plus((-1));
        org.joda.time.Minutes minutes48 = minutes47.negated();
        org.joda.time.Minutes minutes49 = minutes37.plus(minutes48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType51 = minutes37.getFieldType((-12));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -12");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 0);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        boolean boolean7 = minutes0.isSupported(durationFieldType6);
        java.lang.Class<?> wildcardClass8 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes4 = minutes1.minus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        int int6 = minutes5.size();
        int int8 = minutes5.getValue(0);
        org.joda.time.Minutes minutes9 = minutes5.negated();
        boolean boolean10 = minutes1.isGreaterThan(minutes9);
        int int11 = minutes9.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-2147483647) + "'", int11 == (-2147483647));
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean12 = minutes2.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Duration duration15 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes13.minus(2);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = minutes18.negated();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = minutes22.negated();
        boolean boolean25 = minutes18.equals((java.lang.Object) minutes24);
        boolean boolean26 = minutes17.isLessThan(minutes18);
        org.joda.time.Minutes minutes27 = minutes11.minus(minutes18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds28 = minutes27.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes11.negated();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes11);
        org.joda.time.Minutes minutes14 = minutes10.minus(minutes13);
        org.joda.time.Minutes minutes16 = minutes10.minus(34);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes18 = minutes17.negated();
        org.joda.time.Minutes minutes19 = minutes17.negated();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.MAX_VALUE;
        int int21 = minutes20.size();
        int int23 = minutes20.getValue(0);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes20);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes27 = minutes25.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType29 = null;
        int int30 = minutes28.get(durationFieldType29);
        org.joda.time.DurationFieldType durationFieldType31 = minutes28.getFieldType();
        int int32 = minutes27.get(durationFieldType31);
        org.joda.time.Minutes minutes34 = minutes27.plus((-1));
        org.joda.time.Minutes minutes36 = minutes27.minus((int) (short) 10);
        org.joda.time.Duration duration37 = minutes27.toStandardDuration();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes39 = minutes38.negated();
        org.joda.time.Minutes minutes40 = minutes38.negated();
        java.lang.String str41 = minutes38.toString();
        org.joda.time.Minutes minutes43 = minutes38.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes47 = minutes45.multipliedBy((int) (byte) 0);
        boolean boolean48 = minutes43.equals((java.lang.Object) minutes45);
        boolean boolean49 = minutes27.isGreaterThan(minutes45);
        boolean boolean50 = minutes24.equals((java.lang.Object) boolean49);
        org.joda.time.Minutes minutes51 = minutes17.minus(minutes24);
        org.joda.time.Minutes minutes52 = minutes16.minus(minutes51);
        org.joda.time.Duration duration53 = minutes51.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-2) + "'", int32 == (-2));
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT2147483647M" + "'", str41, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(duration53);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = minutes0.getFieldType();
        org.joda.time.Period period2 = minutes0.toPeriod();
        org.joda.time.Duration duration3 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        int int8 = minutes6.getMinutes();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = minutes13.get(durationFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = minutes13.getFieldType();
        int int17 = minutes12.get(durationFieldType16);
        org.joda.time.Minutes minutes19 = minutes12.plus((-1));
        boolean boolean20 = minutes9.isGreaterThan(minutes12);
        org.joda.time.DurationFieldType durationFieldType21 = minutes12.getFieldType();
        org.joda.time.PeriodType periodType22 = minutes12.getPeriodType();
        boolean boolean23 = minutes6.equals((java.lang.Object) minutes12);
        int int24 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes26 = minutes0.plus((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2));
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes4.getFieldType();
        int int8 = minutes3.get(durationFieldType7);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        boolean boolean11 = minutes0.isGreaterThan(minutes3);
        org.joda.time.Minutes minutes13 = minutes3.multipliedBy(2);
        org.joda.time.Minutes minutes14 = minutes13.negated();
        org.joda.time.Minutes minutes16 = minutes13.plus(2147483647);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes18 = minutes17.negated();
        org.joda.time.Minutes minutes20 = minutes18.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes23 = minutes21.dividedBy((int) 'a');
        org.joda.time.Minutes minutes25 = minutes21.plus((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType26 = minutes25.getFieldType();
        boolean boolean27 = minutes18.isSupported(durationFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = minutes18.getFieldType();
        int int29 = minutes13.get(durationFieldType28);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-2) + "'", int8 == (-2));
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-4) + "'", int29 == (-4));
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy(0);
        org.joda.time.Duration duration5 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        int int7 = minutes6.size();
        int int9 = minutes6.getValue(0);
        org.joda.time.Minutes minutes10 = minutes6.negated();
        org.joda.time.DurationFieldType durationFieldType12 = minutes6.getFieldType(0);
        boolean boolean13 = minutes2.equals((java.lang.Object) 0);
        java.lang.Class<?> wildcardClass14 = minutes2.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod15 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes17 = minutes14.plus(minutes16);
        org.joda.time.Minutes minutes18 = minutes11.minus(minutes16);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes23 = minutes19.plus(0);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes26 = minutes24.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = minutes27.get(durationFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = minutes27.getFieldType();
        int int31 = minutes26.get(durationFieldType30);
        org.joda.time.Minutes minutes33 = minutes26.plus((-1));
        org.joda.time.Minutes minutes35 = minutes26.minus((int) (short) 10);
        org.joda.time.Minutes minutes37 = minutes35.dividedBy((-2147483648));
        org.joda.time.Minutes minutes38 = minutes23.plus(minutes37);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes41 = minutes39.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType43 = null;
        int int44 = minutes42.get(durationFieldType43);
        org.joda.time.MutablePeriod mutablePeriod45 = minutes42.toMutablePeriod();
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes42);
        boolean boolean47 = minutes41.isLessThan(minutes46);
        org.joda.time.DurationFieldType durationFieldType48 = minutes46.getFieldType();
        boolean boolean49 = minutes38.isSupported(durationFieldType48);
        int int50 = minutes11.get(durationFieldType48);
        int int51 = minutes11.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-2) + "'", int31 == (-2));
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-12) + "'", int50 == (-12));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-12) + "'", int51 == (-12));
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        java.lang.String str3 = minutes2.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = minutes6.plus(0);
        int int11 = minutes4.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes6);
        org.joda.time.Minutes minutes13 = minutes6.plus((int) ' ');
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType15 = minutes14.getFieldType();
        int int16 = minutes6.get(durationFieldType15);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes20 = minutes17.negated();
        org.joda.time.Minutes minutes21 = minutes6.plus(minutes17);
        org.joda.time.DurationFieldType durationFieldType22 = minutes6.getFieldType();
        boolean boolean23 = minutes2.isSupported(durationFieldType22);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT-2M" + "'", str3, "PT-2M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.PeriodType periodType2 = minutes0.getPeriodType();
        java.lang.String str3 = minutes0.toString();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT-2147483648M" + "'", str3, "PT-2147483648M");
        org.junit.Assert.assertNotNull(durationFieldType4);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes8 = minutes2.negated();
        org.joda.time.Minutes minutes10 = minutes8.plus((-2));
        int int11 = minutes8.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes5);
        int int8 = minutes5.size();
        org.joda.time.MutablePeriod mutablePeriod9 = minutes5.toMutablePeriod();
        boolean boolean10 = minutes0.equals((java.lang.Object) minutes5);
        org.joda.time.DurationFieldType durationFieldType12 = minutes5.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod14 = minutes13.toMutablePeriod();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes17 = minutes15.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes19 = minutes15.plus(0);
        int int20 = minutes13.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes15);
        org.joda.time.Minutes minutes22 = minutes15.plus((int) ' ');
        java.lang.String str23 = minutes15.toString();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean26 = minutes15.isLessThan(minutes25);
        org.joda.time.Period period27 = minutes25.toPeriod();
        boolean boolean28 = minutes5.isGreaterThan(minutes25);
        org.joda.time.Period period29 = minutes5.toPeriod();
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes32 = minutes30.minus((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT2M" + "'", str23, "PT2M");
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(minutes30);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT-2147483550M");
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = minutes13.negated();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.Minutes minutes17 = minutes15.negated();
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        org.joda.time.Minutes minutes20 = minutes17.plus((int) 'a');
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes20);
        org.joda.time.Minutes minutes23 = minutes20.dividedBy((int) (byte) 1);
        java.lang.String str24 = minutes20.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = minutes20.getFieldType((-12));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -12");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT-2147483550M" + "'", str24, "PT-2147483550M");
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes5.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType9 = minutes5.getFieldType();
        int int10 = minutes0.get(durationFieldType9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        boolean boolean12 = minutes0.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = null;
        org.joda.time.Minutes minutes14 = minutes11.plus(minutes13);
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = minutes13.negated();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.Minutes minutes17 = minutes15.negated();
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds19 = minutes17.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        java.lang.String str3 = minutes0.toString();
        org.joda.time.PeriodType periodType4 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = minutes10.get(durationFieldType11);
        org.joda.time.MutablePeriod mutablePeriod13 = minutes10.toMutablePeriod();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes10);
        boolean boolean15 = minutes9.isLessThan(minutes14);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes18 = minutes16.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType20 = null;
        int int21 = minutes19.get(durationFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = minutes19.getFieldType();
        int int23 = minutes18.get(durationFieldType22);
        org.joda.time.Minutes minutes25 = minutes18.plus((-1));
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod27 = minutes26.toMutablePeriod();
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes30 = minutes28.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes32 = minutes28.plus(0);
        int int33 = minutes26.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes28);
        org.joda.time.Minutes minutes35 = minutes28.plus((int) ' ');
        java.lang.String str36 = minutes28.toString();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean39 = minutes28.isLessThan(minutes38);
        boolean boolean40 = minutes25.isLessThan(minutes28);
        org.joda.time.Minutes minutes41 = minutes9.minus(minutes25);
        org.joda.time.MutablePeriod mutablePeriod42 = minutes9.toMutablePeriod();
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod44 = minutes43.toMutablePeriod();
        boolean boolean45 = minutes9.isLessThan(minutes43);
        org.joda.time.Minutes minutes47 = minutes9.plus((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes48 = minutes6.minus(minutes9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-2) + "'", int23 == (-2));
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT2M" + "'", str36, "PT2M");
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(minutes47);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes6 = minutes4.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = minutes4.plus(0);
        int int9 = minutes2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes4);
        org.joda.time.Minutes minutes11 = minutes4.plus((int) ' ');
        java.lang.String str12 = minutes4.toString();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean15 = minutes4.isLessThan(minutes14);
        org.joda.time.MutablePeriod mutablePeriod16 = minutes4.toMutablePeriod();
        boolean boolean17 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes19 = minutes0.minus((int) (byte) 10);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT2M" + "'", str12, "PT2M");
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(minutes19);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        org.joda.time.Minutes minutes12 = minutes10.plus(0);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod16 = minutes15.toMutablePeriod();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = minutes17.plus(0);
        int int22 = minutes15.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes17);
        org.joda.time.Minutes minutes24 = minutes17.plus((int) ' ');
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType26 = minutes25.getFieldType();
        int int27 = minutes17.get(durationFieldType26);
        boolean boolean28 = minutes14.isSupported(durationFieldType26);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes32 = minutes29.plus(minutes31);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod34 = minutes33.toMutablePeriod();
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes36 = minutes33.plus(minutes35);
        boolean boolean37 = minutes32.isLessThan(minutes33);
        org.joda.time.PeriodType periodType38 = minutes32.getPeriodType();
        org.joda.time.Minutes minutes40 = minutes32.dividedBy(3);
        org.joda.time.Minutes minutes42 = minutes40.dividedBy(10);
        boolean boolean43 = minutes14.isGreaterThan(minutes42);
        boolean boolean44 = minutes10.equals((java.lang.Object) boolean43);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        org.joda.time.Minutes minutes8 = minutes0.dividedBy(2147483646);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = minutes0.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        org.joda.time.Minutes minutes14 = minutes7.plus((-1));
        org.joda.time.Minutes minutes16 = minutes7.minus((int) (short) 10);
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((-2147483648));
        org.joda.time.Minutes minutes19 = minutes4.plus(minutes18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType21 = minutes20.getPeriodType();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = minutes22.negated();
        org.joda.time.DurationFieldType durationFieldType25 = minutes22.getFieldType();
        java.lang.String str26 = minutes22.toString();
        boolean boolean27 = minutes20.isGreaterThan(minutes22);
        boolean boolean28 = minutes4.isLessThan(minutes22);
        int int29 = minutes4.getMinutes();
        org.joda.time.PeriodType periodType30 = minutes4.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT2147483647M" + "'", str26, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(periodType30);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes9);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes14 = minutes12.minus((int) (short) 0);
        boolean boolean15 = minutes9.isLessThan(minutes14);
        java.lang.String str16 = minutes14.toString();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes18 = minutes17.negated();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes22 = minutes19.plus(minutes21);
        int int23 = minutes18.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes25 = minutes24.negated();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes24);
        java.lang.String str27 = minutes24.toString();
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType29 = minutes28.getFieldType();
        boolean boolean30 = minutes24.isSupported(durationFieldType29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes24);
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes33 = minutes32.negated();
        org.joda.time.Minutes minutes35 = minutes33.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes38 = minutes36.dividedBy((int) 'a');
        org.joda.time.Minutes minutes40 = minutes36.plus((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType41 = minutes40.getFieldType();
        boolean boolean42 = minutes33.isSupported(durationFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = minutes33.getFieldType();
        boolean boolean44 = minutes24.isSupported(durationFieldType43);
        boolean boolean45 = minutes21.isSupported(durationFieldType43);
        int int46 = minutes14.get(durationFieldType43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType48 = minutes14.getFieldType((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483648");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT-2147483648M" + "'", str16, "PT-2147483648M");
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT2147483647M" + "'", str27, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-2147483648) + "'", int46 == (-2147483648));
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.PeriodType periodType2 = minutes0.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes4 = minutes0.multipliedBy((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 35");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        org.joda.time.PeriodType periodType9 = minutes3.getPeriodType();
        org.joda.time.Minutes minutes11 = minutes3.dividedBy(3);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy(10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod15 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes18 = minutes16.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes20 = minutes16.plus(0);
        int int21 = minutes14.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes16);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes24 = minutes22.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes26 = minutes22.plus(0);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes29 = minutes27.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType31 = null;
        int int32 = minutes30.get(durationFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = minutes30.getFieldType();
        int int34 = minutes29.get(durationFieldType33);
        org.joda.time.Minutes minutes36 = minutes29.plus((-1));
        org.joda.time.Minutes minutes38 = minutes29.minus((int) (short) 10);
        org.joda.time.Minutes minutes40 = minutes38.dividedBy((-2147483648));
        org.joda.time.Minutes minutes41 = minutes26.plus(minutes40);
        org.joda.time.Minutes minutes42 = minutes16.minus(minutes26);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod44 = minutes43.toMutablePeriod();
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes46 = minutes43.plus(minutes45);
        org.joda.time.Minutes minutes47 = minutes42.plus(minutes45);
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes50 = minutes48.multipliedBy((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes48.toMutablePeriod();
        org.joda.time.Minutes minutes52 = minutes45.minus(minutes48);
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes55 = minutes53.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType57 = null;
        int int58 = minutes56.get(durationFieldType57);
        org.joda.time.DurationFieldType durationFieldType59 = minutes56.getFieldType();
        int int60 = minutes55.get(durationFieldType59);
        org.joda.time.Minutes minutes62 = minutes55.plus((-1));
        org.joda.time.Minutes minutes64 = minutes55.minus((int) (short) 10);
        org.joda.time.Minutes minutes66 = minutes64.dividedBy((-2147483648));
        org.joda.time.Minutes minutes67 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes64);
        java.lang.Class<?> wildcardClass68 = minutes64.getClass();
        boolean boolean69 = minutes45.equals((java.lang.Object) minutes64);
        boolean boolean70 = minutes13.equals((java.lang.Object) minutes45);
        org.joda.time.Minutes minutes71 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes73 = minutes71.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes74 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType75 = null;
        int int76 = minutes74.get(durationFieldType75);
        org.joda.time.DurationFieldType durationFieldType77 = minutes74.getFieldType();
        int int78 = minutes73.get(durationFieldType77);
        org.joda.time.Minutes minutes80 = minutes73.plus((-1));
        org.joda.time.Minutes minutes82 = minutes73.minus((int) (short) 10);
        org.joda.time.Minutes minutes84 = minutes82.dividedBy((-2147483648));
        org.joda.time.Minutes minutes85 = minutes84.negated();
        org.joda.time.Minutes minutes86 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes87 = minutes86.negated();
        org.joda.time.Minutes minutes88 = minutes86.negated();
        org.joda.time.Minutes minutes89 = minutes84.minus(minutes88);
        org.joda.time.Minutes minutes91 = minutes88.plus((int) 'a');
        org.joda.time.Minutes minutes92 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes91);
        int int93 = minutes13.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes91);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2) + "'", int34 == (-2));
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-2) + "'", int60 == (-2));
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(minutes73);
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-2) + "'", int78 == (-2));
        org.junit.Assert.assertNotNull(minutes80);
        org.junit.Assert.assertNotNull(minutes82);
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertNotNull(minutes85);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(minutes87);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertNotNull(minutes89);
        org.junit.Assert.assertNotNull(minutes91);
        org.junit.Assert.assertNotNull(minutes92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        int int1 = minutes0.size();
        org.joda.time.Days days2 = minutes0.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType(2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2147483646");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(days2);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes5);
        int int8 = minutes5.size();
        org.joda.time.MutablePeriod mutablePeriod9 = minutes5.toMutablePeriod();
        boolean boolean10 = minutes0.equals((java.lang.Object) minutes5);
        org.joda.time.DurationFieldType durationFieldType12 = minutes5.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod14 = minutes13.toMutablePeriod();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes17 = minutes15.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes19 = minutes15.plus(0);
        int int20 = minutes13.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes15);
        org.joda.time.Minutes minutes22 = minutes15.plus((int) ' ');
        java.lang.String str23 = minutes15.toString();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean26 = minutes15.isLessThan(minutes25);
        org.joda.time.Period period27 = minutes25.toPeriod();
        boolean boolean28 = minutes5.isGreaterThan(minutes25);
        org.joda.time.Period period29 = minutes5.toPeriod();
        int int30 = minutes5.size();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod32 = minutes31.toMutablePeriod();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes35 = minutes33.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes37 = minutes33.plus(0);
        int int38 = minutes31.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes33);
        org.joda.time.Minutes minutes40 = minutes33.plus((int) ' ');
        java.lang.String str41 = minutes33.toString();
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod43 = minutes42.toMutablePeriod();
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes46 = minutes44.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes48 = minutes44.plus(0);
        int int49 = minutes42.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes44);
        org.joda.time.Minutes minutes51 = minutes44.plus((int) ' ');
        java.lang.String str52 = minutes44.toString();
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean55 = minutes44.isLessThan(minutes54);
        org.joda.time.Minutes minutes56 = minutes33.minus(minutes44);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes58 = minutes57.negated();
        org.joda.time.DurationFieldType durationFieldType59 = minutes57.getFieldType();
        org.joda.time.DurationFieldType durationFieldType60 = minutes57.getFieldType();
        boolean boolean61 = minutes33.isSupported(durationFieldType60);
        org.joda.time.Duration duration62 = minutes33.toStandardDuration();
        boolean boolean63 = minutes5.isGreaterThan(minutes33);
        int int64 = minutes5.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT2M" + "'", str23, "PT2M");
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT2M" + "'", str41, "PT2M");
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT2M" + "'", str52, "PT2M");
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus((int) (short) 1);
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy(0);
        org.joda.time.Minutes minutes9 = minutes7.plus((-2147483648));
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes11 = minutes10.negated();
        org.joda.time.Minutes minutes12 = minutes10.negated();
        boolean boolean13 = minutes9.isGreaterThan(minutes12);
        int int14 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes9);
        org.joda.time.Minutes minutes15 = minutes0.negated();
        int int16 = minutes0.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes3 = minutes2.negated();
        org.joda.time.Minutes minutes4 = minutes2.negated();
        org.joda.time.DurationFieldType durationFieldType5 = minutes2.getFieldType();
        int int6 = minutes0.get(durationFieldType5);
        int int7 = minutes0.getMinutes();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration9 = minutes8.toStandardDuration();
        org.joda.time.Duration duration10 = minutes8.toStandardDuration();
        org.joda.time.Minutes minutes12 = minutes8.minus(2);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.MutablePeriod mutablePeriod19 = minutes16.toMutablePeriod();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes16);
        boolean boolean21 = minutes15.isLessThan(minutes20);
        int int22 = minutes15.getMinutes();
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean25 = minutes15.isLessThan(minutes24);
        org.joda.time.Minutes minutes26 = minutes12.minus(minutes24);
        int int28 = minutes12.getValue(0);
        org.joda.time.Minutes minutes29 = minutes0.minus(minutes12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes31 = minutes0.plus((-214748364));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -214748364");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-2147483648) + "'", int6 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2147483648) + "'", int7 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(minutes29);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Duration duration12 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes2);
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy(3);
        org.joda.time.MutablePeriod mutablePeriod16 = minutes15.toMutablePeriod();
        java.lang.Class<?> wildcardClass17 = minutes15.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod4 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes6 = minutes3.plus(minutes5);
        int int7 = minutes5.getMinutes();
        org.joda.time.PeriodType periodType8 = minutes5.getPeriodType();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes9.negated();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes9);
        java.lang.String str12 = minutes9.toString();
        boolean boolean13 = minutes5.isLessThan(minutes9);
        boolean boolean14 = minutes2.isLessThan(minutes5);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT2147483647M" + "'", str12, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType3 = minutes2.getFieldType();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes4.negated();
        org.joda.time.Minutes minutes6 = minutes4.negated();
        java.lang.String str7 = minutes4.toString();
        int int8 = minutes4.size();
        org.joda.time.Minutes minutes10 = minutes4.minus(0);
        org.joda.time.Duration duration11 = minutes10.toStandardDuration();
        boolean boolean12 = minutes2.isGreaterThan(minutes10);
        org.joda.time.PeriodType periodType13 = minutes2.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes5 = minutes3.plus((int) 'a');
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes7 = minutes6.negated();
        org.joda.time.Minutes minutes8 = minutes6.negated();
        org.joda.time.DurationFieldType durationFieldType9 = minutes6.getFieldType();
        java.lang.String str10 = minutes6.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes11.negated();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes11);
        int int14 = minutes11.size();
        org.joda.time.MutablePeriod mutablePeriod15 = minutes11.toMutablePeriod();
        boolean boolean16 = minutes6.equals((java.lang.Object) minutes11);
        org.joda.time.DurationFieldType durationFieldType18 = minutes11.getFieldType((int) (short) 0);
        int int19 = minutes5.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType21 = minutes5.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2147483647M" + "'", str10, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod2 = minutes0.toMutablePeriod();
        java.lang.String str3 = minutes0.toString();
        int int4 = minutes0.size();
        org.joda.time.Minutes minutes5 = minutes0.negated();
        java.lang.String str6 = minutes0.toString();
        java.lang.String str7 = minutes0.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2M" + "'", str3, "PT2M");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT2M" + "'", str6, "PT2M");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2M" + "'", str7, "PT2M");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes6 = minutes4.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = minutes4.plus(0);
        int int9 = minutes2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes4);
        org.joda.time.Minutes minutes11 = minutes4.plus((int) ' ');
        java.lang.String str12 = minutes4.toString();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean15 = minutes4.isLessThan(minutes14);
        org.joda.time.MutablePeriod mutablePeriod16 = minutes4.toMutablePeriod();
        boolean boolean17 = minutes0.isLessThan(minutes4);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        int int19 = minutes18.getMinutes();
        boolean boolean20 = minutes4.equals((java.lang.Object) minutes18);
        org.joda.time.Minutes minutes22 = minutes4.dividedBy((int) (byte) 10);
        int int23 = minutes4.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT2M" + "'", str12, "PT2M");
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2147483648) + "'", int19 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = minutes5.getFieldType();
        int int9 = minutes4.get(durationFieldType8);
        org.joda.time.Minutes minutes11 = minutes4.plus((-1));
        boolean boolean12 = minutes1.isGreaterThan(minutes4);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        boolean boolean21 = minutes4.isSupported(durationFieldType19);
        boolean boolean22 = minutes0.isSupported(durationFieldType19);
        org.joda.time.MutablePeriod mutablePeriod23 = minutes0.toMutablePeriod();
        java.lang.Class<?> wildcardClass24 = mutablePeriod23.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes6 = minutes4.dividedBy((-1));
        java.lang.String str7 = minutes4.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes6 = minutes4.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes7 = minutes4.negated();
        boolean boolean8 = minutes3.equals((java.lang.Object) minutes7);
        java.lang.String str9 = minutes7.toString();
        org.joda.time.DurationFieldType durationFieldType10 = minutes7.getFieldType();
        boolean boolean11 = minutes0.equals((java.lang.Object) minutes7);
        org.joda.time.Period period12 = minutes0.toPeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT-2M" + "'", str9, "PT-2M");
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.PeriodType periodType2 = minutes0.getPeriodType();
        org.joda.time.Minutes minutes4 = minutes0.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes7 = minutes4.plus((-2147483646));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -2147483646");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = minutes6.plus(0);
        int int11 = minutes4.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes6);
        org.joda.time.Duration duration12 = minutes4.toStandardDuration();
        org.joda.time.Minutes minutes13 = minutes0.plus(minutes4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType15 = minutes4.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(minutes13);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        int int4 = minutes3.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes6 = minutes3.multipliedBy((-2147483646));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483645 * -2147483646");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-2147483645) + "'", int4 == (-2147483645));
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT-2M");
        int int2 = minutes1.size();
        org.joda.time.Days days3 = minutes1.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes1.dividedBy(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(days3);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes5 = minutes2.plus(minutes4);
        int int6 = minutes1.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes4);
        org.joda.time.DurationFieldType durationFieldType7 = minutes1.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType7);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod37 = minutes36.toMutablePeriod();
        boolean boolean38 = minutes2.isLessThan(minutes36);
        java.lang.String str39 = minutes36.toString();
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.MIN_VALUE;
        int int41 = minutes40.getMinutes();
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes43 = minutes42.negated();
        org.joda.time.Minutes minutes44 = minutes42.negated();
        org.joda.time.DurationFieldType durationFieldType45 = minutes42.getFieldType();
        int int46 = minutes40.get(durationFieldType45);
        int int47 = minutes40.getMinutes();
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration49 = minutes48.toStandardDuration();
        org.joda.time.Duration duration50 = minutes48.toStandardDuration();
        org.joda.time.Minutes minutes52 = minutes48.minus(2);
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes55 = minutes53.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType57 = null;
        int int58 = minutes56.get(durationFieldType57);
        org.joda.time.MutablePeriod mutablePeriod59 = minutes56.toMutablePeriod();
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes56);
        boolean boolean61 = minutes55.isLessThan(minutes60);
        int int62 = minutes55.getMinutes();
        org.joda.time.Minutes minutes64 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean65 = minutes55.isLessThan(minutes64);
        org.joda.time.Minutes minutes66 = minutes52.minus(minutes64);
        int int68 = minutes52.getValue(0);
        org.joda.time.Minutes minutes69 = minutes40.minus(minutes52);
        int int70 = minutes36.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes52);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT-2147483648M" + "'", str39, "PT-2147483648M");
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-2147483648) + "'", int41 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-2147483648) + "'", int46 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-2147483648) + "'", int47 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-2) + "'", int62 == (-2));
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod2 = minutes0.toMutablePeriod();
        java.lang.String str3 = minutes0.toString();
        int int4 = minutes0.size();
        org.joda.time.Minutes minutes5 = minutes0.negated();
        org.joda.time.Minutes minutes6 = null;
        org.joda.time.Minutes minutes7 = minutes0.minus(minutes6);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod9 = minutes8.toMutablePeriod();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes14 = minutes10.plus(0);
        int int15 = minutes8.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes10);
        org.joda.time.Minutes minutes17 = minutes10.plus((int) ' ');
        org.joda.time.Period period18 = minutes10.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod19 = minutes10.toMutablePeriod();
        org.joda.time.Period period20 = minutes10.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod21 = minutes10.toMutablePeriod();
        org.joda.time.Minutes minutes23 = minutes10.multipliedBy(100);
        org.joda.time.Minutes minutes25 = minutes23.minus((int) (short) 0);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes27 = minutes26.negated();
        org.joda.time.Minutes minutes28 = minutes26.negated();
        org.joda.time.DurationFieldType durationFieldType29 = minutes26.getFieldType();
        java.lang.String str30 = minutes26.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes32 = minutes31.negated();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes31);
        int int34 = minutes31.size();
        org.joda.time.MutablePeriod mutablePeriod35 = minutes31.toMutablePeriod();
        boolean boolean36 = minutes26.equals((java.lang.Object) minutes31);
        org.joda.time.DurationFieldType durationFieldType38 = minutes31.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod40 = minutes39.toMutablePeriod();
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes43 = minutes41.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes45 = minutes41.plus(0);
        int int46 = minutes39.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes41);
        org.joda.time.Minutes minutes48 = minutes41.plus((int) ' ');
        java.lang.String str49 = minutes41.toString();
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean52 = minutes41.isLessThan(minutes51);
        org.joda.time.Period period53 = minutes51.toPeriod();
        boolean boolean54 = minutes31.isGreaterThan(minutes51);
        boolean boolean55 = minutes25.equals((java.lang.Object) minutes31);
        boolean boolean56 = minutes7.isLessThan(minutes31);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes59 = minutes57.multipliedBy((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod60 = minutes57.toMutablePeriod();
        org.joda.time.Minutes minutes61 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod62 = minutes61.toMutablePeriod();
        org.joda.time.Minutes minutes63 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes65 = minutes63.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes67 = minutes63.plus(0);
        int int68 = minutes61.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes63);
        org.joda.time.Duration duration69 = minutes61.toStandardDuration();
        org.joda.time.Minutes minutes70 = minutes57.plus(minutes61);
        int int71 = minutes31.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes70);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2M" + "'", str3, "PT2M");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT2147483647M" + "'", str30, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT2M" + "'", str49, "PT2M");
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes8.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        org.joda.time.Minutes minutes22 = minutes15.plus((-1));
        org.joda.time.Minutes minutes24 = minutes15.minus((int) (short) 10);
        org.joda.time.Minutes minutes26 = minutes24.dividedBy((-2147483648));
        org.joda.time.Minutes minutes27 = minutes12.plus(minutes26);
        org.joda.time.Minutes minutes28 = minutes2.minus(minutes12);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes31 = minutes29.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes33 = minutes29.plus(0);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes36 = minutes34.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType38 = null;
        int int39 = minutes37.get(durationFieldType38);
        org.joda.time.DurationFieldType durationFieldType40 = minutes37.getFieldType();
        int int41 = minutes36.get(durationFieldType40);
        org.joda.time.Minutes minutes43 = minutes36.plus((-1));
        org.joda.time.Minutes minutes45 = minutes36.minus((int) (short) 10);
        org.joda.time.Minutes minutes47 = minutes45.dividedBy((-2147483648));
        org.joda.time.Minutes minutes48 = minutes33.plus(minutes47);
        org.joda.time.Minutes minutes49 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType50 = minutes49.getPeriodType();
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes52 = minutes51.negated();
        org.joda.time.Minutes minutes53 = minutes51.negated();
        org.joda.time.DurationFieldType durationFieldType54 = minutes51.getFieldType();
        java.lang.String str55 = minutes51.toString();
        boolean boolean56 = minutes49.isGreaterThan(minutes51);
        boolean boolean57 = minutes33.isLessThan(minutes51);
        int int58 = minutes12.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes51);
        org.joda.time.Minutes minutes60 = minutes51.dividedBy((-2147483647));
        org.joda.time.Minutes minutes61 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes63 = minutes61.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType64 = minutes63.getFieldType();
        org.joda.time.Period period65 = minutes63.toPeriod();
        org.joda.time.PeriodType periodType66 = minutes63.getPeriodType();
        boolean boolean67 = minutes60.isLessThan(minutes63);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-2) + "'", int41 == (-2));
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT2147483647M" + "'", str55, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.PeriodType periodType2 = minutes0.getPeriodType();
        java.lang.String str3 = minutes0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds4 = minutes0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT-2147483648M" + "'", str3, "PT-2147483648M");
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int11 = minutes9.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean6 = minutes0.isGreaterThan(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        int int8 = minutes7.getMinutes();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType10 = null;
        int int11 = minutes9.get(durationFieldType10);
        org.joda.time.MutablePeriod mutablePeriod12 = minutes9.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = minutes9.getFieldType();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType15 = null;
        int int16 = minutes14.get(durationFieldType15);
        org.joda.time.MutablePeriod mutablePeriod17 = minutes14.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType18 = minutes14.getFieldType();
        boolean boolean19 = minutes9.isSupported(durationFieldType18);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Period period21 = minutes20.toPeriod();
        org.joda.time.Minutes minutes22 = minutes9.plus(minutes20);
        org.joda.time.Minutes minutes23 = minutes7.plus(minutes22);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        int int4 = minutes3.size();
        int int5 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes3);
        org.joda.time.Minutes minutes7 = minutes3.dividedBy(2147483646);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        boolean boolean12 = minutes3.isSupported(durationFieldType11);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((-4));
        org.joda.time.Period period2 = minutes1.toPeriod();
        java.lang.String str3 = minutes1.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = minutes1.getValue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT-4M" + "'", str3, "PT-4M");
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = minutes0.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes3 = minutes0.multipliedBy((-2147483646));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * -2147483646");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        org.joda.time.Minutes minutes8 = minutes0.dividedBy(2147483646);
        org.joda.time.Minutes minutes10 = minutes0.dividedBy((-3));
        org.joda.time.Minutes minutes12 = minutes0.multipliedBy(1);
        java.lang.Class<?> wildcardClass13 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = minutes5.getFieldType();
        int int9 = minutes4.get(durationFieldType8);
        org.joda.time.Minutes minutes11 = minutes4.plus((-1));
        boolean boolean12 = minutes1.isGreaterThan(minutes4);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        boolean boolean21 = minutes4.isSupported(durationFieldType19);
        org.joda.time.Minutes minutes23 = minutes4.dividedBy(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes24 = minutes0.minus(minutes4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(minutes23);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(2147483647);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes5 = minutes3.plus(0);
        org.joda.time.PeriodType periodType6 = minutes3.getPeriodType();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes8 = minutes7.negated();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod10 = minutes9.toMutablePeriod();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes12 = minutes9.plus(minutes11);
        int int13 = minutes8.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes11);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MAX_VALUE;
        int int15 = minutes8.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes14);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes18 = minutes16.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType20 = null;
        int int21 = minutes19.get(durationFieldType20);
        org.joda.time.MutablePeriod mutablePeriod22 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes19);
        boolean boolean24 = minutes18.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes27 = minutes25.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType29 = null;
        int int30 = minutes28.get(durationFieldType29);
        org.joda.time.DurationFieldType durationFieldType31 = minutes28.getFieldType();
        int int32 = minutes27.get(durationFieldType31);
        org.joda.time.Minutes minutes34 = minutes27.plus((-1));
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod36 = minutes35.toMutablePeriod();
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes39 = minutes37.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = minutes37.plus(0);
        int int42 = minutes35.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes37);
        org.joda.time.Minutes minutes44 = minutes37.plus((int) ' ');
        java.lang.String str45 = minutes37.toString();
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean48 = minutes37.isLessThan(minutes47);
        boolean boolean49 = minutes34.isLessThan(minutes37);
        org.joda.time.Minutes minutes50 = minutes18.minus(minutes34);
        org.joda.time.MutablePeriod mutablePeriod51 = minutes18.toMutablePeriod();
        org.joda.time.Minutes minutes53 = minutes18.dividedBy(2);
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes56 = minutes54.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType58 = null;
        int int59 = minutes57.get(durationFieldType58);
        org.joda.time.DurationFieldType durationFieldType60 = minutes57.getFieldType();
        int int61 = minutes56.get(durationFieldType60);
        org.joda.time.Minutes minutes63 = minutes56.plus((-1));
        org.joda.time.Minutes minutes64 = minutes63.negated();
        org.joda.time.Minutes minutes65 = minutes53.plus(minutes64);
        org.joda.time.Minutes minutes67 = minutes53.minus((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType68 = minutes67.getFieldType();
        int int69 = minutes14.get(durationFieldType68);
        int int70 = minutes3.get(durationFieldType68);
        int int71 = minutes1.get(durationFieldType68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType73 = minutes1.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-2) + "'", int32 == (-2));
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT2M" + "'", str45, "PT2M");
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-2) + "'", int61 == (-2));
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.PeriodType periodType11 = minutes9.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType3 = minutes2.getFieldType();
        org.joda.time.Minutes minutes4 = minutes2.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.Minutes minutes7 = minutes5.negated();
        java.lang.String str8 = minutes5.toString();
        int int9 = minutes5.size();
        org.joda.time.Minutes minutes11 = minutes5.minus(0);
        org.joda.time.Minutes minutes13 = minutes5.plus((int) (short) 0);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes5);
        boolean boolean15 = minutes4.isLessThan(minutes5);
        org.joda.time.Duration duration16 = minutes4.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes18 = minutes4.plus(2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2 + 2147483646");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT2147483647M" + "'", str8, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = minutes0.plus(0);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean6 = minutes0.isGreaterThan(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes8 = minutes7.negated();
        org.joda.time.Minutes minutes10 = minutes8.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = minutes15.get(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = minutes15.getFieldType();
        int int19 = minutes14.get(durationFieldType18);
        int int20 = minutes11.get(durationFieldType18);
        org.joda.time.PeriodType periodType21 = minutes11.getPeriodType();
        int int22 = minutes11.getMinutes();
        boolean boolean23 = minutes0.isLessThan(minutes11);
        int int24 = minutes11.getMinutes();
        org.joda.time.Period period25 = minutes11.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes27 = minutes11.minus((-2147483645));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2147483645");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        org.joda.time.Minutes minutes12 = minutes10.plus(0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MAX_VALUE;
        int int14 = minutes13.size();
        int int16 = minutes13.getValue(0);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes13);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = minutes21.get(durationFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = minutes21.getFieldType();
        int int25 = minutes20.get(durationFieldType24);
        org.joda.time.Minutes minutes27 = minutes20.plus((-1));
        org.joda.time.Minutes minutes29 = minutes20.minus((int) (short) 10);
        org.joda.time.Duration duration30 = minutes20.toStandardDuration();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes32 = minutes31.negated();
        org.joda.time.Minutes minutes33 = minutes31.negated();
        java.lang.String str34 = minutes31.toString();
        org.joda.time.Minutes minutes36 = minutes31.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (byte) 0);
        boolean boolean41 = minutes36.equals((java.lang.Object) minutes38);
        boolean boolean42 = minutes20.isGreaterThan(minutes38);
        boolean boolean43 = minutes17.equals((java.lang.Object) boolean42);
        org.joda.time.Minutes minutes44 = minutes17.negated();
        int int45 = minutes12.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes44);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes48 = minutes46.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes49 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType50 = null;
        int int51 = minutes49.get(durationFieldType50);
        org.joda.time.DurationFieldType durationFieldType52 = minutes49.getFieldType();
        int int53 = minutes48.get(durationFieldType52);
        org.joda.time.Minutes minutes55 = minutes48.plus((-1));
        org.joda.time.Minutes minutes57 = minutes48.minus((int) (short) 10);
        org.joda.time.Minutes minutes59 = minutes57.dividedBy((-2147483648));
        org.joda.time.DurationFieldType durationFieldType60 = minutes57.getFieldType();
        int int61 = minutes12.get(durationFieldType60);
        org.joda.time.PeriodType periodType62 = minutes12.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT2147483647M" + "'", str34, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-2) + "'", int53 == (-2));
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-2147483646) + "'", int61 == (-2147483646));
        org.junit.Assert.assertNotNull(periodType62);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        org.joda.time.PeriodType periodType9 = minutes3.getPeriodType();
        org.joda.time.PeriodType periodType10 = minutes3.getPeriodType();
        java.lang.String str11 = minutes3.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-2147483645M" + "'", str11, "PT-2147483645M");
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT2147483646M");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = minutes1.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes4 = minutes0.minus(2);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        int int6 = minutes5.getMinutes();
        org.joda.time.PeriodType periodType7 = minutes5.getPeriodType();
        org.joda.time.Minutes minutes8 = null;
        org.joda.time.Minutes minutes9 = minutes5.plus(minutes8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Minutes minutes12 = minutes9.multipliedBy((int) (short) 0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.ZERO;
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        boolean boolean15 = minutes12.equals((java.lang.Object) minutes13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType17 = minutes13.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-2147483648) + "'", int6 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes4.getFieldType();
        int int8 = minutes3.get(durationFieldType7);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        boolean boolean11 = minutes0.isGreaterThan(minutes3);
        org.joda.time.Minutes minutes13 = minutes3.multipliedBy(2);
        org.joda.time.Minutes minutes14 = minutes13.negated();
        org.joda.time.DurationFieldType durationFieldType16 = minutes14.getFieldType(0);
        java.lang.Class<?> wildcardClass17 = durationFieldType16.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-2) + "'", int8 == (-2));
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes0.getFieldType();
        java.lang.Class<?> wildcardClass8 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus((int) (short) 1);
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy(0);
        org.joda.time.Minutes minutes9 = minutes7.plus((-2147483648));
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        boolean boolean11 = minutes7.isGreaterThan(minutes10);
        int int12 = minutes2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes10);
        int int14 = minutes2.getValue(0);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = minutes13.negated();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.Minutes minutes17 = minutes15.negated();
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        org.joda.time.Minutes minutes20 = minutes17.plus((int) 'a');
        org.joda.time.Duration duration21 = minutes20.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds22 = minutes20.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483550 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(duration21);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes3 = minutes1.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        int int13 = minutes4.get(durationFieldType11);
        org.joda.time.PeriodType periodType14 = minutes4.getPeriodType();
        org.joda.time.Minutes minutes16 = minutes4.dividedBy((-3));
        org.joda.time.PeriodType periodType17 = minutes16.getPeriodType();
        java.lang.Class<?> wildcardClass18 = minutes16.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (byte) 100);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType3 = minutes2.getPeriodType();
        org.joda.time.Weeks weeks4 = minutes2.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = minutes1.compareTo((org.joda.time.base.BaseSingleFieldPeriod) weeks4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Minutes cannot be compared to class org.joda.time.Weeks");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(weeks4);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        boolean boolean6 = minutes0.isSupported(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes0.getFieldType();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType12 = null;
        int int13 = minutes11.get(durationFieldType12);
        org.joda.time.DurationFieldType durationFieldType14 = minutes11.getFieldType();
        int int15 = minutes10.get(durationFieldType14);
        org.joda.time.Minutes minutes17 = minutes10.plus((-1));
        org.joda.time.Minutes minutes19 = minutes10.minus((int) (short) 10);
        org.joda.time.Minutes minutes20 = minutes0.plus(minutes10);
        org.joda.time.Period period21 = minutes20.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = minutes20.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-2) + "'", int15 == (-2));
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = minutes6.plus(0);
        int int11 = minutes4.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes6);
        org.joda.time.Duration duration12 = minutes4.toStandardDuration();
        org.joda.time.Minutes minutes13 = minutes0.plus(minutes4);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = minutes13.getValue((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(minutes13);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy((int) 'a');
        org.joda.time.Minutes minutes4 = minutes0.plus((int) (short) 1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.PeriodType periodType7 = minutes6.getPeriodType();
        org.joda.time.Minutes minutes8 = minutes6.negated();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes10.plus(0);
        org.joda.time.DurationFieldType durationFieldType13 = minutes12.getFieldType();
        int int14 = minutes8.get(durationFieldType13);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes17 = minutes15.minus((int) (short) 1);
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy(0);
        org.joda.time.Duration duration20 = minutes17.toStandardDuration();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes22 = minutes21.negated();
        org.joda.time.DurationFieldType durationFieldType23 = minutes21.getFieldType();
        int int24 = minutes17.get(durationFieldType23);
        boolean boolean25 = minutes8.isSupported(durationFieldType23);
        int int26 = minutes0.get(durationFieldType23);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes28 = minutes27.negated();
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes27);
        java.lang.String str30 = minutes27.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType32 = minutes31.getFieldType();
        boolean boolean33 = minutes27.isSupported(durationFieldType32);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes27);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes36 = minutes35.negated();
        org.joda.time.Minutes minutes38 = minutes36.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes41 = minutes39.dividedBy((int) 'a');
        org.joda.time.Minutes minutes43 = minutes39.plus((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType44 = minutes43.getFieldType();
        boolean boolean45 = minutes36.isSupported(durationFieldType44);
        org.joda.time.DurationFieldType durationFieldType46 = minutes36.getFieldType();
        boolean boolean47 = minutes27.isSupported(durationFieldType46);
        int int48 = minutes0.get(durationFieldType46);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483646 + "'", int24 == 2147483646);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-2147483648) + "'", int26 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT2147483647M" + "'", str30, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-2147483648) + "'", int48 == (-2147483648));
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType2 = minutes0.getFieldType();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes4.negated();
        org.joda.time.Minutes minutes6 = minutes4.negated();
        java.lang.String str7 = minutes4.toString();
        int int8 = minutes4.size();
        org.joda.time.Minutes minutes10 = minutes4.minus(0);
        org.joda.time.Minutes minutes12 = minutes4.plus((int) (short) 0);
        boolean boolean13 = minutes0.isLessThan(minutes4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds14 = minutes4.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy((int) 'a');
        org.joda.time.Minutes minutes4 = minutes0.dividedBy((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = minutes4.getValue(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2147483647");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Period period4 = minutes3.toPeriod();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.minutes(3);
        boolean boolean8 = minutes5.isLessThan(minutes7);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod15 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes17 = minutes14.plus(minutes16);
        org.joda.time.Minutes minutes18 = minutes11.minus(minutes16);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes23 = minutes19.plus(0);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes26 = minutes24.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = minutes27.get(durationFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = minutes27.getFieldType();
        int int31 = minutes26.get(durationFieldType30);
        org.joda.time.Minutes minutes33 = minutes26.plus((-1));
        org.joda.time.Minutes minutes35 = minutes26.minus((int) (short) 10);
        org.joda.time.Minutes minutes37 = minutes35.dividedBy((-2147483648));
        org.joda.time.Minutes minutes38 = minutes23.plus(minutes37);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes41 = minutes39.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType43 = null;
        int int44 = minutes42.get(durationFieldType43);
        org.joda.time.MutablePeriod mutablePeriod45 = minutes42.toMutablePeriod();
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes42);
        boolean boolean47 = minutes41.isLessThan(minutes46);
        org.joda.time.DurationFieldType durationFieldType48 = minutes46.getFieldType();
        boolean boolean49 = minutes38.isSupported(durationFieldType48);
        int int50 = minutes11.get(durationFieldType48);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes11);
        org.joda.time.PeriodType periodType52 = minutes11.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = minutes11.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-2) + "'", int31 == (-2));
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-12) + "'", int50 == (-12));
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(periodType52);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        int int1 = minutes0.size();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes6 = minutes4.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = minutes4.plus(0);
        int int9 = minutes2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes4);
        org.joda.time.Minutes minutes11 = minutes4.plus((int) ' ');
        int int12 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes11);
        org.joda.time.Minutes minutes14 = minutes11.minus((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = minutes11.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(minutes14);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT-12M");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration3 = minutes2.toStandardDuration();
        org.joda.time.Duration duration4 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes6 = minutes2.minus(2);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = minutes10.get(durationFieldType11);
        org.joda.time.MutablePeriod mutablePeriod13 = minutes10.toMutablePeriod();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes10);
        boolean boolean15 = minutes9.isLessThan(minutes14);
        int int16 = minutes9.getMinutes();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean19 = minutes9.isLessThan(minutes18);
        org.joda.time.Minutes minutes20 = minutes6.minus(minutes18);
        int int21 = minutes18.getMinutes();
        org.joda.time.Minutes minutes22 = minutes1.minus(minutes18);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes25 = minutes23.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType27 = null;
        int int28 = minutes26.get(durationFieldType27);
        org.joda.time.DurationFieldType durationFieldType29 = minutes26.getFieldType();
        int int30 = minutes25.get(durationFieldType29);
        org.joda.time.Minutes minutes32 = minutes25.plus((-1));
        org.joda.time.Minutes minutes33 = minutes32.negated();
        org.joda.time.Duration duration34 = minutes33.toStandardDuration();
        boolean boolean35 = minutes22.isGreaterThan(minutes33);
        org.joda.time.Duration duration36 = minutes22.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-2147483645) + "'", int21 == (-2147483645));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-2) + "'", int30 == (-2));
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        org.joda.time.Period period10 = minutes2.toPeriod();
        java.lang.Class<?> wildcardClass11 = minutes2.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(2147483647);
        org.joda.time.DurationFieldType durationFieldType2 = minutes1.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes4 = minutes1.minus((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes4.getFieldType();
        int int8 = minutes3.get(durationFieldType7);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        boolean boolean11 = minutes0.isGreaterThan(minutes3);
        org.joda.time.Minutes minutes13 = minutes3.plus(10);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.minutes((int) (short) -1);
        int int16 = minutes15.size();
        int int17 = minutes15.getMinutes();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod19 = minutes18.toMutablePeriod();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes21 = minutes18.plus(minutes20);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod23 = minutes22.toMutablePeriod();
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes25 = minutes22.plus(minutes24);
        boolean boolean26 = minutes21.isLessThan(minutes22);
        java.lang.String str27 = minutes21.toString();
        boolean boolean28 = minutes15.equals((java.lang.Object) minutes21);
        boolean boolean29 = minutes3.isLessThan(minutes21);
        org.joda.time.Minutes minutes31 = minutes21.minus(3);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-2) + "'", int8 == (-2));
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT-2147483645M" + "'", str27, "PT-2147483645M");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(minutes31);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int2 = minutes0.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes4 = minutes0.negated();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Duration duration8 = minutes0.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = minutes0.negated();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes3 = minutes1.dividedBy((int) (byte) -1);
        int int5 = minutes3.getValue(0);
        org.joda.time.base.BaseSingleFieldPeriod baseSingleFieldPeriod6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = minutes3.compareTo(baseSingleFieldPeriod6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes5.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType9 = minutes5.getFieldType();
        int int10 = minutes0.get(durationFieldType9);
        org.joda.time.Period period11 = minutes0.toPeriod();
        org.joda.time.Minutes minutes12 = minutes0.negated();
        org.joda.time.Minutes minutes13 = minutes0.negated();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 0);
        int int3 = minutes2.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes9 = minutes7.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = minutes10.get(durationFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = minutes10.getFieldType();
        int int14 = minutes9.get(durationFieldType13);
        org.joda.time.Minutes minutes16 = minutes9.plus((-1));
        org.joda.time.Minutes minutes18 = minutes9.minus((int) (short) 10);
        org.joda.time.Minutes minutes20 = minutes18.dividedBy((-2147483648));
        org.joda.time.Minutes minutes21 = minutes6.plus(minutes20);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes24 = minutes22.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = minutes25.get(durationFieldType26);
        org.joda.time.MutablePeriod mutablePeriod28 = minutes25.toMutablePeriod();
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes25);
        boolean boolean30 = minutes24.isLessThan(minutes29);
        org.joda.time.DurationFieldType durationFieldType31 = minutes29.getFieldType();
        boolean boolean32 = minutes21.isSupported(durationFieldType31);
        boolean boolean33 = minutes0.isLessThan(minutes21);
        org.joda.time.Minutes minutes35 = minutes21.plus((int) ' ');
        org.joda.time.DurationFieldType durationFieldType36 = minutes21.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2) + "'", int14 == (-2));
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(durationFieldType36);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes3 = minutes1.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        int int13 = minutes4.get(durationFieldType11);
        org.joda.time.PeriodType periodType14 = minutes4.getPeriodType();
        org.joda.time.Minutes minutes16 = minutes4.dividedBy((-3));
        // The following exception was thrown during execution in test generation
        try {
            int int18 = minutes4.getValue((-2147483548));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483548");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(minutes16);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        boolean boolean6 = minutes0.isSupported(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes0.getFieldType();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType12 = null;
        int int13 = minutes11.get(durationFieldType12);
        org.joda.time.DurationFieldType durationFieldType14 = minutes11.getFieldType();
        int int15 = minutes10.get(durationFieldType14);
        org.joda.time.Minutes minutes17 = minutes10.plus((-1));
        org.joda.time.Minutes minutes19 = minutes10.minus((int) (short) 10);
        org.joda.time.Minutes minutes20 = minutes0.plus(minutes10);
        org.joda.time.Period period21 = minutes20.toPeriod();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes24 = minutes22.minus((int) (short) 0);
        org.joda.time.Period period25 = minutes22.toPeriod();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MIN_VALUE;
        int int28 = minutes27.getMinutes();
        org.joda.time.PeriodType periodType29 = minutes27.getPeriodType();
        java.lang.String str30 = minutes27.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes32 = minutes31.negated();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod34 = minutes33.toMutablePeriod();
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes36 = minutes33.plus(minutes35);
        int int37 = minutes32.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes35);
        int int38 = minutes27.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes35);
        boolean boolean39 = minutes26.isGreaterThan(minutes27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes40 = minutes20.minus(minutes27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-2) + "'", int15 == (-2));
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-2147483648) + "'", int28 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT-2147483648M" + "'", str30, "PT-2147483648M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes4 = minutes0.minus(2);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        int int6 = minutes5.getMinutes();
        org.joda.time.PeriodType periodType7 = minutes5.getPeriodType();
        org.joda.time.Minutes minutes8 = null;
        org.joda.time.Minutes minutes9 = minutes5.plus(minutes8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Minutes minutes12 = minutes9.multipliedBy((int) (short) 0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.ZERO;
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        boolean boolean15 = minutes12.equals((java.lang.Object) minutes13);
        int int16 = minutes12.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-2147483648) + "'", int6 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 0);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes6 = minutes4.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType8 = null;
        int int9 = minutes7.get(durationFieldType8);
        org.joda.time.DurationFieldType durationFieldType10 = minutes7.getFieldType();
        int int11 = minutes6.get(durationFieldType10);
        org.joda.time.Minutes minutes13 = minutes6.plus((-1));
        boolean boolean14 = minutes3.isGreaterThan(minutes6);
        org.joda.time.DurationFieldType durationFieldType15 = minutes6.getFieldType();
        org.joda.time.PeriodType periodType16 = minutes6.getPeriodType();
        boolean boolean17 = minutes0.isLessThan(minutes6);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.parseMinutes("PT-3M");
        int int20 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes19);
        java.lang.String str21 = minutes0.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-2) + "'", int11 == (-2));
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT-2147483648M" + "'", str21, "PT-2147483648M");
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 0);
        org.joda.time.Period period3 = minutes0.toPeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds5 = minutes4.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = minutes5.getFieldType();
        int int9 = minutes4.get(durationFieldType8);
        org.joda.time.Minutes minutes11 = minutes4.plus((-1));
        org.joda.time.Minutes minutes13 = minutes4.minus((int) (short) 10);
        org.joda.time.Duration duration14 = minutes4.toStandardDuration();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.Minutes minutes17 = minutes15.negated();
        java.lang.String str18 = minutes15.toString();
        org.joda.time.Minutes minutes20 = minutes15.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes24 = minutes22.multipliedBy((int) (byte) 0);
        boolean boolean25 = minutes20.equals((java.lang.Object) minutes22);
        boolean boolean26 = minutes4.isGreaterThan(minutes22);
        org.joda.time.Minutes minutes27 = minutes0.plus(minutes4);
        int int28 = minutes27.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT2147483647M" + "'", str18, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483645 + "'", int28 == 2147483645);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes7 = minutes4.plus(minutes6);
        boolean boolean8 = minutes3.isLessThan(minutes4);
        org.joda.time.PeriodType periodType9 = minutes3.getPeriodType();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = minutes13.get(durationFieldType14);
        org.joda.time.MutablePeriod mutablePeriod16 = minutes13.toMutablePeriod();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes13);
        boolean boolean18 = minutes12.isLessThan(minutes17);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType23 = null;
        int int24 = minutes22.get(durationFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = minutes22.getFieldType();
        int int26 = minutes21.get(durationFieldType25);
        org.joda.time.Minutes minutes28 = minutes21.plus((-1));
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod30 = minutes29.toMutablePeriod();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes35 = minutes31.plus(0);
        int int36 = minutes29.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes31);
        org.joda.time.Minutes minutes38 = minutes31.plus((int) ' ');
        java.lang.String str39 = minutes31.toString();
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean42 = minutes31.isLessThan(minutes41);
        boolean boolean43 = minutes28.isLessThan(minutes31);
        org.joda.time.Minutes minutes44 = minutes12.minus(minutes28);
        org.joda.time.MutablePeriod mutablePeriod45 = minutes12.toMutablePeriod();
        org.joda.time.Minutes minutes47 = minutes12.dividedBy(2);
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes50 = minutes48.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType52 = null;
        int int53 = minutes51.get(durationFieldType52);
        org.joda.time.DurationFieldType durationFieldType54 = minutes51.getFieldType();
        int int55 = minutes50.get(durationFieldType54);
        org.joda.time.Minutes minutes57 = minutes50.plus((-1));
        org.joda.time.Minutes minutes58 = minutes57.negated();
        org.joda.time.Minutes minutes59 = minutes47.plus(minutes58);
        org.joda.time.Minutes minutes61 = minutes47.minus((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType62 = minutes61.getFieldType();
        org.joda.time.Minutes minutes63 = minutes3.plus(minutes61);
        java.lang.String str64 = minutes3.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-2) + "'", int26 == (-2));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT2M" + "'", str39, "PT2M");
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-2) + "'", int55 == (-2));
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT-2147483645M" + "'", str64, "PT-2147483645M");
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Period period11 = minutes9.toPeriod();
        org.joda.time.Period period12 = minutes9.toPeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes3 = minutes1.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        org.joda.time.Minutes minutes6 = minutes4.minus(1);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes10 = minutes6.plus(0);
        int int11 = minutes4.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes6);
        org.joda.time.Duration duration12 = minutes4.toStandardDuration();
        org.joda.time.Minutes minutes13 = minutes0.plus(minutes4);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes16 = minutes14.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes18 = minutes14.plus(0);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType23 = null;
        int int24 = minutes22.get(durationFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = minutes22.getFieldType();
        int int26 = minutes21.get(durationFieldType25);
        org.joda.time.Minutes minutes28 = minutes21.plus((-1));
        org.joda.time.Minutes minutes30 = minutes21.minus((int) (short) 10);
        org.joda.time.Minutes minutes32 = minutes30.dividedBy((-2147483648));
        org.joda.time.Minutes minutes33 = minutes18.plus(minutes32);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType35 = minutes34.getPeriodType();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes37 = minutes36.negated();
        org.joda.time.Minutes minutes38 = minutes36.negated();
        org.joda.time.DurationFieldType durationFieldType39 = minutes36.getFieldType();
        java.lang.String str40 = minutes36.toString();
        boolean boolean41 = minutes34.isGreaterThan(minutes36);
        boolean boolean42 = minutes18.isLessThan(minutes36);
        boolean boolean43 = minutes13.isGreaterThan(minutes36);
        java.lang.Class<?> wildcardClass44 = minutes13.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-2) + "'", int26 == (-2));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT2147483647M" + "'", str40, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes6 = minutes4.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = minutes4.plus(0);
        int int9 = minutes2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes4);
        org.joda.time.Minutes minutes11 = minutes4.plus((int) ' ');
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = minutes12.getFieldType();
        int int14 = minutes4.get(durationFieldType13);
        boolean boolean15 = minutes1.isSupported(durationFieldType13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds16 = minutes1.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes9);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes5);
        int int8 = minutes5.size();
        org.joda.time.MutablePeriod mutablePeriod9 = minutes5.toMutablePeriod();
        boolean boolean10 = minutes0.equals((java.lang.Object) minutes5);
        org.joda.time.DurationFieldType durationFieldType12 = minutes5.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod14 = minutes13.toMutablePeriod();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes17 = minutes15.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes19 = minutes15.plus(0);
        int int20 = minutes13.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes15);
        org.joda.time.Minutes minutes22 = minutes15.plus((int) ' ');
        java.lang.String str23 = minutes15.toString();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean26 = minutes15.isLessThan(minutes25);
        org.joda.time.Period period27 = minutes25.toPeriod();
        boolean boolean28 = minutes5.isGreaterThan(minutes25);
        org.joda.time.Period period29 = minutes5.toPeriod();
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Minutes minutes31 = minutes30.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds32 = minutes31.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483647 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT2M" + "'", str23, "PT2M");
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) mutablePeriod8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes9);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes14 = minutes12.minus((int) (short) 0);
        boolean boolean15 = minutes9.isLessThan(minutes14);
        org.joda.time.Minutes minutes17 = minutes14.multipliedBy((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes19 = minutes14.multipliedBy(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 2");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(minutes17);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        int int4 = minutes0.size();
        int int5 = minutes0.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.MutablePeriod mutablePeriod35 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes37 = minutes2.dividedBy(2);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes40 = minutes38.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = minutes41.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = minutes41.getFieldType();
        int int45 = minutes40.get(durationFieldType44);
        org.joda.time.Minutes minutes47 = minutes40.plus((-1));
        org.joda.time.Minutes minutes48 = minutes47.negated();
        org.joda.time.Minutes minutes49 = minutes37.plus(minutes48);
        org.joda.time.Minutes minutes51 = minutes49.multipliedBy((-12));
        int int52 = minutes51.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-24) + "'", int52 == (-24));
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        boolean boolean6 = minutes0.isSupported(durationFieldType5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes7.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = minutes7.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType9 = minutes2.getFieldType((-2147483548));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2147483548");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.ZERO;
        int int36 = minutes34.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes35);
        org.joda.time.Minutes minutes38 = minutes35.multipliedBy((int) (short) 0);
        int int39 = minutes38.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes5);
        int int8 = minutes5.size();
        org.joda.time.MutablePeriod mutablePeriod9 = minutes5.toMutablePeriod();
        boolean boolean10 = minutes0.equals((java.lang.Object) minutes5);
        org.joda.time.DurationFieldType durationFieldType12 = minutes5.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod14 = minutes13.toMutablePeriod();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes17 = minutes15.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes19 = minutes15.plus(0);
        int int20 = minutes13.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes15);
        org.joda.time.Minutes minutes22 = minutes15.plus((int) ' ');
        java.lang.String str23 = minutes15.toString();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean26 = minutes15.isLessThan(minutes25);
        org.joda.time.Period period27 = minutes25.toPeriod();
        boolean boolean28 = minutes5.isGreaterThan(minutes25);
        org.joda.time.Duration duration29 = minutes5.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT2M" + "'", str23, "PT2M");
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) ' ');
        java.lang.String str21 = minutes13.toString();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean24 = minutes13.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = minutes2.minus(minutes13);
        org.joda.time.Minutes minutes27 = minutes13.plus(3);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes29 = minutes28.negated();
        org.joda.time.Minutes minutes30 = minutes28.negated();
        org.joda.time.DurationFieldType durationFieldType31 = minutes28.getFieldType();
        java.lang.String str32 = minutes28.toString();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes34 = minutes33.negated();
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes33);
        int int36 = minutes33.size();
        org.joda.time.MutablePeriod mutablePeriod37 = minutes33.toMutablePeriod();
        boolean boolean38 = minutes28.equals((java.lang.Object) minutes33);
        org.joda.time.DurationFieldType durationFieldType40 = minutes33.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod42 = minutes41.toMutablePeriod();
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes45 = minutes43.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes47 = minutes43.plus(0);
        int int48 = minutes41.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes43);
        org.joda.time.Minutes minutes50 = minutes43.plus((int) ' ');
        java.lang.String str51 = minutes43.toString();
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean54 = minutes43.isLessThan(minutes53);
        org.joda.time.Period period55 = minutes53.toPeriod();
        boolean boolean56 = minutes33.isGreaterThan(minutes53);
        org.joda.time.Period period57 = minutes33.toPeriod();
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period57);
        boolean boolean59 = minutes27.equals((java.lang.Object) period57);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2M" + "'", str21, "PT2M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT2147483647M" + "'", str32, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT2M" + "'", str51, "PT2M");
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean12 = minutes2.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Duration duration15 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes13.minus(2);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = minutes18.negated();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = minutes22.negated();
        boolean boolean25 = minutes18.equals((java.lang.Object) minutes24);
        boolean boolean26 = minutes17.isLessThan(minutes18);
        org.joda.time.Minutes minutes27 = minutes11.minus(minutes18);
        int int28 = minutes18.getMinutes();
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration30 = minutes29.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod31 = minutes29.toMutablePeriod();
        java.lang.String str32 = minutes29.toString();
        org.joda.time.PeriodType periodType33 = minutes29.getPeriodType();
        boolean boolean34 = minutes18.isGreaterThan(minutes29);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes37 = minutes35.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes40 = minutes38.minus((int) (short) 1);
        org.joda.time.Minutes minutes42 = minutes40.multipliedBy(0);
        org.joda.time.Minutes minutes44 = minutes42.plus((-2147483648));
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes46 = minutes45.negated();
        org.joda.time.Minutes minutes47 = minutes45.negated();
        boolean boolean48 = minutes44.isGreaterThan(minutes47);
        int int49 = minutes35.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes44);
        org.joda.time.MutablePeriod mutablePeriod50 = minutes44.toMutablePeriod();
        int int51 = minutes18.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes44);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT2M" + "'", str32, "PT2M");
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType3 = minutes2.getFieldType();
        org.joda.time.Minutes minutes4 = minutes2.negated();
        org.joda.time.MutablePeriod mutablePeriod5 = minutes4.toMutablePeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        int int9 = minutes2.getMinutes();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean12 = minutes2.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Duration duration15 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes13.minus(2);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes21 = minutes18.negated();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = minutes22.negated();
        boolean boolean25 = minutes18.equals((java.lang.Object) minutes24);
        boolean boolean26 = minutes17.isLessThan(minutes18);
        org.joda.time.Minutes minutes27 = minutes11.minus(minutes18);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes29 = minutes28.negated();
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes28);
        java.lang.String str31 = minutes28.toString();
        org.joda.time.Minutes minutes32 = minutes27.plus(minutes28);
        org.joda.time.Minutes minutes33 = minutes27.negated();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = minutes33.getValue(2147483645);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2147483645");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT2147483647M" + "'", str31, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Period period1 = minutes0.toPeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Duration duration3 = minutes2.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.DurationFieldType durationFieldType3 = minutes0.getFieldType();
        java.lang.String str4 = minutes0.toString();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = minutes5.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType9 = minutes5.getFieldType();
        int int10 = minutes0.get(durationFieldType9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        boolean boolean12 = minutes0.isLessThan(minutes11);
        org.joda.time.Minutes minutes13 = null;
        org.joda.time.Minutes minutes14 = minutes11.plus(minutes13);
        java.lang.String str15 = minutes11.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT2147483647M" + "'", str15, "PT2147483647M");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus((int) (short) 1);
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy(0);
        boolean boolean15 = minutes0.isGreaterThan(minutes14);
        org.joda.time.Minutes minutes17 = minutes0.dividedBy((int) (byte) 10);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(minutes17);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes4 = minutes0.minus(2);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        int int6 = minutes5.getMinutes();
        org.joda.time.PeriodType periodType7 = minutes5.getPeriodType();
        org.joda.time.Minutes minutes8 = null;
        org.joda.time.Minutes minutes9 = minutes5.plus(minutes8);
        boolean boolean10 = minutes0.isLessThan(minutes9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes12 = minutes0.dividedBy(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-2147483648) + "'", int6 == (-2147483648));
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes2 = minutes0.plus(2147483646);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2147483646");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus((int) (short) 1);
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy(0);
        org.joda.time.Minutes minutes9 = minutes7.plus((-2147483648));
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes11 = minutes10.negated();
        org.joda.time.Minutes minutes12 = minutes10.negated();
        boolean boolean13 = minutes9.isGreaterThan(minutes12);
        int int14 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes9);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = minutes0.getValue((-4));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(minutes15);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        int int1 = minutes0.getMinutes();
        int int2 = minutes0.size();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.dividedBy((int) 'a');
        org.joda.time.Minutes minutes7 = minutes3.plus((int) (short) 1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes9 = minutes8.negated();
        org.joda.time.PeriodType periodType10 = minutes9.getPeriodType();
        org.joda.time.Minutes minutes11 = minutes9.negated();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes15 = minutes13.plus(0);
        org.joda.time.DurationFieldType durationFieldType16 = minutes15.getFieldType();
        int int17 = minutes11.get(durationFieldType16);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes20 = minutes18.minus((int) (short) 1);
        org.joda.time.Minutes minutes22 = minutes20.multipliedBy(0);
        org.joda.time.Duration duration23 = minutes20.toStandardDuration();
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes25 = minutes24.negated();
        org.joda.time.DurationFieldType durationFieldType26 = minutes24.getFieldType();
        int int27 = minutes20.get(durationFieldType26);
        boolean boolean28 = minutes11.isSupported(durationFieldType26);
        int int29 = minutes3.get(durationFieldType26);
        boolean boolean30 = minutes0.isSupported(durationFieldType26);
        org.joda.time.Duration duration31 = minutes0.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2147483648) + "'", int1 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483646 + "'", int27 == 2147483646);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-2147483648) + "'", int29 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        java.lang.Object obj14 = null;
        boolean boolean15 = minutes13.equals(obj14);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes5 = minutes2.negated();
        boolean boolean6 = minutes1.equals((java.lang.Object) minutes5);
        java.lang.Class<?> wildcardClass7 = minutes5.getClass();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (short) -1);
        int int2 = minutes1.size();
        org.joda.time.Duration duration3 = minutes1.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes4.getFieldType();
        int int8 = minutes3.get(durationFieldType7);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        boolean boolean11 = minutes0.isGreaterThan(minutes3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType13 = minutes0.getFieldType(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-2) + "'", int8 == (-2));
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.minutes((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes0.minus(minutes4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = minutes1.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = minutes4.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes4.getFieldType();
        int int8 = minutes3.get(durationFieldType7);
        org.joda.time.Minutes minutes10 = minutes3.plus((-1));
        boolean boolean11 = minutes0.isGreaterThan(minutes3);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = minutes12.dividedBy(2);
        int int15 = minutes12.size();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod17 = minutes16.toMutablePeriod();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes22 = minutes18.plus(0);
        int int23 = minutes16.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes18);
        org.joda.time.Minutes minutes25 = minutes18.plus((int) ' ');
        int int26 = minutes25.size();
        org.joda.time.Minutes minutes28 = minutes25.minus(0);
        org.joda.time.Minutes minutes29 = minutes12.plus(minutes25);
        org.joda.time.Minutes minutes31 = minutes29.dividedBy((-2147483648));
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes33 = minutes32.negated();
        org.joda.time.Minutes minutes34 = minutes32.negated();
        java.lang.String str35 = minutes32.toString();
        org.joda.time.Minutes minutes37 = minutes32.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes41 = minutes39.multipliedBy((int) (byte) 0);
        boolean boolean42 = minutes37.equals((java.lang.Object) minutes39);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes44 = minutes43.negated();
        org.joda.time.DurationFieldType durationFieldType45 = minutes43.getFieldType();
        boolean boolean46 = minutes37.isSupported(durationFieldType45);
        int int47 = minutes29.get(durationFieldType45);
        boolean boolean48 = minutes3.equals((java.lang.Object) minutes29);
        org.joda.time.Minutes minutes50 = minutes29.minus(100);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-2) + "'", int8 == (-2));
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT2147483647M" + "'", str35, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 36 + "'", int47 == 36);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(minutes50);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes4 = minutes0.minus(2);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.MutablePeriod mutablePeriod11 = minutes8.toMutablePeriod();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes8);
        boolean boolean13 = minutes7.isLessThan(minutes12);
        int int14 = minutes7.getMinutes();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean17 = minutes7.isLessThan(minutes16);
        org.joda.time.Minutes minutes18 = minutes4.minus(minutes16);
        int int19 = minutes16.getMinutes();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes22 = minutes20.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes24 = minutes20.plus(0);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes27 = minutes25.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType29 = null;
        int int30 = minutes28.get(durationFieldType29);
        org.joda.time.DurationFieldType durationFieldType31 = minutes28.getFieldType();
        int int32 = minutes27.get(durationFieldType31);
        org.joda.time.Minutes minutes34 = minutes27.plus((-1));
        org.joda.time.Minutes minutes36 = minutes27.minus((int) (short) 10);
        org.joda.time.Minutes minutes38 = minutes36.dividedBy((-2147483648));
        org.joda.time.Minutes minutes39 = minutes24.plus(minutes38);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes42 = minutes40.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType44 = null;
        int int45 = minutes43.get(durationFieldType44);
        org.joda.time.MutablePeriod mutablePeriod46 = minutes43.toMutablePeriod();
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes43);
        boolean boolean48 = minutes42.isLessThan(minutes47);
        org.joda.time.DurationFieldType durationFieldType49 = minutes47.getFieldType();
        boolean boolean50 = minutes39.isSupported(durationFieldType49);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes53 = minutes51.multipliedBy((int) (short) -1);
        org.joda.time.Period period54 = minutes53.toPeriod();
        org.joda.time.Minutes minutes55 = minutes39.plus(minutes53);
        boolean boolean56 = minutes16.isGreaterThan(minutes53);
        org.joda.time.PeriodType periodType57 = minutes53.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2) + "'", int14 == (-2));
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2147483645) + "'", int19 == (-2147483645));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-2) + "'", int32 == (-2));
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(periodType57);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        org.joda.time.Minutes minutes8 = minutes0.dividedBy(2147483646);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutes((int) (byte) 10);
        boolean boolean11 = minutes0.isLessThan(minutes10);
        int int12 = minutes0.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes1.plus((int) (byte) -1);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod2 = minutes0.toMutablePeriod();
        java.lang.String str3 = minutes0.toString();
        int int4 = minutes0.size();
        org.joda.time.Minutes minutes5 = minutes0.negated();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType8 = minutes7.getPeriodType();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes9.negated();
        org.joda.time.Minutes minutes11 = minutes9.negated();
        org.joda.time.DurationFieldType durationFieldType12 = minutes9.getFieldType();
        java.lang.String str13 = minutes9.toString();
        boolean boolean14 = minutes7.isGreaterThan(minutes9);
        boolean boolean15 = minutes6.equals((java.lang.Object) minutes7);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes6);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes18 = minutes17.negated();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes17);
        org.joda.time.Minutes minutes20 = minutes16.minus(minutes19);
        org.joda.time.Minutes minutes22 = minutes16.minus(34);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes24 = minutes23.negated();
        org.joda.time.Minutes minutes25 = minutes23.negated();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MAX_VALUE;
        int int27 = minutes26.size();
        int int29 = minutes26.getValue(0);
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes26);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes33 = minutes31.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType35 = null;
        int int36 = minutes34.get(durationFieldType35);
        org.joda.time.DurationFieldType durationFieldType37 = minutes34.getFieldType();
        int int38 = minutes33.get(durationFieldType37);
        org.joda.time.Minutes minutes40 = minutes33.plus((-1));
        org.joda.time.Minutes minutes42 = minutes33.minus((int) (short) 10);
        org.joda.time.Duration duration43 = minutes33.toStandardDuration();
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes45 = minutes44.negated();
        org.joda.time.Minutes minutes46 = minutes44.negated();
        java.lang.String str47 = minutes44.toString();
        org.joda.time.Minutes minutes49 = minutes44.dividedBy((int) (byte) 10);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        org.joda.time.Minutes minutes53 = minutes51.multipliedBy((int) (byte) 0);
        boolean boolean54 = minutes49.equals((java.lang.Object) minutes51);
        boolean boolean55 = minutes33.isGreaterThan(minutes51);
        boolean boolean56 = minutes30.equals((java.lang.Object) boolean55);
        org.joda.time.Minutes minutes57 = minutes23.minus(minutes30);
        org.joda.time.Minutes minutes58 = minutes22.minus(minutes57);
        org.joda.time.Minutes minutes59 = minutes5.minus(minutes57);
        org.joda.time.Minutes minutes61 = minutes5.minus((-2147483646));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2M" + "'", str3, "PT2M");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT2147483647M" + "'", str13, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-2) + "'", int38 == (-2));
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT2147483647M" + "'", str47, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = minutes13.negated();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes16 = minutes15.negated();
        org.joda.time.Minutes minutes17 = minutes15.negated();
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes21 = minutes19.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType22 = minutes21.getFieldType();
        int int23 = minutes18.get(durationFieldType22);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes26 = minutes24.minus((int) (short) 0);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes28 = minutes27.negated();
        org.joda.time.Minutes minutes29 = minutes27.negated();
        org.joda.time.DurationFieldType durationFieldType30 = minutes27.getFieldType();
        boolean boolean31 = minutes24.isSupported(durationFieldType30);
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes34 = minutes32.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes36 = minutes32.plus(0);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes39 = minutes37.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType41 = null;
        int int42 = minutes40.get(durationFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = minutes40.getFieldType();
        int int44 = minutes39.get(durationFieldType43);
        org.joda.time.Minutes minutes46 = minutes39.plus((-1));
        org.joda.time.Minutes minutes48 = minutes39.minus((int) (short) 10);
        org.joda.time.Minutes minutes50 = minutes48.dividedBy((-2147483648));
        org.joda.time.Minutes minutes51 = minutes36.plus(minutes50);
        org.joda.time.Minutes minutes52 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes54 = minutes52.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType56 = null;
        int int57 = minutes55.get(durationFieldType56);
        org.joda.time.MutablePeriod mutablePeriod58 = minutes55.toMutablePeriod();
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes55);
        boolean boolean60 = minutes54.isLessThan(minutes59);
        org.joda.time.DurationFieldType durationFieldType61 = minutes59.getFieldType();
        boolean boolean62 = minutes51.isSupported(durationFieldType61);
        boolean boolean63 = minutes24.isSupported(durationFieldType61);
        boolean boolean64 = minutes18.isSupported(durationFieldType61);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-2) + "'", int44 == (-2));
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Duration duration2 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes4 = minutes0.minus(2);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.MutablePeriod mutablePeriod11 = minutes8.toMutablePeriod();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes8);
        boolean boolean13 = minutes7.isLessThan(minutes12);
        int int14 = minutes7.getMinutes();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean17 = minutes7.isLessThan(minutes16);
        org.joda.time.Minutes minutes18 = minutes4.minus(minutes16);
        org.joda.time.MutablePeriod mutablePeriod19 = minutes16.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes21 = minutes16.minus(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483645 + -4");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2) + "'", int14 == (-2));
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        org.joda.time.Duration duration4 = minutes0.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(duration4);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean13 = minutes2.isLessThan(minutes12);
        org.joda.time.Duration duration14 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes17 = minutes15.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType19 = null;
        int int20 = minutes18.get(durationFieldType19);
        org.joda.time.MutablePeriod mutablePeriod21 = minutes18.toMutablePeriod();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes18);
        boolean boolean23 = minutes17.isLessThan(minutes22);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes26 = minutes24.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = minutes27.get(durationFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = minutes27.getFieldType();
        int int31 = minutes26.get(durationFieldType30);
        org.joda.time.Minutes minutes33 = minutes26.plus((-1));
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod35 = minutes34.toMutablePeriod();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes38 = minutes36.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes40 = minutes36.plus(0);
        int int41 = minutes34.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes36);
        org.joda.time.Minutes minutes43 = minutes36.plus((int) ' ');
        java.lang.String str44 = minutes36.toString();
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean47 = minutes36.isLessThan(minutes46);
        boolean boolean48 = minutes33.isLessThan(minutes36);
        org.joda.time.Minutes minutes49 = minutes17.minus(minutes33);
        org.joda.time.MutablePeriod mutablePeriod50 = minutes17.toMutablePeriod();
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod52 = minutes51.toMutablePeriod();
        boolean boolean53 = minutes17.isLessThan(minutes51);
        org.joda.time.Minutes minutes55 = minutes17.plus((int) ' ');
        org.joda.time.DurationFieldType durationFieldType56 = minutes55.getFieldType();
        org.joda.time.Minutes minutes57 = minutes2.plus(minutes55);
        org.joda.time.Period period58 = minutes55.toPeriod();
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes61 = minutes59.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes62 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType63 = null;
        int int64 = minutes62.get(durationFieldType63);
        org.joda.time.MutablePeriod mutablePeriod65 = minutes62.toMutablePeriod();
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes62);
        boolean boolean67 = minutes61.isLessThan(minutes66);
        int int68 = minutes61.getMinutes();
        org.joda.time.Minutes minutes70 = org.joda.time.Minutes.parseMinutes("PT-2147483645M");
        boolean boolean71 = minutes61.isLessThan(minutes70);
        boolean boolean72 = minutes55.isGreaterThan(minutes61);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-2) + "'", int31 == (-2));
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT2M" + "'", str44, "PT2M");
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-2) + "'", int68 == (-2));
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes6 = minutes4.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = minutes4.plus(0);
        int int9 = minutes2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes4);
        org.joda.time.Minutes minutes11 = minutes4.plus((int) ' ');
        java.lang.String str12 = minutes4.toString();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean15 = minutes4.isLessThan(minutes14);
        org.joda.time.MutablePeriod mutablePeriod16 = minutes4.toMutablePeriod();
        boolean boolean17 = minutes0.isLessThan(minutes4);
        int int18 = minutes4.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT2M" + "'", str12, "PT2M");
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes3 = minutes1.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = minutes8.get(durationFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes8.getFieldType();
        int int12 = minutes7.get(durationFieldType11);
        int int13 = minutes4.get(durationFieldType11);
        int int14 = minutes4.getMinutes();
        java.lang.String str15 = minutes4.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT2147483647M" + "'", str15, "PT2147483647M");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = minutes0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes0.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType4 = minutes0.getFieldType();
        org.joda.time.Minutes minutes6 = minutes0.dividedBy((-1));
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        int int8 = minutes7.size();
        org.joda.time.Minutes minutes9 = minutes0.plus(minutes7);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = minutes13.get(durationFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = minutes13.getFieldType();
        int int17 = minutes12.get(durationFieldType16);
        int int18 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes12);
        org.joda.time.Minutes minutes20 = minutes0.plus(2147483647);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes22 = minutes0.multipliedBy((-12));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * -12");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) ' ');
        org.joda.time.Seconds seconds2 = minutes1.toStandardSeconds();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(seconds2);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        java.lang.String str3 = minutes0.toString();
        int int4 = minutes0.size();
        org.joda.time.Minutes minutes6 = minutes0.minus(0);
        org.joda.time.Minutes minutes8 = minutes0.plus((int) (short) 0);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = minutes0.getValue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy((int) 'a');
        org.joda.time.Minutes minutes4 = minutes0.plus((int) (short) 1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes6 = minutes5.negated();
        org.joda.time.PeriodType periodType7 = minutes6.getPeriodType();
        org.joda.time.Minutes minutes8 = minutes6.negated();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes12 = minutes10.plus(0);
        org.joda.time.DurationFieldType durationFieldType13 = minutes12.getFieldType();
        int int14 = minutes8.get(durationFieldType13);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes17 = minutes15.minus((int) (short) 1);
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy(0);
        org.joda.time.Duration duration20 = minutes17.toStandardDuration();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes22 = minutes21.negated();
        org.joda.time.DurationFieldType durationFieldType23 = minutes21.getFieldType();
        int int24 = minutes17.get(durationFieldType23);
        boolean boolean25 = minutes8.isSupported(durationFieldType23);
        int int26 = minutes0.get(durationFieldType23);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes28 = minutes27.negated();
        org.joda.time.PeriodType periodType29 = minutes28.getPeriodType();
        org.joda.time.Minutes minutes30 = minutes28.negated();
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes34 = minutes32.plus(0);
        org.joda.time.DurationFieldType durationFieldType35 = minutes34.getFieldType();
        int int36 = minutes30.get(durationFieldType35);
        org.joda.time.Minutes minutes38 = minutes30.dividedBy((int) ' ');
        org.joda.time.Minutes minutes39 = minutes0.plus(minutes30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes41 = minutes0.plus((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -1");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483646 + "'", int24 == 2147483646);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-2147483648) + "'", int26 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = minutes3.toMutablePeriod();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes3);
        boolean boolean8 = minutes2.isLessThan(minutes7);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = minutes12.get(durationFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = minutes12.getFieldType();
        int int16 = minutes11.get(durationFieldType15);
        org.joda.time.Minutes minutes18 = minutes11.plus((-1));
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes23 = minutes21.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes25 = minutes21.plus(0);
        int int26 = minutes19.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes21);
        org.joda.time.Minutes minutes28 = minutes21.plus((int) ' ');
        java.lang.String str29 = minutes21.toString();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean32 = minutes21.isLessThan(minutes31);
        boolean boolean33 = minutes18.isLessThan(minutes21);
        org.joda.time.Minutes minutes34 = minutes2.minus(minutes18);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.ZERO;
        int int36 = minutes34.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes35);
        org.joda.time.Minutes minutes38 = minutes34.minus(2147483647);
        java.lang.String str39 = minutes34.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT2M" + "'", str29, "PT2M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT1M" + "'", str39, "PT1M");
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Duration duration12 = minutes2.toStandardDuration();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes2);
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy(3);
        org.joda.time.DurationFieldType durationFieldType16 = minutes15.getFieldType();
        org.joda.time.DurationFieldType durationFieldType17 = minutes15.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes4.negated();
        org.joda.time.Minutes minutes6 = minutes4.negated();
        boolean boolean7 = minutes0.equals((java.lang.Object) minutes6);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.minutes((int) (short) -1);
        int int10 = minutes9.size();
        int int11 = minutes9.getMinutes();
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod13 = minutes12.toMutablePeriod();
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes15 = minutes12.plus(minutes14);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod17 = minutes16.toMutablePeriod();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes19 = minutes16.plus(minutes18);
        boolean boolean20 = minutes15.isLessThan(minutes16);
        java.lang.String str21 = minutes15.toString();
        boolean boolean22 = minutes9.equals((java.lang.Object) minutes15);
        org.joda.time.Duration duration23 = minutes9.toStandardDuration();
        boolean boolean24 = minutes0.isLessThan(minutes9);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT-2147483645M" + "'", str21, "PT-2147483645M");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) ' ');
        java.lang.String str21 = minutes13.toString();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean24 = minutes13.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = minutes2.minus(minutes13);
        int int26 = minutes25.size();
        org.joda.time.Minutes minutes28 = minutes25.multipliedBy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType30 = minutes25.getFieldType((-22139006));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -22139006");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2M" + "'", str21, "PT2M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(minutes28);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        org.joda.time.Minutes minutes5 = minutes3.plus((int) 'a');
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes7 = minutes6.negated();
        org.joda.time.DurationFieldType durationFieldType8 = minutes6.getFieldType();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType10 = null;
        int int11 = minutes9.get(durationFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = minutes9.getFieldType();
        boolean boolean13 = minutes6.isSupported(durationFieldType12);
        int int14 = minutes5.get(durationFieldType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds15 = minutes5.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483548 * 60");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2147483548) + "'", int14 == (-2147483548));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus((int) (short) 1);
        org.joda.time.Minutes minutes14 = minutes12.multipliedBy(0);
        boolean boolean15 = minutes0.isGreaterThan(minutes14);
        org.joda.time.Minutes minutes17 = minutes0.multipliedBy((-1));
        org.joda.time.base.BaseSingleFieldPeriod baseSingleFieldPeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = minutes17.compareTo(baseSingleFieldPeriod18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(minutes17);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes4 = minutes3.negated();
        org.joda.time.Minutes minutes5 = minutes3.negated();
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        java.lang.String str7 = minutes3.toString();
        boolean boolean8 = minutes1.isGreaterThan(minutes3);
        boolean boolean9 = minutes0.equals((java.lang.Object) minutes1);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes11.negated();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes11);
        org.joda.time.Minutes minutes14 = minutes10.minus(minutes13);
        org.joda.time.Minutes minutes16 = minutes10.minus(34);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes18 = minutes17.negated();
        org.joda.time.Minutes minutes19 = minutes17.negated();
        org.joda.time.DurationFieldType durationFieldType20 = minutes17.getFieldType();
        java.lang.String str21 = minutes17.toString();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes22.negated();
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes22);
        int int25 = minutes22.size();
        org.joda.time.MutablePeriod mutablePeriod26 = minutes22.toMutablePeriod();
        boolean boolean27 = minutes17.equals((java.lang.Object) minutes22);
        org.joda.time.DurationFieldType durationFieldType29 = minutes22.getFieldType((int) (short) 0);
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod31 = minutes30.toMutablePeriod();
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes34 = minutes32.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes36 = minutes32.plus(0);
        int int37 = minutes30.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes32);
        org.joda.time.Minutes minutes39 = minutes32.plus((int) ' ');
        java.lang.String str40 = minutes32.toString();
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean43 = minutes32.isLessThan(minutes42);
        org.joda.time.Period period44 = minutes42.toPeriod();
        boolean boolean45 = minutes22.isGreaterThan(minutes42);
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes47 = minutes10.plus(minutes22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2147483647M" + "'", str7, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2147483647M" + "'", str21, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT2M" + "'", str40, "PT2M");
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(minutes46);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus((int) (short) 1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes5 = minutes3.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType6 = minutes5.getFieldType();
        org.joda.time.Minutes minutes7 = minutes5.negated();
        boolean boolean8 = minutes0.isLessThan(minutes5);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes13 = minutes9.plus(0);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean15 = minutes9.isGreaterThan(minutes14);
        org.joda.time.PeriodType periodType16 = minutes9.getPeriodType();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType19 = minutes18.getPeriodType();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes21 = minutes20.negated();
        org.joda.time.Minutes minutes22 = minutes20.negated();
        org.joda.time.DurationFieldType durationFieldType23 = minutes20.getFieldType();
        java.lang.String str24 = minutes20.toString();
        boolean boolean25 = minutes18.isGreaterThan(minutes20);
        boolean boolean26 = minutes17.equals((java.lang.Object) minutes18);
        org.joda.time.Minutes minutes28 = minutes18.minus(1);
        org.joda.time.Minutes minutes29 = minutes9.minus(minutes28);
        org.joda.time.DurationFieldType durationFieldType30 = minutes28.getFieldType();
        boolean boolean31 = minutes0.isGreaterThan(minutes28);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT2147483647M" + "'", str24, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) ' ');
        java.lang.String str21 = minutes13.toString();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean24 = minutes13.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = minutes2.minus(minutes13);
        int int26 = minutes25.size();
        org.joda.time.Minutes minutes28 = minutes25.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes30 = minutes28.dividedBy((-12));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2M" + "'", str21, "PT2M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = minutes5.get(durationFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = minutes5.getFieldType();
        int int9 = minutes4.get(durationFieldType8);
        org.joda.time.Minutes minutes11 = minutes4.plus((-1));
        boolean boolean12 = minutes1.isGreaterThan(minutes4);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = minutes16.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = minutes16.getFieldType();
        int int20 = minutes15.get(durationFieldType19);
        boolean boolean21 = minutes4.isSupported(durationFieldType19);
        boolean boolean22 = minutes0.isSupported(durationFieldType19);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod24 = minutes23.toMutablePeriod();
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes26 = minutes23.plus(minutes25);
        org.joda.time.Minutes minutes28 = minutes26.plus((int) 'a');
        org.joda.time.Period period29 = minutes26.toPeriod();
        boolean boolean30 = minutes0.isGreaterThan(minutes26);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2) + "'", int9 == (-2));
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2) + "'", int20 == (-2));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        int int1 = minutes0.size();
        int int3 = minutes0.getValue(0);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.Period period5 = minutes0.toPeriod();
        java.lang.Class<?> wildcardClass6 = minutes0.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) ' ');
        java.lang.String str21 = minutes13.toString();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean24 = minutes13.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = minutes2.minus(minutes13);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes27 = minutes26.negated();
        org.joda.time.DurationFieldType durationFieldType28 = minutes26.getFieldType();
        org.joda.time.DurationFieldType durationFieldType29 = minutes26.getFieldType();
        boolean boolean30 = minutes2.isSupported(durationFieldType29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = minutes31.get(durationFieldType32);
        org.joda.time.MutablePeriod mutablePeriod34 = minutes31.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType35 = minutes31.getFieldType();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration37 = minutes36.toStandardDuration();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes36);
        boolean boolean39 = minutes31.isGreaterThan(minutes36);
        org.joda.time.Minutes minutes40 = minutes2.plus(minutes36);
        org.joda.time.Minutes minutes41 = minutes36.negated();
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType44 = minutes43.getPeriodType();
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes46 = minutes45.negated();
        org.joda.time.Minutes minutes47 = minutes45.negated();
        org.joda.time.DurationFieldType durationFieldType48 = minutes45.getFieldType();
        java.lang.String str49 = minutes45.toString();
        boolean boolean50 = minutes43.isGreaterThan(minutes45);
        boolean boolean51 = minutes42.equals((java.lang.Object) minutes43);
        org.joda.time.Minutes minutes53 = minutes43.minus(1);
        org.joda.time.PeriodType periodType54 = minutes53.getPeriodType();
        org.joda.time.Minutes minutes55 = minutes41.plus(minutes53);
        java.lang.String str56 = minutes53.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2M" + "'", str21, "PT2M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT2147483647M" + "'", str49, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT2M" + "'", str56, "PT2M");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes5);
        org.joda.time.DurationFieldType durationFieldType7 = minutes5.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(durationFieldType7);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus((int) (short) 1);
        org.joda.time.Minutes minutes7 = minutes5.multipliedBy(0);
        org.joda.time.Minutes minutes9 = minutes7.plus((-2147483648));
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes11 = minutes10.negated();
        org.joda.time.Minutes minutes12 = minutes10.negated();
        boolean boolean13 = minutes9.isGreaterThan(minutes12);
        int int14 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes9);
        org.joda.time.Minutes minutes16 = minutes9.minus((int) (short) -1);
        org.joda.time.Period period17 = minutes16.toPeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes3 = minutes0.plus(minutes2);
        int int4 = minutes2.getMinutes();
        org.joda.time.PeriodType periodType5 = minutes2.getPeriodType();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.THREE;
        org.joda.time.PeriodType periodType8 = minutes7.getPeriodType();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes9.negated();
        org.joda.time.Minutes minutes11 = minutes9.negated();
        org.joda.time.DurationFieldType durationFieldType12 = minutes9.getFieldType();
        java.lang.String str13 = minutes9.toString();
        boolean boolean14 = minutes7.isGreaterThan(minutes9);
        boolean boolean15 = minutes6.equals((java.lang.Object) minutes7);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes6);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes18 = minutes17.negated();
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes17);
        org.joda.time.Minutes minutes20 = minutes16.minus(minutes19);
        org.joda.time.DurationFieldType durationFieldType21 = minutes16.getFieldType();
        boolean boolean22 = minutes2.isSupported(durationFieldType21);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes2);
        org.joda.time.Duration duration24 = minutes2.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT2147483647M" + "'", str13, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(duration24);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        org.joda.time.Minutes minutes3 = minutes1.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes7 = minutes5.plus(0);
        org.joda.time.DurationFieldType durationFieldType8 = minutes7.getFieldType();
        int int9 = minutes3.get(durationFieldType8);
        org.joda.time.Minutes minutes11 = minutes3.dividedBy((int) ' ');
        java.lang.Class<?> wildcardClass12 = minutes3.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = minutes0.toMutablePeriod();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes4 = minutes2.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes2.plus(0);
        int int7 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes2);
        org.joda.time.Minutes minutes9 = minutes2.plus((int) ' ');
        java.lang.String str10 = minutes2.toString();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = minutes11.toMutablePeriod();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes15 = minutes13.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes17 = minutes13.plus(0);
        int int18 = minutes11.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes13);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) ' ');
        java.lang.String str21 = minutes13.toString();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.parseMinutes("PT2147483647M");
        boolean boolean24 = minutes13.isLessThan(minutes23);
        org.joda.time.Minutes minutes25 = minutes2.minus(minutes13);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes27 = minutes26.negated();
        org.joda.time.DurationFieldType durationFieldType28 = minutes26.getFieldType();
        org.joda.time.DurationFieldType durationFieldType29 = minutes26.getFieldType();
        boolean boolean30 = minutes2.isSupported(durationFieldType29);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = minutes31.get(durationFieldType32);
        org.joda.time.MutablePeriod mutablePeriod34 = minutes31.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType35 = minutes31.getFieldType();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration37 = minutes36.toStandardDuration();
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes36);
        boolean boolean39 = minutes31.isGreaterThan(minutes36);
        org.joda.time.Minutes minutes40 = minutes2.plus(minutes36);
        org.joda.time.DurationFieldType durationFieldType42 = minutes2.getFieldType(0);
        int int43 = minutes2.size();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2M" + "'", str10, "PT2M");
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2M" + "'", str21, "PT2M");
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        int int3 = minutes0.size();
        org.joda.time.Minutes minutes5 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType6 = minutes0.getFieldType();
        org.joda.time.Minutes minutes8 = minutes0.plus((-12));
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(minutes8);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes1 = minutes0.negated();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes0);
        org.joda.time.MutablePeriod mutablePeriod3 = minutes2.toMutablePeriod();
        org.joda.time.PeriodType periodType4 = minutes2.getPeriodType();
        org.joda.time.Duration duration5 = minutes2.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration5);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = minutes3.get(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = minutes3.getFieldType();
        int int7 = minutes2.get(durationFieldType6);
        org.joda.time.Minutes minutes9 = minutes2.plus((-1));
        org.joda.time.Minutes minutes11 = minutes2.minus((int) (short) 10);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((-2147483648));
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.MutablePeriod mutablePeriod15 = minutes14.toMutablePeriod();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes17 = minutes14.plus(minutes16);
        org.joda.time.Minutes minutes18 = minutes11.minus(minutes16);
        java.lang.Class<?> wildcardClass19 = minutes11.getClass();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }
}


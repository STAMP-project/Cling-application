import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = partial1.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial17.indexOf(dateTimeFieldType24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial17.minus(readablePeriod27);
        boolean boolean29 = partial1.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial1.toString(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = partial3.toString("hi!", locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        int int23 = partial12.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial12.minus(readablePeriod24);
        boolean boolean26 = partial1.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = partial12.getFormatter();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(dateTimeFormatter27);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial14.withChronologyRetainFields(chronology15);
        boolean boolean17 = partial10.isAfter((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        int int19 = partial1.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str20 = partial14.toString();
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = partial21.indexOf(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        org.joda.time.Partial partial27 = partial10.without(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial29.withChronologyRetainFields(chronology30);
        java.util.Locale locale33 = null;
        java.lang.String str34 = partial31.toString("[]", locale33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial31.plus(readablePeriod35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial44.withChronologyRetainFields(chronology45);
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial55.withChronologyRetainFields(chronology56);
        boolean boolean58 = partial51.isAfter((org.joda.time.ReadablePartial) partial55);
        boolean boolean59 = partial40.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = partial40.isSupported(dateTimeFieldType60);
        boolean boolean62 = partial31.equals((java.lang.Object) dateTimeFieldType60);
        org.joda.time.Chronology chronology63 = partial31.getChronology();
        org.joda.time.Partial partial64 = partial10.withChronologyRetainFields(chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = partial10.toString(dateTimeFormatter65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property68 = partial10.property(dateTimeFieldType67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial1.toString(dateTimeFormatter8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial1.getFormatter();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        java.lang.String str17 = partial16.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        boolean boolean23 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        java.lang.String str26 = partial25.toString();
        int int27 = partial16.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        boolean boolean39 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = partial25.isMatch((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean42 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial45 = partial1.with(dateTimeFieldType43, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial10.toString(dateTimeFormatter26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = partial10.toString(dateTimeFormatter28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial10.minus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial10.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial10.withPeriodAdded(readablePeriod34, 0);
        boolean boolean37 = partial1.isBefore((org.joda.time.ReadablePartial) partial10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField39 = partial10.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeField[] dateTimeFieldArray1 = partial0.getFields();
        org.joda.time.Partial partial2 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = partial6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        boolean boolean20 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean21 = partial6.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial6.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial6.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial6.getFieldTypes();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        java.lang.String str30 = partial29.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        boolean boolean36 = partial29.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        java.lang.String str39 = partial38.toString();
        int int40 = partial29.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial38.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial38.getFieldTypes();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        int int47 = partial44.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial44.getFieldTypes();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        boolean boolean52 = partial50.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology53 = partial50.getChronology();
        int[] intArray54 = partial50.getValues();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        boolean boolean58 = partial56.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology59 = partial56.getChronology();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldTypeArray48, intArray54, chronology59);
        int[] intArray61 = new int[] {};
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray48, intArray61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        org.joda.time.Partial partial68 = partial64.without(dateTimeFieldType67);
        org.joda.time.Chronology chronology69 = partial68.getChronology();
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray61, chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = partial74.toDateTime(readableInstant75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = partial78.withChronologyRetainFields(chronology79);
        boolean boolean81 = partial74.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology82 = partial78.getChronology();
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray61, chronology82);
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology82);
        boolean boolean85 = partial0.equals((java.lang.Object) chronology82);
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology82);
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology82);
        org.junit.Assert.assertNotNull(dateTimeFieldArray1);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int[] intArray6 = partial5.getValues();
        int[] intArray7 = partial5.getValues();
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        boolean boolean26 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial12.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial29);
        java.lang.String str31 = partial29.toString();
        org.joda.time.Chronology chronology32 = partial29.getChronology();
        org.joda.time.Partial partial33 = partial8.withChronologyRetainFields(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial8.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial8.withPeriodAdded(readablePeriod37, (int) (short) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        int int51 = partial48.size();
        boolean boolean52 = partial45.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        java.lang.String str55 = partial54.toString();
        int int56 = partial45.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial58.plus(readablePeriod59);
        int int61 = partial58.size();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        boolean boolean68 = partial58.isMatch((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = partial54.isMatch((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime70 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        int int75 = partial72.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = partial72.getFieldTypes();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        boolean boolean80 = partial78.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology81 = partial78.getChronology();
        int[] intArray82 = partial78.getValues();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        boolean boolean86 = partial84.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology87 = partial84.getChronology();
        org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray82, chronology87);
        org.joda.time.Partial partial89 = partial41.withChronologyRetainFields(chronology87);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Partial partial91 = partial89.plus(readablePeriod90);
        int[] intArray92 = partial89.getValues();
        org.joda.time.ReadablePeriod readablePeriod93 = null;
        org.joda.time.Partial partial95 = partial89.withPeriodAdded(readablePeriod93, (int) (byte) 1);
        boolean boolean96 = partial39.isEqual((org.joda.time.ReadablePartial) partial95);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        int int12 = partial9.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        boolean boolean19 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial5.toString(dateTimeFormatter21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial5.toString(dateTimeFormatter23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial5.minus(readablePeriod25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        org.joda.time.Partial partial28 = partial5.without(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        int int9 = partial6.size();
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        int int15 = partial12.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = partial12.getFieldTypes();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        boolean boolean20 = partial18.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology21 = partial18.getChronology();
        int[] intArray22 = partial18.getValues();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        boolean boolean26 = partial24.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology27 = partial24.getChronology();
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray22, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial6.equals((java.lang.Object) chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 100, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        java.util.Locale locale6 = null;
        java.lang.String str7 = partial1.toString("[]", locale6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        java.lang.String str10 = partial9.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        int int15 = partial12.size();
        boolean boolean16 = partial9.isAfter((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        java.lang.String str19 = partial18.toString();
        int int20 = partial9.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        boolean boolean32 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime31);
        int int34 = partial18.size();
        boolean boolean35 = partial1.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        java.lang.String str38 = partial37.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        boolean boolean44 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        java.lang.String str47 = partial46.toString();
        int int48 = partial37.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        boolean boolean60 = partial50.isMatch((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime59);
        int int62 = partial46.size();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial46.minus(readablePeriod63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        int int75 = partial72.size();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial77.plus(readablePeriod78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        boolean boolean82 = partial72.isMatch((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial68.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = null;
        java.lang.String str85 = partial68.toString(dateTimeFormatter84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = null;
        java.lang.String str87 = partial68.toString(dateTimeFormatter86);
        int[] intArray88 = partial68.getValues();
        int[] intArray89 = partial68.getValues();
        boolean boolean90 = partial46.isAfter((org.joda.time.ReadablePartial) partial68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = null;
        java.lang.String str92 = partial46.toString(dateTimeFormatter91);
        boolean boolean93 = partial18.isEqual((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray94 = partial18.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[]" + "'", str85, "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[]" + "'", str87, "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[]" + "'", str92, "[]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray94);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial28.plus(readablePeriod44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        boolean boolean48 = partial3.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        java.lang.String str51 = partial50.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        int int61 = partial50.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial59.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = partial59.getFieldTypes();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        int int68 = partial65.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial65.getFieldTypes();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        boolean boolean73 = partial71.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology74 = partial71.getChronology();
        int[] intArray75 = partial71.getValues();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        boolean boolean79 = partial77.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology80 = partial77.getChronology();
        org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray75, chronology80);
        int[] intArray82 = new int[] {};
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = partial85.withChronologyRetainFields(chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        org.joda.time.Partial partial89 = partial85.without(dateTimeFieldType88);
        org.joda.time.Chronology chronology90 = partial89.getChronology();
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray82, chronology90);
        org.joda.time.Partial partial92 = partial3.withChronologyRetainFields(chronology90);
        java.lang.String str93 = partial92.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = null;
        boolean boolean95 = partial92.isSupported(dateTimeFieldType94);
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property97 = partial92.property(dateTimeFieldType96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[]" + "'", str93, "[]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        java.lang.String str31 = partial30.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        java.lang.String str40 = partial39.toString();
        int int41 = partial30.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = partial3.isSupported(dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        org.joda.time.Partial partial60 = partial3.without(dateTimeFieldType59);
        org.joda.time.DateTimeField[] dateTimeFieldArray61 = partial3.getFields();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial3.withPeriodAdded(readablePeriod62, 0);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        java.lang.String str67 = partial66.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        boolean boolean73 = partial66.isAfter((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        java.lang.String str76 = partial75.toString();
        int int77 = partial66.compareTo((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial79.plus(readablePeriod80);
        int int82 = partial79.size();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial86 = partial84.plus(readablePeriod85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = partial86.toDateTime(readableInstant87);
        boolean boolean89 = partial79.isMatch((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = partial75.isMatch((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = null;
        int int92 = partial75.indexOf(dateTimeFieldType91);
        boolean boolean93 = partial3.isBefore((org.joda.time.ReadablePartial) partial75);
        java.lang.String str94 = partial75.toString();
        java.lang.Class<?> wildcardClass95 = partial75.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTimeFieldArray61);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[]" + "'", str94, "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial3.minus(readablePeriod55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial56.minus(readablePeriod57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int60 = partial56.get(dateTimeFieldType59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial58);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        boolean boolean25 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = partial11.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial11.toString(dateTimeFormatter27);
        java.lang.String str30 = partial11.toString("[]");
        boolean boolean31 = partial1.isMatch((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        java.lang.String str34 = partial33.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        int int44 = partial33.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int58 = partial42.size();
        org.joda.time.Partial partial59 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.minus(readablePeriod60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        boolean boolean64 = partial59.isMatch((org.joda.time.ReadablePartial) partial63);
        java.lang.String str65 = partial63.toStringList();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.plus(readablePeriod68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = partial69.toDateTime(readableInstant70);
        boolean boolean72 = partial63.isMatch((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime73 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology74 = partial11.getChronology();
        java.lang.String str75 = partial11.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[]" + "'", str75, "[]");
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial10.toString(dateTimeFormatter26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = partial10.toString(dateTimeFormatter28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial10.minus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial10.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial10.withPeriodAdded(readablePeriod34, 0);
        boolean boolean37 = partial1.isBefore((org.joda.time.ReadablePartial) partial10);
        java.util.Locale locale39 = null;
        java.lang.String str40 = partial1.toString("[]", locale39);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = partial1.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial17.indexOf(dateTimeFieldType24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial17.minus(readablePeriod27);
        boolean boolean29 = partial1.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial28.plus(readablePeriod30);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial34 = partial28.withFieldAdded(durationFieldType32, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial23.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial27.without(dateTimeFieldType28);
        boolean boolean30 = partial3.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, 100);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial27.withPeriodAdded(readablePeriod34, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType38 = partial36.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        java.lang.String str14 = partial10.toStringList();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial17 = partial10.withFieldAdded(durationFieldType15, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        java.lang.String str79 = partial78.toString();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial83 = partial81.plus(readablePeriod82);
        int int84 = partial81.size();
        boolean boolean85 = partial78.isAfter((org.joda.time.ReadablePartial) partial81);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology86);
        java.lang.String str88 = partial87.toString();
        int int89 = partial78.compareTo((org.joda.time.ReadablePartial) partial87);
        java.lang.String str90 = partial78.toString();
        boolean boolean91 = partial37.isBefore((org.joda.time.ReadablePartial) partial78);
        java.lang.String str92 = partial37.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[]" + "'", str79, "[]");
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[]" + "'", str88, "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[]" + "'", str90, "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[]" + "'", str92, "[]");
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial27.withChronologyRetainFields(chronology28);
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial27);
        boolean boolean31 = partial12.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial12.isSupported(dateTimeFieldType32);
        boolean boolean34 = partial3.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial3.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial3.withPeriodAdded(readablePeriod38, (int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial3.plus(readablePeriod41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial3.toString(dateTimeFormatter43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType46 = partial3.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial3.plus(readablePeriod9);
        org.joda.time.Chronology chronology11 = partial3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        boolean boolean29 = partial19.isMatch((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean30 = partial15.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial15.plus(readablePeriod31);
        java.lang.String str33 = partial32.toString();
        java.lang.String str34 = partial32.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        boolean boolean46 = partial36.isMatch((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = partial7.getField((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial7 = partial3.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        boolean boolean25 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = partial11.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial11.plus(readablePeriod27);
        java.lang.String str29 = partial28.toString();
        java.lang.String str30 = partial28.toString();
        int int31 = partial7.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial34 = partial28.withFieldAdded(durationFieldType32, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial7.indexOf(dateTimeFieldType8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = partial7.getField((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        boolean boolean9 = partial7.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology10 = partial7.getChronology();
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray11, chronology16);
        int[] intArray18 = new int[] {};
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        int int24 = partial21.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial21.getFieldTypes();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        boolean boolean29 = partial27.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology30 = partial27.getChronology();
        int[] intArray31 = partial27.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        boolean boolean35 = partial33.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology36 = partial33.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray31, chronology36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray31);
        org.joda.time.Chronology chronology39 = partial38.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial28.plus(readablePeriod44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        boolean boolean48 = partial3.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = partial49.indexOf(dateTimeFieldType50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial49.minus(readablePeriod52);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(partial53);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        boolean boolean32 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial18.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial18.plus(readablePeriod34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        java.lang.String str38 = partial37.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        boolean boolean44 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        java.lang.String str47 = partial46.toString();
        int int48 = partial37.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        boolean boolean60 = partial50.isMatch((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime59);
        int int62 = partial46.size();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial46.minus(readablePeriod63);
        boolean boolean65 = partial35.isMatch((org.joda.time.ReadablePartial) partial64);
        boolean boolean66 = partial10.equals((java.lang.Object) partial64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial69 = partial10.withPeriodAdded(readablePeriod67, (int) '#');
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial73 = partial71.plus(readablePeriod72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        boolean boolean76 = partial10.isMatch(readableInstant74);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial16.minus(readablePeriod18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = partial19.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial19.getFormatter();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        java.lang.String str28 = partial27.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        boolean boolean34 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        int int38 = partial27.compareTo((org.joda.time.ReadablePartial) partial36);
        java.lang.String str39 = partial36.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = partial36.getFormatter();
        boolean boolean41 = partial25.isMatch((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial43.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial45.withPeriodAdded(readablePeriod46, (-1));
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        org.joda.time.Partial partial51 = partial49.without(dateTimeFieldType50);
        boolean boolean52 = partial25.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial61.withChronologyRetainFields(chronology62);
        boolean boolean64 = partial57.isAfter((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial72.withChronologyRetainFields(chronology73);
        boolean boolean75 = partial68.isAfter((org.joda.time.ReadablePartial) partial72);
        boolean boolean76 = partial57.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial57.plus(readablePeriod77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        int int80 = partial78.indexOf(dateTimeFieldType79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(chronology81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = partial82.withChronologyRetainFields(chronology83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        org.joda.time.Partial partial86 = partial82.without(dateTimeFieldType85);
        org.joda.time.Chronology chronology87 = partial86.getChronology();
        org.joda.time.Partial partial88 = new org.joda.time.Partial(chronology87);
        org.joda.time.Partial partial89 = partial78.withChronologyRetainFields(chronology87);
        org.joda.time.Partial partial90 = new org.joda.time.Partial(chronology87);
        org.joda.time.Partial partial91 = partial53.withChronologyRetainFields(chronology87);
        org.joda.time.Partial partial92 = partial19.withChronologyRetainFields(chronology87);
        int[] intArray93 = partial19.getValues();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean10 = partial8.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology11 = partial8.getChronology();
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int[] intArray13 = partial12.getValues();
        int[] intArray14 = partial12.getValues();
        org.joda.time.Partial partial15 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial12);
        boolean boolean16 = partial3.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(dateTimeFormatter18);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial10.getFormatter();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        boolean boolean32 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial18.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial18.toString(dateTimeFormatter34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial18.toString(dateTimeFormatter36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial18.without(dateTimeFieldType38);
        java.lang.String str40 = partial39.toString();
        boolean boolean41 = partial10.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        org.joda.time.Partial partial47 = partial43.without(dateTimeFieldType46);
        org.joda.time.Chronology chronology48 = partial47.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial49.getFieldTypes();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial52.plus(readablePeriod53);
        int int55 = partial52.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial52.getFieldTypes();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        boolean boolean60 = partial58.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology61 = partial58.getChronology();
        int[] intArray62 = partial58.getValues();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        boolean boolean66 = partial64.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology67 = partial64.getChronology();
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray62, chronology67);
        int[] intArray69 = new int[] {};
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        int int75 = partial72.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = partial72.getFieldTypes();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        boolean boolean80 = partial78.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology81 = partial78.getChronology();
        int[] intArray82 = partial78.getValues();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        boolean boolean86 = partial84.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology87 = partial84.getChronology();
        org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray82, chronology87);
        org.joda.time.Partial partial89 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray82);
        org.joda.time.Partial partial90 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray82);
        org.joda.time.Partial partial91 = new org.joda.time.Partial();
        org.joda.time.DateTimeField[] dateTimeFieldArray92 = partial91.getFields();
        org.joda.time.Partial partial93 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial91);
        int[] intArray94 = partial93.getValues();
        org.joda.time.Partial partial95 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray94);
        boolean boolean96 = partial10.isMatch((org.joda.time.ReadablePartial) partial95);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeFieldArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial6.withChronologyRetainFields(chronology7);
        java.util.Locale locale10 = null;
        java.lang.String str11 = partial8.toString("[]", locale10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial8.isSupported(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial8.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial8.withPeriodAdded(readablePeriod16, (int) (byte) 0);
        boolean boolean19 = partial1.isEqual((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        int int24 = partial21.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial21.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = partial21.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = partial21.indexOf(dateTimeFieldType28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial21.minus(readablePeriod31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        boolean boolean50 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = partial36.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial36.toString(dateTimeFormatter52);
        java.lang.String str55 = partial36.toString("[]");
        boolean boolean56 = partial32.isBefore((org.joda.time.ReadablePartial) partial36);
        java.lang.String str57 = partial36.toString();
        boolean boolean58 = partial8.equals((java.lang.Object) partial36);
        org.joda.time.ReadableInstant readableInstant59 = null;
        boolean boolean60 = partial8.isMatch(readableInstant59);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        java.lang.String str33 = partial32.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        boolean boolean39 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        java.lang.String str42 = partial41.toString();
        int int43 = partial32.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        int int48 = partial45.size();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        boolean boolean55 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime54);
        int int57 = partial41.size();
        org.joda.time.Partial partial58 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial58.minus(readablePeriod59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        boolean boolean63 = partial58.isMatch((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial28.isAfter((org.joda.time.ReadablePartial) partial62);
        boolean boolean65 = partial3.isMatch((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DurationFieldType durationFieldType66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial68 = partial62.withFieldAdded(durationFieldType66, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        int int47 = partial36.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        int int52 = partial49.size();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        boolean boolean59 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial63.getFieldTypes();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        boolean boolean71 = partial69.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology72 = partial69.getChronology();
        int[] intArray73 = partial69.getValues();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        boolean boolean77 = partial75.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology78 = partial75.getChronology();
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray67, intArray73, chronology78);
        org.joda.time.Partial partial80 = partial32.withChronologyRetainFields(chronology78);
        boolean boolean81 = partial1.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial83.plus(readablePeriod84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Partial partial89 = new org.joda.time.Partial(chronology88);
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.Partial partial91 = partial89.withChronologyRetainFields(chronology90);
        boolean boolean92 = partial85.isAfter((org.joda.time.ReadablePartial) partial89);
        int int93 = partial32.compareTo((org.joda.time.ReadablePartial) partial85);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray94 = partial32.getFieldTypes();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray94);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = partial10.isSupported(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        boolean boolean38 = partial31.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Partial partial41 = partial10.withChronologyRetainFields(chronology39);
        java.lang.Class<?> wildcardClass42 = partial41.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial27.withChronologyRetainFields(chronology28);
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial27);
        boolean boolean31 = partial12.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial12.isSupported(dateTimeFieldType32);
        boolean boolean34 = partial3.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial3.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial3.withPeriodAdded(readablePeriod38, (int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial3.plus(readablePeriod41);
        org.joda.time.DurationFieldType durationFieldType43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial45 = partial42.withFieldAdded(durationFieldType43, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        java.lang.String str11 = partial3.toStringList();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int[] intArray18 = partial17.getValues();
        int[] intArray19 = partial17.getValues();
        org.joda.time.Partial partial20 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial3.isAfter((org.joda.time.ReadablePartial) partial20);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        java.lang.String str21 = partial20.toString();
        java.lang.String str22 = partial20.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial20.toString(dateTimeFormatter23);
        java.lang.String str25 = partial20.toStringList();
        org.joda.time.Chronology chronology26 = partial20.getChronology();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = partial1.get(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        java.lang.String str33 = partial31.toString();
        int int34 = partial9.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial36.withChronologyRetainFields(chronology37);
        java.util.Locale locale40 = null;
        java.lang.String str41 = partial38.toString("[]", locale40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial38.plus(readablePeriod42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial51.withChronologyRetainFields(chronology52);
        boolean boolean54 = partial47.isAfter((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial56.plus(readablePeriod57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = partial62.withChronologyRetainFields(chronology63);
        boolean boolean65 = partial58.isAfter((org.joda.time.ReadablePartial) partial62);
        boolean boolean66 = partial47.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = partial47.isSupported(dateTimeFieldType67);
        boolean boolean69 = partial38.equals((java.lang.Object) dateTimeFieldType67);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial38.withPeriodAdded(readablePeriod70, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial75 = partial38.withPeriodAdded(readablePeriod73, (int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial38.plus(readablePeriod76);
        boolean boolean78 = partial9.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        boolean boolean80 = partial9.isSupported(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial8.getFieldTypes();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        java.lang.String str7 = partial6.toStringList();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial15.withChronologyRetainFields(chronology16);
        boolean boolean18 = partial11.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial26.withChronologyRetainFields(chronology27);
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial26);
        boolean boolean30 = partial11.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial11.isSupported(dateTimeFieldType31);
        boolean boolean33 = partial6.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean37 = partial35.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology38 = partial35.getChronology();
        int[] intArray39 = partial35.getValues();
        java.lang.String str41 = partial35.toString("[]");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial49.withChronologyRetainFields(chronology50);
        boolean boolean52 = partial45.isAfter((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial60.withChronologyRetainFields(chronology61);
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial60);
        boolean boolean64 = partial45.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        org.joda.time.Partial partial66 = partial45.without(dateTimeFieldType65);
        boolean boolean67 = partial35.isAfter((org.joda.time.ReadablePartial) partial66);
        int int68 = partial6.compareTo((org.joda.time.ReadablePartial) partial35);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        int int17 = partial16.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial19.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial21.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial26.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial28.withPeriodAdded(readablePeriod29, (-1));
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial32.without(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = partial38.toString(dateTimeFormatter40);
        int int42 = partial34.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        int int47 = partial44.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial44.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = partial44.isSupported(dateTimeFieldType49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = partial44.indexOf(dateTimeFieldType51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial44);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial44.minus(readablePeriod54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial57.plus(readablePeriod58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        boolean boolean73 = partial63.isMatch((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = partial59.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = null;
        java.lang.String str76 = partial59.toString(dateTimeFormatter75);
        java.lang.String str78 = partial59.toString("[]");
        boolean boolean79 = partial55.isBefore((org.joda.time.ReadablePartial) partial59);
        java.lang.String str80 = partial59.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        org.joda.time.Partial partial82 = partial59.without(dateTimeFieldType81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial85 = partial59.withPeriodAdded(readablePeriod83, (int) '4');
        boolean boolean86 = partial34.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial87 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial59);
        org.joda.time.DateTimeField[] dateTimeFieldArray88 = partial87.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        org.joda.time.Partial partial90 = partial87.without(dateTimeFieldType89);
        boolean boolean91 = partial24.isBefore((org.joda.time.ReadablePartial) partial90);
        boolean boolean92 = partial16.isMatch((org.joda.time.ReadablePartial) partial24);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = partial24.getValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray88);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = partial1.indexOf(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = partial16.isSupported(dateTimeFieldType21);
        java.lang.String str23 = partial16.toStringList();
        java.lang.String str25 = partial16.toString("[]");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = partial29.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial29.plus(readablePeriod45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        java.lang.String str49 = partial48.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        int int54 = partial51.size();
        boolean boolean55 = partial48.isAfter((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        java.lang.String str58 = partial57.toString();
        int int59 = partial48.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        boolean boolean71 = partial61.isMatch((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = partial57.isMatch((org.joda.time.ReadableInstant) dateTime70);
        int int73 = partial57.size();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial57.minus(readablePeriod74);
        boolean boolean76 = partial46.isMatch((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial16.isMatch((org.joda.time.ReadablePartial) partial75);
        boolean boolean78 = partial1.isEqual((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial16.withPeriodAdded(readablePeriod79, (int) (byte) 1);
        java.lang.String str82 = partial16.toString();
        org.joda.time.DurationFieldType durationFieldType83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial85 = partial16.withFieldAddWrapped(durationFieldType83, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[]" + "'", str82, "[]");
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        boolean boolean32 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial18.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial18.plus(readablePeriod34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        java.lang.String str38 = partial37.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        boolean boolean44 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        java.lang.String str47 = partial46.toString();
        int int48 = partial37.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        boolean boolean60 = partial50.isMatch((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime59);
        int int62 = partial46.size();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial46.minus(readablePeriod63);
        boolean boolean65 = partial35.isMatch((org.joda.time.ReadablePartial) partial64);
        boolean boolean66 = partial10.equals((java.lang.Object) partial64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField68 = partial64.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        boolean boolean27 = partial17.isMatch((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = partial13.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial13.toString(dateTimeFormatter29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial13.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial13.getFieldTypes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial36.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial36.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        boolean boolean60 = partial50.isMatch((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial46.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial46.toString(dateTimeFormatter62);
        java.lang.String str65 = partial46.toString("[]");
        boolean boolean66 = partial36.isMatch((org.joda.time.ReadablePartial) partial46);
        int[] intArray67 = partial36.getValues();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray34, intArray67, chronology79);
        boolean boolean81 = partial1.isBefore((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Partial partial82 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = partial1.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial3.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        int int47 = partial36.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        int int52 = partial49.size();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        boolean boolean59 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial64.withChronologyRetainFields(chronology65);
        java.lang.String str67 = partial64.toStringList();
        int int68 = partial30.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial69 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial64);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial5.plus(readablePeriod6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        boolean boolean11 = partial9.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial9.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.minus(readablePeriod13);
        java.lang.String str15 = partial14.toStringList();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial23.withChronologyRetainFields(chronology24);
        boolean boolean26 = partial19.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial34.withChronologyRetainFields(chronology35);
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial34);
        boolean boolean38 = partial19.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = partial19.isSupported(dateTimeFieldType39);
        boolean boolean41 = partial14.isAfter((org.joda.time.ReadablePartial) partial19);
        boolean boolean42 = partial5.isMatch((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial19.getFieldTypes();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        boolean boolean47 = partial45.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology48 = partial45.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial51.withChronologyRetainFields(chronology52);
        boolean boolean54 = partial49.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        int int62 = partial59.size();
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        boolean boolean64 = partial49.isBefore((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        boolean boolean68 = partial66.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology69 = partial66.getChronology();
        int[] intArray70 = partial66.getValues();
        java.lang.String str72 = partial66.toString("[]");
        boolean boolean73 = partial49.isAfter((org.joda.time.ReadablePartial) partial66);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        int int75 = partial66.indexOf(dateTimeFieldType74);
        boolean boolean76 = partial19.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        org.joda.time.Partial partial78 = partial19.without(dateTimeFieldType77);
        java.lang.String str79 = partial78.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[]" + "'", str79, "[]");
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial3.minus(readablePeriod25);
        java.lang.Class<?> wildcardClass27 = partial26.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial28.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology31 = partial28.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray26, chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray26);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean37 = partial35.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology38 = partial35.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int[] intArray40 = partial39.getValues();
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial43.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = partial43.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = partial43.indexOf(dateTimeFieldType50);
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial43.minus(readablePeriod53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = partial54.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeField[] dateTimeFieldArray57 = partial54.getFields();
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.Partial partial59 = partial41.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property61 = partial41.property(dateTimeFieldType60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(partial59);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        java.lang.String str8 = partial7.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        java.lang.String str17 = partial16.toString();
        int int18 = partial7.compareTo((org.joda.time.ReadablePartial) partial16);
        java.lang.String str19 = partial16.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial22.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial28.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology31 = partial28.getChronology();
        int[] intArray32 = partial28.getValues();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        boolean boolean36 = partial34.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology37 = partial34.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray32, chronology37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray32);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        int[] intArray51 = partial47.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean55 = partial53.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology56 = partial53.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray51, chronology56);
        int[] intArray58 = new int[] {};
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial67.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial63.isAfter((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray58, chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = partial74.withChronologyRetainFields(chronology75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        org.joda.time.Partial partial78 = partial74.without(dateTimeFieldType77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial78.toString(dateTimeFormatter79);
        org.joda.time.Chronology chronology81 = partial78.getChronology();
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray58, chronology81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = partial82.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial86 = partial82.withFieldAdded(durationFieldType84, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        java.lang.String str29 = partial28.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean33 = partial31.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial31.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial31.minus(readablePeriod35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        org.joda.time.Partial partial38 = partial31.without(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        boolean boolean50 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = partial31.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime49);
        int int53 = partial28.size();
        java.lang.String str54 = partial28.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = partial10.toString("", locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        java.lang.String str28 = partial22.toString("[]");
        boolean boolean29 = partial5.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial33.toString(dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial33.toString(dateTimeFormatter51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        org.joda.time.Partial partial54 = partial33.without(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        int int62 = partial59.size();
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        int int67 = partial56.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        boolean boolean79 = partial69.isMatch((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = partial65.isMatch((org.joda.time.ReadableInstant) dateTime78);
        int int81 = partial65.size();
        org.joda.time.Partial partial82 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        boolean boolean83 = partial33.isEqual((org.joda.time.ReadablePartial) partial65);
        boolean boolean84 = partial5.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        java.lang.String str86 = partial85.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = null;
        boolean boolean88 = partial85.isSupported(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[]" + "'", str86, "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial13.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial15.toString("[]", locale17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        boolean boolean22 = partial20.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology23 = partial20.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int[] intArray25 = partial24.getValues();
        int[] intArray26 = partial24.getValues();
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        boolean boolean28 = partial15.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        boolean boolean46 = partial36.isMatch((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean47 = partial32.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial32.toString(dateTimeFormatter48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial32.withPeriodAdded(readablePeriod50, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = partial32.getFieldTypes();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        int int65 = partial62.size();
        boolean boolean66 = partial59.isAfter((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        java.lang.String str69 = partial68.toString();
        int int70 = partial59.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        int int75 = partial72.size();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial77.plus(readablePeriod78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        boolean boolean82 = partial72.isMatch((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial68.isMatch((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime84 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean85 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = partial24.isMatch((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = null;
        java.lang.String str88 = partial24.toString(dateTimeFormatter87);
        boolean boolean89 = partial7.isBefore((org.joda.time.ReadablePartial) partial24);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[]" + "'", str88, "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = partial5.toString(dateTimeFormatter6);
        java.lang.String str8 = partial5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        int int16 = partial13.size();
        boolean boolean17 = partial10.isAfter((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        java.lang.String str20 = partial19.toString();
        int int21 = partial10.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        int int26 = partial23.size();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        boolean boolean33 = partial23.isMatch((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean34 = partial19.isMatch((org.joda.time.ReadableInstant) dateTime32);
        int int35 = partial19.size();
        org.joda.time.Partial partial36 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial19);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.minus(readablePeriod37);
        int int39 = partial5.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial5.minus(readablePeriod40);
        java.lang.String str42 = partial41.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        java.util.Locale locale8 = null;
        java.lang.String str9 = partial5.toString("[]", locale8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = partial5.indexOf(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial5.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        int int24 = partial21.size();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        boolean boolean31 = partial21.isMatch((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean32 = partial17.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial17.toString(dateTimeFormatter33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial17.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial17.minus(readablePeriod37);
        boolean boolean39 = partial13.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = partial13.isSupported(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        boolean boolean11 = partial9.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial9.toString(dateTimeFormatter12);
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial9.minus(readablePeriod15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        boolean boolean34 = partial24.isMatch((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean35 = partial20.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial20.plus(readablePeriod36);
        java.lang.String str38 = partial37.toString();
        java.lang.String str39 = partial37.toString();
        int[] intArray40 = partial37.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial37.getFormatter();
        boolean boolean42 = partial9.equals((java.lang.Object) dateTimeFormatter41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = partial9.indexOf(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        int int36 = partial1.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial39 = partial1.withField(dateTimeFieldType37, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial1.minus(readablePeriod13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        org.joda.time.Partial partial16 = partial14.without(dateTimeFieldType15);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = partial16.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial16.indexOf(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = partial3.isSupported(dateTimeFieldType7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = partial3.toString(dateTimeFormatter9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial3.withPeriodAdded(readablePeriod11, (int) (byte) 0);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = partial3.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.lang.String str22 = partial3.toString("[]");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial24.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = partial24.indexOf(dateTimeFieldType31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial24.minus(readablePeriod34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial35.isSupported(dateTimeFieldType36);
        boolean boolean38 = partial3.equals((java.lang.Object) boolean37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial3.plus(readablePeriod39);
        int int41 = partial40.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray42 = partial40.getFields();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray42);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = partial1.indexOf(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = partial16.isSupported(dateTimeFieldType21);
        java.lang.String str23 = partial16.toStringList();
        java.lang.String str25 = partial16.toString("[]");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = partial29.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial29.plus(readablePeriod45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        java.lang.String str49 = partial48.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        int int54 = partial51.size();
        boolean boolean55 = partial48.isAfter((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        java.lang.String str58 = partial57.toString();
        int int59 = partial48.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        boolean boolean71 = partial61.isMatch((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = partial57.isMatch((org.joda.time.ReadableInstant) dateTime70);
        int int73 = partial57.size();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial57.minus(readablePeriod74);
        boolean boolean76 = partial46.isMatch((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial16.isMatch((org.joda.time.ReadablePartial) partial75);
        boolean boolean78 = partial1.isEqual((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial16.withPeriodAdded(readablePeriod79, (int) (byte) 10);
        java.lang.String str82 = partial16.toStringList();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[]" + "'", str82, "[]");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial35.getFieldTypes();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        int[] intArray51 = partial47.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean55 = partial53.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology56 = partial53.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray51, chronology56);
        int[] intArray58 = new int[] {};
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial61.without(dateTimeFieldType64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray58, chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray58, chronology79);
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology79);
        org.joda.time.Partial partial82 = new org.joda.time.Partial(chronology79);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        int int13 = partial10.size();
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        org.joda.time.Partial partial8 = partial1.without(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        boolean boolean26 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial12.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial29.plus(readablePeriod31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial40.withChronologyRetainFields(chronology41);
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial51.withChronologyRetainFields(chronology52);
        boolean boolean54 = partial47.isAfter((org.joda.time.ReadablePartial) partial51);
        boolean boolean55 = partial36.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial36.plus(readablePeriod56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        int int59 = partial57.indexOf(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial61.without(dateTimeFieldType64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Partial partial68 = partial57.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial68.getFieldTypes();
        boolean boolean70 = partial29.isMatch((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Partial partial71 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial29);
        boolean boolean72 = partial1.isMatch((org.joda.time.ReadablePartial) partial71);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        java.lang.String str21 = partial20.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        int int26 = partial23.size();
        boolean boolean27 = partial20.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        java.lang.String str30 = partial29.toString();
        int int31 = partial20.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        java.lang.String str51 = partial50.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        int int61 = partial50.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        boolean boolean73 = partial63.isMatch((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = partial59.isMatch((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime76 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        int int77 = partial5.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial80 = partial29.with(dateTimeFieldType78, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial5.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology20 = partial5.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial22.without(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = partial26.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        java.lang.String str30 = partial29.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        boolean boolean36 = partial29.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        java.lang.String str39 = partial38.toString();
        int int40 = partial29.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = partial29.indexOf(dateTimeFieldType41);
        boolean boolean43 = partial26.isEqual((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial44 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial29);
        boolean boolean45 = partial5.isAfter((org.joda.time.ReadablePartial) partial44);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        java.lang.String str7 = partial6.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial6.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial11 = partial6.withPeriodAdded(readablePeriod9, 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial6.toString(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial20.plus(readablePeriod22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial31.withChronologyRetainFields(chronology32);
        boolean boolean34 = partial27.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial42.withChronologyRetainFields(chronology43);
        boolean boolean45 = partial38.isAfter((org.joda.time.ReadablePartial) partial42);
        boolean boolean46 = partial27.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial27.plus(readablePeriod47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = partial48.indexOf(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        org.joda.time.Partial partial56 = partial52.without(dateTimeFieldType55);
        org.joda.time.Chronology chronology57 = partial56.getChronology();
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Partial partial59 = partial48.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = partial59.getFieldTypes();
        boolean boolean61 = partial20.isMatch((org.joda.time.ReadablePartial) partial59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial59.toString(dateTimeFormatter62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField65 = partial59.getField((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial28.plus(readablePeriod44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        boolean boolean48 = partial3.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = partial49.indexOf(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = partial49.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.minus(readablePeriod28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean32 = partial27.isMatch((org.joda.time.ReadablePartial) partial31);
        java.lang.String str33 = partial31.toStringList();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        boolean boolean40 = partial31.isMatch((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial31.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        boolean boolean60 = partial50.isMatch((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial46.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial46.toString(dateTimeFormatter62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial46.withPeriodAdded(readablePeriod64, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial46.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial70 = partial46.withPeriodAdded(readablePeriod68, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial73 = partial46.withPeriodAdded(readablePeriod71, (int) (short) 100);
        boolean boolean74 = partial31.isBefore((org.joda.time.ReadablePartial) partial73);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology19 = partial5.getChronology();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        int int12 = partial9.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        boolean boolean19 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial5.toString(dateTimeFormatter21);
        java.lang.String str24 = partial5.toString("[]");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        org.joda.time.Partial partial30 = partial26.without(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = partial30.getChronology();
        org.joda.time.Partial partial32 = partial5.withChronologyRetainFields(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 1, chronology31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(partial32);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        int[] intArray13 = partial12.getValues();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial12.plus(readablePeriod14);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial15);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = partial3.indexOf(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        java.lang.String str25 = partial24.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        int int30 = partial27.size();
        boolean boolean31 = partial24.isAfter((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial32.without(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        boolean boolean52 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial38.plus(readablePeriod54);
        java.lang.String str56 = partial55.toString();
        java.lang.String str57 = partial55.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = partial55.getFormatter();
        org.joda.time.Partial partial59 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = partial59.getFieldTypes();
        org.joda.time.Chronology chronology61 = partial59.getChronology();
        boolean boolean62 = partial32.equals((java.lang.Object) chronology61);
        boolean boolean63 = partial3.equals((java.lang.Object) partial32);
        org.joda.time.DateTimeField[] dateTimeFieldArray64 = partial3.getFields();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray64);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        java.lang.String str33 = partial31.toString();
        int int34 = partial9.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial31.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial31.minus(readablePeriod37);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial38);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = partial1.getFields();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        java.lang.String str34 = partial33.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        int int44 = partial33.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int58 = partial42.size();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial42.minus(readablePeriod59);
        boolean boolean61 = partial31.isMatch((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial1.isMatch((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology63 = partial60.getChronology();
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = partial64.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial64.without(dateTimeFieldType66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.minus(readablePeriod68);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = partial10.getFields();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        org.joda.time.Partial partial21 = partial17.without(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = partial21.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology22);
        org.joda.time.Partial partial25 = partial10.withChronologyRetainFields(chronology22);
        java.lang.Class<?> wildcardClass26 = chronology22.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        boolean boolean5 = partial1.isSupported(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        int int16 = partial13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        boolean boolean23 = partial13.isMatch((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean24 = partial9.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial9.toString(dateTimeFormatter25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial9.toString(dateTimeFormatter27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        org.joda.time.Partial partial30 = partial9.without(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        java.lang.String str33 = partial32.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        boolean boolean39 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        java.lang.String str42 = partial41.toString();
        int int43 = partial32.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        int int48 = partial45.size();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        boolean boolean55 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime54);
        int int57 = partial41.size();
        org.joda.time.Partial partial58 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        boolean boolean59 = partial9.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.plus(readablePeriod68);
        int int70 = partial67.size();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = partial74.toDateTime(readableInstant75);
        boolean boolean77 = partial67.isMatch((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = partial63.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial63.toString(dateTimeFormatter79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial63.withPeriodAdded(readablePeriod81, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray84 = partial63.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial63.withPeriodAdded(readablePeriod85, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial90 = partial63.withPeriodAdded(readablePeriod88, (int) (short) 100);
        int int91 = partial41.compareTo((org.joda.time.ReadablePartial) partial63);
        boolean boolean92 = partial1.isMatch((org.joda.time.ReadablePartial) partial63);
        java.util.Locale locale94 = null;
        java.lang.String str95 = partial1.toString("[]", locale94);
        java.util.Locale locale97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = partial1.toString("", locale97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[]" + "'", str95, "[]");
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        java.lang.String str9 = partial8.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        boolean boolean15 = partial8.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        java.lang.String str18 = partial17.toString();
        int int19 = partial8.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial8.indexOf(dateTimeFieldType20);
        boolean boolean22 = partial5.isEqual((org.joda.time.ReadablePartial) partial8);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = partial5.indexOf(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial5.without(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        org.joda.time.Partial partial28 = partial5.without(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial31 = partial28.withField(dateTimeFieldType29, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial26.withChronologyRetainFields(chronology27);
        java.util.Locale locale30 = null;
        java.lang.String str31 = partial28.toString("[]", locale30);
        boolean boolean32 = partial24.isEqual((org.joda.time.ReadablePartial) partial28);
        int int33 = partial28.size();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial28.minus(readablePeriod34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = partial35.toString("[]", locale37);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = partial1.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        int int6 = partial1.indexOf(dateTimeFieldType5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = partial1.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial35.getFieldTypes();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        int[] intArray51 = partial47.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean55 = partial53.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology56 = partial53.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray51, chronology56);
        int[] intArray58 = new int[] {};
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial61.without(dateTimeFieldType64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray58, chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray58, chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        org.joda.time.Partial partial82 = partial80.without(dateTimeFieldType81);
        org.joda.time.DateTimeField[] dateTimeFieldArray83 = partial82.getFields();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(dateTimeFieldArray83);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = partial13.indexOf(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial13.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = partial13.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial13.indexOf(dateTimeFieldType20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = partial13.indexOf(dateTimeFieldType22);
        int[] intArray24 = partial13.getValues();
        org.joda.time.Chronology chronology25 = partial13.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial5.plus(readablePeriod6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        boolean boolean11 = partial9.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial9.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.minus(readablePeriod13);
        java.lang.String str15 = partial14.toStringList();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial23.withChronologyRetainFields(chronology24);
        boolean boolean26 = partial19.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial34.withChronologyRetainFields(chronology35);
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial34);
        boolean boolean38 = partial19.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = partial19.isSupported(dateTimeFieldType39);
        boolean boolean41 = partial14.isAfter((org.joda.time.ReadablePartial) partial19);
        boolean boolean42 = partial5.isMatch((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DurationFieldType durationFieldType43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial45 = partial19.withFieldAdded(durationFieldType43, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        org.joda.time.Partial partial8 = partial1.without(dateTimeFieldType7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = partial8.getFields();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        boolean boolean13 = partial11.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology14 = partial11.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial17.withChronologyRetainFields(chronology18);
        boolean boolean20 = partial15.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        boolean boolean30 = partial15.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        boolean boolean34 = partial32.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology35 = partial32.getChronology();
        int[] intArray36 = partial32.getValues();
        java.lang.String str38 = partial32.toString("[]");
        boolean boolean39 = partial15.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        int int50 = partial47.size();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial52.plus(readablePeriod53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        boolean boolean57 = partial47.isMatch((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = partial43.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = null;
        java.lang.String str60 = partial43.toString(dateTimeFormatter59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = partial43.toString(dateTimeFormatter61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        org.joda.time.Partial partial64 = partial43.without(dateTimeFieldType63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        java.lang.String str67 = partial66.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        boolean boolean73 = partial66.isAfter((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        java.lang.String str76 = partial75.toString();
        int int77 = partial66.compareTo((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial79.plus(readablePeriod80);
        int int82 = partial79.size();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial86 = partial84.plus(readablePeriod85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = partial86.toDateTime(readableInstant87);
        boolean boolean89 = partial79.isMatch((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = partial75.isMatch((org.joda.time.ReadableInstant) dateTime88);
        int int91 = partial75.size();
        org.joda.time.Partial partial92 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        boolean boolean93 = partial43.isEqual((org.joda.time.ReadablePartial) partial75);
        boolean boolean94 = partial15.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Partial partial95 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        java.lang.String str96 = partial95.toString();
        boolean boolean97 = partial8.isBefore((org.joda.time.ReadablePartial) partial95);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[]" + "'", str96, "[]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        boolean boolean18 = partial16.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology19 = partial16.getChronology();
        int[] intArray20 = partial16.getValues();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray20, chronology25);
        int[] intArray27 = new int[] {};
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial30.getFieldTypes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        boolean boolean38 = partial36.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology39 = partial36.getChronology();
        int[] intArray40 = partial36.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        boolean boolean44 = partial42.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology45 = partial42.getChronology();
        org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldTypeArray34, intArray40, chronology45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray40);
        org.joda.time.Partial partial48 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray40);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.DateTimeField[] dateTimeFieldArray50 = partial49.getFields();
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial49);
        int[] intArray52 = partial51.getValues();
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial53.getFieldTypes();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        boolean boolean58 = partial56.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology59 = partial56.getChronology();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int[] intArray61 = partial60.getValues();
        int[] intArray62 = partial60.getValues();
        org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray62);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeFieldArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial5.plus(readablePeriod6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = partial7.isSupported(dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        org.joda.time.Partial partial11 = partial7.without(dateTimeFieldType10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial22.without(dateTimeFieldType23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial24.toString(dateTimeFormatter25);
        int int27 = partial11.compareTo((org.joda.time.ReadablePartial) partial24);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        int int47 = partial36.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        int int52 = partial49.size();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        boolean boolean59 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial63.getFieldTypes();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        boolean boolean71 = partial69.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology72 = partial69.getChronology();
        int[] intArray73 = partial69.getValues();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        boolean boolean77 = partial75.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology78 = partial75.getChronology();
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray67, intArray73, chronology78);
        org.joda.time.Partial partial80 = partial32.withChronologyRetainFields(chronology78);
        boolean boolean81 = partial1.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial83 = partial1.minus(readablePeriod82);
        java.lang.Class<?> wildcardClass84 = partial1.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        java.lang.String str19 = partial18.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        int int24 = partial21.size();
        boolean boolean25 = partial18.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        java.lang.String str28 = partial27.toString();
        int int29 = partial18.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        int int34 = partial31.size();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        boolean boolean41 = partial31.isMatch((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = partial27.isMatch((org.joda.time.ReadableInstant) dateTime40);
        int int43 = partial27.size();
        org.joda.time.Partial partial44 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.minus(readablePeriod45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        boolean boolean49 = partial44.isMatch((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial44.getFieldTypes();
        boolean boolean51 = partial16.isEqual((org.joda.time.ReadablePartial) partial44);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial54 = partial44.withPeriodAdded(readablePeriod52, (int) '4');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(partial54);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str37 = partial16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial16.without(dateTimeFieldType38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        org.joda.time.Partial partial43 = partial39.without(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        int int54 = partial51.size();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial56.plus(readablePeriod57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        boolean boolean61 = partial51.isMatch((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = partial47.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial47.toString(dateTimeFormatter63);
        java.lang.String str66 = partial47.toString("[]");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        org.joda.time.Partial partial72 = partial68.without(dateTimeFieldType71);
        org.joda.time.Chronology chronology73 = partial72.getChronology();
        org.joda.time.Partial partial74 = partial47.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType77 = partial75.getFieldType((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = partial16.indexOf(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        boolean boolean9 = partial7.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology10 = partial7.getChronology();
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray11, chronology16);
        int[] intArray18 = new int[] {};
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        int int24 = partial21.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial21.getFieldTypes();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        boolean boolean29 = partial27.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology30 = partial27.getChronology();
        int[] intArray31 = partial27.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        boolean boolean35 = partial33.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology36 = partial33.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray31, chronology36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray31);
        org.joda.time.Chronology chronology39 = partial38.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        int int51 = partial48.size();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        boolean boolean58 = partial48.isMatch((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = partial44.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial44.toString(dateTimeFormatter60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial44.toString(dateTimeFormatter62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial44.minus(readablePeriod64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial44.without(dateTimeFieldType66);
        org.joda.time.Chronology chronology68 = partial67.getChronology();
        org.joda.time.Partial partial69 = partial40.withChronologyRetainFields(chronology68);
        org.joda.time.DurationFieldType durationFieldType70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial72 = partial40.withFieldAdded(durationFieldType70, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(partial69);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial1.minus(readablePeriod13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial28.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology31 = partial28.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray26, chronology31);
        org.joda.time.Partial partial33 = partial14.withChronologyRetainFields(chronology31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology31);
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology31);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(partial33);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial1.minus(readablePeriod18);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = partial10.isSupported(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        boolean boolean38 = partial31.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Partial partial41 = partial10.withChronologyRetainFields(chronology39);
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology39);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial10 = partial7.withPeriodAdded(readablePeriod8, (int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        org.joda.time.Partial partial12 = partial10.without(dateTimeFieldType11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNull(dateTimeFormatter13);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        org.joda.time.Partial partial14 = partial1.without(dateTimeFieldType13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        org.joda.time.Partial partial16 = partial14.without(dateTimeFieldType15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean21 = partial19.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        java.lang.String str24 = partial23.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        java.lang.String str33 = partial32.toString();
        int int34 = partial23.compareTo((org.joda.time.ReadablePartial) partial32);
        boolean boolean35 = partial19.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial23.toString(dateTimeFormatter36);
        boolean boolean38 = partial16.isEqual((org.joda.time.ReadablePartial) partial23);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        boolean boolean6 = partial4.equals((java.lang.Object) 0.0f);
        int int7 = partial1.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        org.joda.time.Partial partial9 = partial1.without(dateTimeFieldType8);
        java.lang.String str10 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        org.joda.time.Partial partial12 = partial1.without(dateTimeFieldType11);
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = partial1.toString("hi!", locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial12);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        int int24 = partial21.size();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        boolean boolean31 = partial21.isMatch((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean32 = partial17.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial17.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        java.lang.String str50 = partial49.toString();
        int int51 = partial40.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial58.plus(readablePeriod59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        boolean boolean63 = partial53.isMatch((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime66 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime67 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial82 = partial80.plus(readablePeriod81);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = partial82.toDateTime(readableInstant83);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Partial partial88 = partial86.withChronologyRetainFields(chronology87);
        boolean boolean89 = partial82.isAfter((org.joda.time.ReadablePartial) partial86);
        boolean boolean90 = partial71.isBefore((org.joda.time.ReadablePartial) partial86);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = null;
        org.joda.time.Partial partial92 = partial71.without(dateTimeFieldType91);
        int int93 = partial10.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.Partial partial95 = partial71.minus(readablePeriod94);
        org.joda.time.ReadablePeriod readablePeriod96 = null;
        org.joda.time.Partial partial97 = partial95.plus(readablePeriod96);
        org.joda.time.DateTimeFieldType dateTimeFieldType98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int99 = partial97.get(dateTimeFieldType98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertNotNull(partial97);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        java.util.Locale locale8 = null;
        java.lang.String str9 = partial5.toString("[]", locale8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial5.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        java.lang.String str14 = partial13.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        boolean boolean20 = partial13.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        java.lang.String str32 = partial31.toString();
        int int33 = partial22.compareTo((org.joda.time.ReadablePartial) partial31);
        java.lang.String str34 = partial31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        boolean boolean52 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial38.plus(readablePeriod54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial57.plus(readablePeriod58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        java.lang.String str62 = partial61.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int int67 = partial64.size();
        boolean boolean68 = partial61.isAfter((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        java.lang.String str71 = partial70.toString();
        int int72 = partial61.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        int int77 = partial74.size();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial79.plus(readablePeriod80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        boolean boolean84 = partial74.isMatch((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean85 = partial70.isMatch((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime87 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime88 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime89 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime90 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        boolean boolean11 = partial9.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial9.toString(dateTimeFormatter12);
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial9);
        java.lang.String str16 = partial7.toString("[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial10 = partial7.withPeriodAdded(readablePeriod8, (int) '#');
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = partial7.toString("hi!", locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial10);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        boolean boolean6 = partial4.equals((java.lang.Object) 0.0f);
        int int7 = partial1.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = partial1.isSupported(dateTimeFieldType8);
        java.lang.String str10 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial12);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial23.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial27.without(dateTimeFieldType28);
        boolean boolean30 = partial3.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        java.lang.String str32 = partial3.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial3.without(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        int int47 = partial36.compareTo((org.joda.time.ReadablePartial) partial45);
        java.lang.String str48 = partial45.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial45.getFieldTypes();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        int int54 = partial51.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = partial51.getFieldTypes();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        boolean boolean59 = partial57.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology60 = partial57.getChronology();
        int[] intArray61 = partial57.getValues();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        boolean boolean65 = partial63.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology66 = partial63.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray61, chronology66);
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray49, intArray61);
        int int69 = partial68.size();
        int int70 = partial3.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        int int72 = partial68.indexOf(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial3.plus(readablePeriod9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial3.toString(dateTimeFormatter11);
        int[] intArray13 = partial3.getValues();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        java.lang.String str31 = partial30.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        java.lang.String str40 = partial39.toString();
        int int41 = partial30.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = partial3.isSupported(dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        org.joda.time.Partial partial60 = partial3.without(dateTimeFieldType59);
        org.joda.time.DateTimeField[] dateTimeFieldArray61 = partial3.getFields();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial3.withPeriodAdded(readablePeriod62, 0);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        java.lang.String str67 = partial66.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        boolean boolean73 = partial66.isAfter((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        java.lang.String str76 = partial75.toString();
        int int77 = partial66.compareTo((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial79.plus(readablePeriod80);
        int int82 = partial79.size();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial86 = partial84.plus(readablePeriod85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = partial86.toDateTime(readableInstant87);
        boolean boolean89 = partial79.isMatch((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = partial75.isMatch((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = null;
        int int92 = partial75.indexOf(dateTimeFieldType91);
        boolean boolean93 = partial3.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = null;
        boolean boolean95 = partial75.isSupported(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTimeFieldArray61);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeField[] dateTimeFieldArray1 = partial0.getFields();
        org.joda.time.Partial partial2 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        java.lang.String str5 = partial4.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        boolean boolean11 = partial4.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        java.lang.String str14 = partial13.toString();
        int int15 = partial4.compareTo((org.joda.time.ReadablePartial) partial13);
        java.lang.String str16 = partial13.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial13.getFormatter();
        boolean boolean18 = partial2.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial21 = partial2.withFieldAddWrapped(durationFieldType19, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial5.plus(readablePeriod6);
        java.lang.String str8 = partial7.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        boolean boolean12 = partial10.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology13 = partial10.getChronology();
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        boolean boolean19 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        boolean boolean28 = partial21.isAfter((org.joda.time.ReadablePartial) partial24);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean33 = partial31.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology34 = partial31.getChronology();
        int[] intArray35 = partial31.getValues();
        java.lang.String str37 = partial31.toString("[]");
        boolean boolean38 = partial14.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = partial42.toString(dateTimeFormatter58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial42.toString(dateTimeFormatter60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        org.joda.time.Partial partial63 = partial42.without(dateTimeFieldType62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        int int71 = partial68.size();
        boolean boolean72 = partial65.isAfter((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        java.lang.String str75 = partial74.toString();
        int int76 = partial65.compareTo((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial78.plus(readablePeriod79);
        int int81 = partial78.size();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial83.plus(readablePeriod84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        boolean boolean88 = partial78.isMatch((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean89 = partial74.isMatch((org.joda.time.ReadableInstant) dateTime87);
        int int90 = partial74.size();
        org.joda.time.Partial partial91 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial74);
        boolean boolean92 = partial42.isEqual((org.joda.time.ReadablePartial) partial74);
        boolean boolean93 = partial14.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology94 = partial14.getChronology();
        org.joda.time.Partial partial95 = partial7.withChronologyRetainFields(chronology94);
        org.joda.time.ReadablePeriod readablePeriod96 = null;
        org.joda.time.Partial partial97 = partial7.minus(readablePeriod96);
        org.joda.time.Chronology chronology98 = partial7.getChronology();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[]" + "'", str75, "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertNotNull(partial97);
        org.junit.Assert.assertNotNull(chronology98);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        boolean boolean13 = partial11.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology14 = partial11.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial17.withChronologyRetainFields(chronology18);
        boolean boolean20 = partial15.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        boolean boolean30 = partial15.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean31 = partial1.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType34 = partial15.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = partial3.isSupported(dateTimeFieldType23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial3.getFormatter();
        int[] intArray26 = partial3.getValues();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = partial3.getChronology();
        java.lang.String str21 = partial3.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        java.lang.String str24 = partial23.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial23.withPeriodAdded(readablePeriod31, (int) (short) 1);
        int int34 = partial3.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = partial35.getFields();
        org.joda.time.Partial partial37 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial35.toString(dateTimeFormatter38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        boolean boolean43 = partial41.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology44 = partial41.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        org.joda.time.Partial partial51 = partial47.without(dateTimeFieldType50);
        boolean boolean52 = partial45.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        int int57 = partial54.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial54.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = partial54.isSupported(dateTimeFieldType59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        int int62 = partial54.indexOf(dateTimeFieldType61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial63.getFieldTypes();
        boolean boolean65 = partial45.isAfter((org.joda.time.ReadablePartial) partial63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial45.without(dateTimeFieldType66);
        boolean boolean68 = partial35.isBefore((org.joda.time.ReadablePartial) partial67);
        boolean boolean69 = partial3.isMatch((org.joda.time.ReadablePartial) partial67);
        java.lang.String str70 = partial3.toString();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial72 = partial3.minus(readablePeriod71);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(partial72);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        java.lang.String str54 = partial35.toString();
        java.lang.String str55 = partial35.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        java.lang.String str11 = partial1.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial19.withChronologyRetainFields(chronology20);
        boolean boolean22 = partial15.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial30.withChronologyRetainFields(chronology31);
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial30);
        boolean boolean34 = partial15.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial15.plus(readablePeriod35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = partial36.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        org.joda.time.Partial partial44 = partial40.without(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = partial44.getChronology();
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.Partial partial47 = partial36.withChronologyRetainFields(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial36.plus(readablePeriod48);
        boolean boolean50 = partial1.isMatch((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = partial36.indexOf(dateTimeFieldType51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField54 = partial36.getField((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        org.joda.time.Partial partial8 = partial1.without(dateTimeFieldType7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial1.minus(readablePeriod9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.minus(readablePeriod11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        org.joda.time.Partial partial14 = partial10.without(dateTimeFieldType13);
        java.lang.String str15 = partial10.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial3.plus(readablePeriod25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = partial26.getFields();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial26.minus(readablePeriod29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property34 = partial30.property(dateTimeFieldType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial24.indexOf(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial24.plus(readablePeriod27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial37.withChronologyRetainFields(chronology38);
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial48.withChronologyRetainFields(chronology49);
        boolean boolean51 = partial44.isAfter((org.joda.time.ReadablePartial) partial48);
        boolean boolean52 = partial33.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial33.plus(readablePeriod53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        int int56 = partial54.indexOf(dateTimeFieldType55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        org.joda.time.Partial partial62 = partial58.without(dateTimeFieldType61);
        org.joda.time.Chronology chronology63 = partial62.getChronology();
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.Partial partial65 = partial54.withChronologyRetainFields(chronology63);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial54.plus(readablePeriod66);
        java.lang.String str68 = partial67.toString();
        int int69 = partial28.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial28.plus(readablePeriod70);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(partial71);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = partial1.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial17.indexOf(dateTimeFieldType24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial17.minus(readablePeriod27);
        boolean boolean29 = partial1.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = partial1.getFormatter();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(dateTimeFormatter30);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial35.getFieldTypes();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        int[] intArray51 = partial47.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean55 = partial53.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology56 = partial53.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray51, chronology56);
        int[] intArray58 = new int[] {};
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial61.without(dateTimeFieldType64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray58, chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray58, chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        org.joda.time.Partial partial82 = partial80.without(dateTimeFieldType81);
        java.lang.String str83 = partial80.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[]" + "'", str83, "[]");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial77 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = null;
        java.lang.String str79 = partial14.toString(dateTimeFormatter78);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = partial14.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[]" + "'", str79, "[]");
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        org.joda.time.Partial partial16 = partial10.without(dateTimeFieldType15);
        org.joda.time.Chronology chronology17 = partial10.getChronology();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial10.plus(readablePeriod18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial19);
        int int21 = partial19.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = partial19.getFormatter();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial24.getFieldTypes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean32 = partial30.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology33 = partial30.getChronology();
        int[] intArray34 = partial30.getValues();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        boolean boolean38 = partial36.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology39 = partial36.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray34, chronology39);
        org.joda.time.Partial partial41 = partial19.withChronologyRetainFields(chronology39);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = partial19.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = partial19.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean31 = partial29.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology32 = partial29.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        boolean boolean38 = partial33.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean49 = partial19.isMatch((org.joda.time.ReadablePartial) partial33);
        boolean boolean50 = partial1.isEqual((org.joda.time.ReadablePartial) partial19);
        java.lang.String str51 = partial1.toString();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial52.plus(readablePeriod53);
        java.lang.String str55 = partial54.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int57 = partial54.get(dateTimeFieldType56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial24.indexOf(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = partial24.indexOf(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        java.lang.String str10 = partial9.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        int int15 = partial12.size();
        boolean boolean16 = partial9.isAfter((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        java.lang.String str19 = partial18.toString();
        int int20 = partial9.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial18.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial18.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial18.without(dateTimeFieldType23);
        boolean boolean25 = partial7.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = partial18.getFields();
        org.joda.time.ReadablePartial readablePartial27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = partial18.isAfter(readablePartial27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial10.toString(dateTimeFormatter26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = partial10.toString(dateTimeFormatter28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial10.minus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial10.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial10.withPeriodAdded(readablePeriod34, 0);
        boolean boolean37 = partial1.isBefore((org.joda.time.ReadablePartial) partial10);
        int[] intArray38 = partial10.getValues();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        boolean boolean42 = partial40.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        java.lang.String str45 = partial44.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        int int50 = partial47.size();
        boolean boolean51 = partial44.isAfter((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        java.lang.String str54 = partial53.toString();
        int int55 = partial44.compareTo((org.joda.time.ReadablePartial) partial53);
        boolean boolean56 = partial40.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial58.plus(readablePeriod59);
        int int61 = partial58.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = partial58.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = partial58.isSupported(dateTimeFieldType63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        int int66 = partial58.indexOf(dateTimeFieldType65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        boolean boolean70 = partial68.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology71 = partial68.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = partial74.withChronologyRetainFields(chronology75);
        boolean boolean77 = partial72.isAfter((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        java.lang.String str80 = partial79.toString();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial82.plus(readablePeriod83);
        int int85 = partial82.size();
        boolean boolean86 = partial79.isAfter((org.joda.time.ReadablePartial) partial82);
        boolean boolean87 = partial72.isBefore((org.joda.time.ReadablePartial) partial79);
        boolean boolean88 = partial58.isMatch((org.joda.time.ReadablePartial) partial72);
        boolean boolean89 = partial40.isEqual((org.joda.time.ReadablePartial) partial58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = null;
        java.lang.String str91 = partial58.toString(dateTimeFormatter90);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        org.joda.time.Partial partial93 = partial58.without(dateTimeFieldType92);
        boolean boolean94 = partial10.isMatch((org.joda.time.ReadablePartial) partial58);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[]" + "'", str91, "[]");
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        java.lang.String str28 = partial22.toString("[]");
        boolean boolean29 = partial5.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial33.toString(dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial33.toString(dateTimeFormatter51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        org.joda.time.Partial partial54 = partial33.without(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        int int62 = partial59.size();
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        int int67 = partial56.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        boolean boolean79 = partial69.isMatch((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = partial65.isMatch((org.joda.time.ReadableInstant) dateTime78);
        int int81 = partial65.size();
        org.joda.time.Partial partial82 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        boolean boolean83 = partial33.isEqual((org.joda.time.ReadablePartial) partial65);
        boolean boolean84 = partial5.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = null;
        org.joda.time.Partial partial87 = partial85.without(dateTimeFieldType86);
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial85);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(partial87);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial3.indexOf(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial3.plus(readablePeriod27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField30 = partial28.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(partial28);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = partial13.indexOf(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        boolean boolean35 = partial25.isMatch((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = partial21.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial21.toString(dateTimeFormatter37);
        java.lang.String str40 = partial21.toString("[]");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial42.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial42.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = partial42.indexOf(dateTimeFieldType49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial42.minus(readablePeriod52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = partial53.isSupported(dateTimeFieldType54);
        boolean boolean56 = partial21.equals((java.lang.Object) boolean55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        java.lang.String str59 = partial58.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        boolean boolean65 = partial58.isAfter((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        java.lang.String str68 = partial67.toString();
        int int69 = partial58.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial73 = partial71.plus(readablePeriod72);
        int int74 = partial71.size();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.plus(readablePeriod77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = partial78.toDateTime(readableInstant79);
        boolean boolean81 = partial71.isMatch((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = partial67.isMatch((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime83 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean84 = partial13.isMatch((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial13.withPeriodAdded(readablePeriod85, 0);
        java.lang.Class<?> wildcardClass88 = partial87.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = partial1.isSupported(dateTimeFieldType5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial10.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial27.plus(readablePeriod29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial38.withChronologyRetainFields(chronology39);
        boolean boolean41 = partial34.isAfter((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial49.withChronologyRetainFields(chronology50);
        boolean boolean52 = partial45.isAfter((org.joda.time.ReadablePartial) partial49);
        boolean boolean53 = partial34.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial34.plus(readablePeriod54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = partial55.indexOf(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = partial59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        org.joda.time.Partial partial63 = partial59.without(dateTimeFieldType62);
        org.joda.time.Chronology chronology64 = partial63.getChronology();
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Partial partial66 = partial55.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial66.getFieldTypes();
        boolean boolean68 = partial27.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial66.toString(dateTimeFormatter69);
        boolean boolean71 = partial1.equals((java.lang.Object) partial66);
        org.joda.time.Partial partial72 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = partial72.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.lang.String str4 = partial1.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial1.toString(dateTimeFormatter5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial1.plus(readablePeriod7);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial4);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        org.joda.time.Partial partial11 = partial9.without(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial11.withChronologyRetainFields(chronology12);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = partial13.toString("", locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        int[] intArray23 = partial3.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial3.toString(dateTimeFormatter24);
        boolean boolean27 = partial3.equals((java.lang.Object) 0);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial3.plus(readablePeriod28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = partial3.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = partial1.indexOf(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        boolean boolean32 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial18.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial18.toString(dateTimeFormatter34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial18.withPeriodAdded(readablePeriod36, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial18.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial18.minus(readablePeriod40);
        boolean boolean42 = partial1.isMatch((org.joda.time.ReadablePartial) partial18);
        int int43 = partial1.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int45 = partial1.get(dateTimeFieldType44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial28.plus(readablePeriod44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        boolean boolean48 = partial3.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial49.withPeriodAdded(readablePeriod50, 0);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial49.withPeriodAdded(readablePeriod53, 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        java.lang.String str58 = partial57.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        int int63 = partial60.size();
        boolean boolean64 = partial57.isAfter((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        java.lang.String str67 = partial66.toString();
        int int68 = partial57.compareTo((org.joda.time.ReadablePartial) partial66);
        java.lang.String str69 = partial66.toString();
        org.joda.time.Partial partial70 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial66);
        int int71 = partial66.size();
        boolean boolean72 = partial49.isBefore((org.joda.time.ReadablePartial) partial66);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = partial13.indexOf(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial13.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = partial13.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = partial13.getFields();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial22.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = partial22.isSupported(dateTimeFieldType27);
        java.lang.String str29 = partial22.toStringList();
        java.lang.String str31 = partial22.toString("[]");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial35.toString(dateTimeFormatter51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial35.toString(dateTimeFormatter53);
        int[] intArray55 = partial35.getValues();
        boolean boolean56 = partial22.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        org.joda.time.Partial partial58 = partial22.without(dateTimeFieldType57);
        boolean boolean59 = partial13.isEqual((org.joda.time.ReadablePartial) partial58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial58.plus(readablePeriod60);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(partial61);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial24.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        org.joda.time.Partial partial32 = partial28.without(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = partial32.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Partial partial35 = partial24.withChronologyRetainFields(chronology33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        java.lang.String str39 = partial38.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        boolean boolean45 = partial38.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        java.lang.String str48 = partial47.toString();
        int int49 = partial38.compareTo((org.joda.time.ReadablePartial) partial47);
        java.lang.String str50 = partial47.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial47.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial47.plus(readablePeriod52);
        org.joda.time.Chronology chronology54 = partial47.getChronology();
        boolean boolean55 = partial36.isBefore((org.joda.time.ReadablePartial) partial47);
        java.lang.String str56 = partial47.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        java.lang.String str21 = partial20.toString();
        java.lang.String str22 = partial20.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial20.getFormatter();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        java.lang.String str26 = partial25.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = partial3.isSupported(dateTimeFieldType23);
        int int25 = partial3.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = partial29.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial29.plus(readablePeriod45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        java.lang.String str49 = partial48.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        int int54 = partial51.size();
        boolean boolean55 = partial48.isAfter((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        java.lang.String str58 = partial57.toString();
        int int59 = partial48.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        boolean boolean71 = partial61.isMatch((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = partial57.isMatch((org.joda.time.ReadableInstant) dateTime70);
        int int73 = partial57.size();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial57.minus(readablePeriod74);
        boolean boolean76 = partial46.isMatch((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial3.isEqual((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = partial46.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial46.plus(readablePeriod79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int82 = partial80.get(dateTimeFieldType81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(partial80);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = partial1.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        int int6 = partial1.indexOf(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        org.joda.time.Partial partial8 = partial1.without(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(partial8);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        java.lang.String str21 = partial20.toString();
        java.lang.String str22 = partial20.toString();
        int[] intArray23 = partial20.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        org.joda.time.Partial partial25 = partial20.without(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        java.lang.String str28 = partial27.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        boolean boolean34 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        int int38 = partial27.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = partial36.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial36.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        org.joda.time.Partial partial42 = partial36.without(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = partial36.getChronology();
        org.joda.time.Partial partial44 = partial25.withChronologyRetainFields(chronology43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(partial44);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial5.plus(readablePeriod6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        java.lang.String str10 = partial9.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        int int15 = partial12.size();
        boolean boolean16 = partial9.isAfter((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        java.lang.String str19 = partial18.toString();
        int int20 = partial9.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        boolean boolean32 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime31);
        int int34 = partial18.size();
        org.joda.time.Partial partial35 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.minus(readablePeriod36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        boolean boolean40 = partial35.isMatch((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial5.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial39.plus(readablePeriod42);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = partial3.indexOf(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        java.lang.String str29 = partial28.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        int int34 = partial31.size();
        boolean boolean35 = partial28.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        java.lang.String str38 = partial37.toString();
        int int39 = partial28.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        boolean boolean51 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        int int58 = partial55.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial55.getFieldTypes();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        boolean boolean63 = partial61.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology64 = partial61.getChronology();
        int[] intArray65 = partial61.getValues();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        boolean boolean69 = partial67.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology70 = partial67.getChronology();
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray65, chronology70);
        org.joda.time.Partial partial72 = partial24.withChronologyRetainFields(chronology70);
        boolean boolean73 = partial3.isEqual((org.joda.time.ReadablePartial) partial72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial3.minus(readablePeriod74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        int int77 = partial3.indexOf(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        int int54 = partial3.indexOf(dateTimeFieldType53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial17 = partial10.withFieldAddWrapped(durationFieldType15, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = partial3.withField(dateTimeFieldType21, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial3.plus(readablePeriod53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial54.withPeriodAdded(readablePeriod55, 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray58 = partial57.getFields();
        org.joda.time.Partial partial59 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial57);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTimeFieldArray58);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        java.lang.String str31 = partial30.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        java.lang.String str40 = partial39.toString();
        int int41 = partial30.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = partial3.isSupported(dateTimeFieldType57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial3.plus(readablePeriod59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        int int65 = partial62.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = partial62.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = partial62.isSupported(dateTimeFieldType67);
        java.lang.String str69 = partial62.toStringList();
        java.lang.String str71 = partial62.toString("[]");
        org.joda.time.Chronology chronology72 = partial62.getChronology();
        boolean boolean73 = partial60.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial76 = partial60.withField(dateTimeFieldType74, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        int int23 = partial12.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial12.minus(readablePeriod24);
        boolean boolean26 = partial1.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial12.withPeriodAdded(readablePeriod27, (int) '4');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial12.getFieldTypes();
        java.util.Locale locale32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = partial12.toString("", locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = partial11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial11.indexOf(dateTimeFieldType18);
        boolean boolean20 = partial1.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        int int31 = partial28.size();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        boolean boolean38 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = partial24.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = partial24.toString(dateTimeFormatter40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial24.toString(dateTimeFormatter42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial24.without(dateTimeFieldType44);
        boolean boolean46 = partial11.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property48 = partial24.property(dateTimeFieldType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        boolean boolean6 = partial4.equals((java.lang.Object) 0.0f);
        int int7 = partial1.compareTo((org.joda.time.ReadablePartial) partial4);
        java.lang.String str8 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial1.minus(readablePeriod9);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial10);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        boolean boolean9 = partial7.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology10 = partial7.getChronology();
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray11, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial19.getFieldTypes();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        int int34 = partial31.size();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        boolean boolean41 = partial31.isMatch((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = partial27.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial27.toString(dateTimeFormatter43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = partial27.toString(dateTimeFormatter45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        org.joda.time.Partial partial48 = partial27.without(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        java.lang.String str51 = partial50.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        int int61 = partial50.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        boolean boolean73 = partial63.isMatch((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = partial59.isMatch((org.joda.time.ReadableInstant) dateTime72);
        int int75 = partial59.size();
        org.joda.time.Partial partial76 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial59);
        boolean boolean77 = partial27.isEqual((org.joda.time.ReadablePartial) partial59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = partial27.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial27.minus(readablePeriod79);
        int[] intArray81 = partial27.getValues();
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray81);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        java.lang.String str21 = partial20.toString();
        java.lang.String str22 = partial20.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial20.getFormatter();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = partial25.getFields();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        java.lang.String str11 = partial9.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property13 = partial9.property(dateTimeFieldType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        int int16 = partial13.size();
        boolean boolean17 = partial10.isAfter((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        java.lang.String str20 = partial19.toString();
        int int21 = partial10.compareTo((org.joda.time.ReadablePartial) partial19);
        java.lang.String str22 = partial19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        boolean boolean40 = partial30.isMatch((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = partial26.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial26.plus(readablePeriod42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        java.lang.String str50 = partial49.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial52.plus(readablePeriod53);
        int int55 = partial52.size();
        boolean boolean56 = partial49.isAfter((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        java.lang.String str59 = partial58.toString();
        int int60 = partial49.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        int int65 = partial62.size();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.plus(readablePeriod68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = partial69.toDateTime(readableInstant70);
        boolean boolean72 = partial62.isMatch((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean73 = partial58.isMatch((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime75 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime76 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime77 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        java.lang.String str79 = partial4.toString("[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[]" + "'", str79, "[]");
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        java.lang.String str34 = partial33.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        int int44 = partial33.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int58 = partial42.size();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial42.minus(readablePeriod59);
        boolean boolean61 = partial31.isMatch((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial1.isMatch((org.joda.time.ReadablePartial) partial60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial1.plus(readablePeriod63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        int int75 = partial72.size();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial77.plus(readablePeriod78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        boolean boolean82 = partial72.isMatch((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial68.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial68.plus(readablePeriod84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = partial68.getFormatter();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Partial partial88 = new org.joda.time.Partial(chronology87);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Partial partial90 = partial88.withChronologyRetainFields(chronology89);
        int int91 = partial68.compareTo((org.joda.time.ReadablePartial) partial88);
        boolean boolean92 = partial64.isMatch((org.joda.time.ReadablePartial) partial68);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = null;
        org.joda.time.Partial partial94 = partial64.without(dateTimeFieldType93);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = null;
        int int96 = partial64.indexOf(dateTimeFieldType95);
        org.joda.time.ReadablePeriod readablePeriod97 = null;
        org.joda.time.Partial partial99 = partial64.withPeriodAdded(readablePeriod97, 100);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(partial94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(partial99);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = partial1.isSupported(dateTimeFieldType14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = partial1.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        java.lang.String str33 = partial31.toString();
        int int34 = partial9.compareTo((org.joda.time.ReadablePartial) partial31);
        int[] intArray35 = partial31.getValues();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial43.withChronologyRetainFields(chronology44);
        boolean boolean46 = partial39.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial54.withChronologyRetainFields(chronology55);
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean58 = partial39.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial39.plus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        int int62 = partial60.indexOf(dateTimeFieldType61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        org.joda.time.Partial partial68 = partial64.without(dateTimeFieldType67);
        org.joda.time.Chronology chronology69 = partial68.getChronology();
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        org.joda.time.Partial partial71 = partial60.withChronologyRetainFields(chronology69);
        boolean boolean72 = partial31.isMatch((org.joda.time.ReadablePartial) partial60);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = partial1.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        int int15 = partial12.size();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        boolean boolean22 = partial12.isMatch((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = partial8.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial8.toString(dateTimeFormatter24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial8.toString(dateTimeFormatter26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial8.without(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        java.lang.String str32 = partial31.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        int int37 = partial34.size();
        boolean boolean38 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        int int42 = partial31.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        int int47 = partial44.size();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        boolean boolean54 = partial44.isMatch((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime53);
        int int56 = partial40.size();
        org.joda.time.Partial partial57 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        boolean boolean58 = partial8.isEqual((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial8.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial8.minus(readablePeriod60);
        boolean boolean62 = partial1.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial1.plus(readablePeriod63);
        java.lang.String str65 = partial64.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        int int67 = partial64.indexOf(dateTimeFieldType66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        boolean boolean69 = partial64.isSupported(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial3.minus(readablePeriod55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial59 = partial56.withPeriodAdded(readablePeriod57, (int) (byte) 1);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DurationFieldType durationFieldType61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial63 = partial56.withFieldAdded(durationFieldType61, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        org.joda.time.Partial partial16 = partial10.without(dateTimeFieldType15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        java.lang.Object obj18 = null;
        boolean boolean19 = partial10.equals(obj18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial10.withPeriodAdded(readablePeriod20, (int) ' ');
        int int23 = partial22.size();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeField[] dateTimeFieldArray1 = partial0.getFields();
        org.joda.time.Partial partial2 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = partial0.toString(dateTimeFormatter3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean8 = partial6.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology9 = partial6.getChronology();
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        org.joda.time.Partial partial16 = partial12.without(dateTimeFieldType15);
        boolean boolean17 = partial10.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = partial19.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = partial19.indexOf(dateTimeFieldType26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial28.getFieldTypes();
        boolean boolean30 = partial10.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        org.joda.time.Partial partial32 = partial10.without(dateTimeFieldType31);
        boolean boolean33 = partial0.isBefore((org.joda.time.ReadablePartial) partial32);
        int int34 = partial0.size();
        org.junit.Assert.assertNotNull(dateTimeFieldArray1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        int int23 = partial12.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial12.minus(readablePeriod24);
        boolean boolean26 = partial1.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = partial1.isSupported(dateTimeFieldType27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial1.plus(readablePeriod29);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int[] intArray6 = partial5.getValues();
        int[] intArray7 = partial5.getValues();
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        boolean boolean26 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial12.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial29);
        java.lang.String str31 = partial29.toString();
        org.joda.time.Chronology chronology32 = partial29.getChronology();
        org.joda.time.Partial partial33 = partial8.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = partial33.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial33.getFields();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial20.isSupported(dateTimeFieldType22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField25 = partial20.getField((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        boolean boolean9 = partial7.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology10 = partial7.getChronology();
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray11, chronology16);
        int[] intArray18 = new int[] {};
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        org.joda.time.Partial partial21 = partial19.without(dateTimeFieldType20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial21.plus(readablePeriod24);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = partial3.getChronology();
        java.lang.String str21 = partial3.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        java.lang.String str24 = partial23.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial23.withPeriodAdded(readablePeriod31, (int) (short) 1);
        int int34 = partial3.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        boolean boolean52 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial38.toString(dateTimeFormatter54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial38.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial38.minus(readablePeriod58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        org.joda.time.Partial partial61 = partial38.without(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = partial61.getChronology();
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology62);
        boolean boolean65 = partial3.isBefore((org.joda.time.ReadablePartial) partial64);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial3.minus(readablePeriod25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = partial3.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial3.isSupported(dateTimeFieldType28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = partial3.indexOf(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        java.lang.String str31 = partial30.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        java.lang.String str40 = partial39.toString();
        int int41 = partial30.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        boolean boolean60 = partial58.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology61 = partial58.getChronology();
        int[] intArray62 = partial58.getValues();
        java.lang.String str64 = partial58.toString("[]");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        org.joda.time.Partial partial70 = partial66.without(dateTimeFieldType69);
        org.joda.time.Chronology chronology71 = partial70.getChronology();
        boolean boolean72 = partial58.isEqual((org.joda.time.ReadablePartial) partial70);
        boolean boolean73 = partial3.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        int int75 = partial58.indexOf(dateTimeFieldType74);
        org.joda.time.ReadablePartial readablePartial76 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = partial58.isBefore(readablePartial76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.minus(readablePeriod13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        java.lang.String str17 = partial16.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        boolean boolean23 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        java.lang.String str26 = partial25.toString();
        int int27 = partial16.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = partial16.indexOf(dateTimeFieldType28);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        org.joda.time.Partial partial32 = partial12.without(dateTimeFieldType31);
        java.lang.String str33 = partial32.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial36 = partial32.withField(dateTimeFieldType34, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial20.plus(readablePeriod22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial20.toString(dateTimeFormatter24);
        java.lang.String str26 = partial20.toStringList();
        java.lang.String str27 = partial20.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        java.lang.String str33 = partial31.toString();
        int int34 = partial9.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial31.withPeriodAdded(readablePeriod35, (int) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial31.getFieldTypes();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        java.lang.String str50 = partial49.toString();
        int int51 = partial40.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial58.plus(readablePeriod59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        boolean boolean63 = partial53.isMatch((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime62);
        int int65 = partial49.size();
        org.joda.time.Partial partial66 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial49);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.minus(readablePeriod67);
        int[] intArray69 = partial66.getValues();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial73 = partial71.plus(readablePeriod72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = partial77.withChronologyRetainFields(chronology78);
        boolean boolean80 = partial73.isAfter((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial82.plus(readablePeriod83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = partial84.toDateTime(readableInstant85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Partial partial88 = new org.joda.time.Partial(chronology87);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Partial partial90 = partial88.withChronologyRetainFields(chronology89);
        boolean boolean91 = partial84.isAfter((org.joda.time.ReadablePartial) partial88);
        boolean boolean92 = partial73.isBefore((org.joda.time.ReadablePartial) partial88);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = null;
        org.joda.time.Partial partial94 = partial73.without(dateTimeFieldType93);
        org.joda.time.Chronology chronology95 = partial73.getChronology();
        org.joda.time.Partial partial96 = new org.joda.time.Partial(dateTimeFieldTypeArray38, intArray69, chronology95);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(partial94);
        org.junit.Assert.assertNotNull(chronology95);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str37 = partial12.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        org.joda.time.DateTimeField[] dateTimeFieldArray42 = partial39.getFields();
        boolean boolean43 = partial12.isEqual((org.joda.time.ReadablePartial) partial39);
        java.lang.String str44 = partial39.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int46 = partial39.get(dateTimeFieldType45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        java.lang.String str8 = partial7.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        java.lang.String str17 = partial16.toString();
        int int18 = partial7.compareTo((org.joda.time.ReadablePartial) partial16);
        java.lang.String str19 = partial16.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial22.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial28.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology31 = partial28.getChronology();
        int[] intArray32 = partial28.getValues();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        boolean boolean36 = partial34.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology37 = partial34.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray32, chronology37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray32);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        int[] intArray51 = partial47.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean55 = partial53.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology56 = partial53.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray51, chronology56);
        int[] intArray58 = new int[] {};
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial67.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial63.isAfter((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray58, chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = partial74.withChronologyRetainFields(chronology75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        org.joda.time.Partial partial78 = partial74.without(dateTimeFieldType77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial78.toString(dateTimeFormatter79);
        org.joda.time.Chronology chronology81 = partial78.getChronology();
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray58, chronology81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = partial82.getFieldTypes();
        java.util.Locale locale85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = partial82.toString("hi!", locale85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial3.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = partial3.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.lang.String str4 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = partial1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = partial1.indexOf(dateTimeFieldType7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = partial1.getFields();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        java.lang.String str12 = partial11.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        boolean boolean18 = partial11.isAfter((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        java.lang.String str21 = partial20.toString();
        int int22 = partial11.compareTo((org.joda.time.ReadablePartial) partial20);
        java.lang.String str23 = partial20.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial20.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial20.getFieldTypes();
        boolean boolean26 = partial1.isEqual((org.joda.time.ReadablePartial) partial20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = partial1.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        boolean boolean9 = partial7.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology10 = partial7.getChronology();
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray11, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = partial3.isSupported(dateTimeFieldType7);
        int[] intArray9 = partial3.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial29.withChronologyRetainFields(chronology30);
        boolean boolean32 = partial25.isAfter((org.joda.time.ReadablePartial) partial29);
        boolean boolean33 = partial14.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        java.lang.String str44 = partial43.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        boolean boolean50 = partial43.isAfter((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        java.lang.String str53 = partial52.toString();
        int int54 = partial43.compareTo((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial56.plus(readablePeriod57);
        int int59 = partial56.size();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        boolean boolean66 = partial56.isMatch((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean67 = partial52.isMatch((org.joda.time.ReadableInstant) dateTime65);
        int int68 = partial52.size();
        org.joda.time.Partial partial69 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial52);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.minus(readablePeriod70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        boolean boolean74 = partial69.isMatch((org.joda.time.ReadablePartial) partial73);
        boolean boolean75 = partial39.isAfter((org.joda.time.ReadablePartial) partial73);
        boolean boolean76 = partial14.isMatch((org.joda.time.ReadablePartial) partial73);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial73.plus(readablePeriod77);
        boolean boolean79 = partial3.equals((java.lang.Object) partial73);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = partial3.getFieldTypes();
        int int81 = partial3.size();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = partial13.indexOf(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial13.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = partial13.getFieldTypes();
        int[] intArray20 = partial13.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial13.getFormatter();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        boolean boolean39 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = partial25.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = partial25.toString(dateTimeFormatter41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial25.withPeriodAdded(readablePeriod43, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial25.withPeriodAdded(readablePeriod47, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial25.withPeriodAdded(readablePeriod50, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial25.toString(dateTimeFormatter53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        int int62 = partial59.size();
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        int int67 = partial56.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        boolean boolean79 = partial69.isMatch((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = partial65.isMatch((org.joda.time.ReadableInstant) dateTime78);
        int int81 = partial65.size();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial83 = partial65.minus(readablePeriod82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial65.minus(readablePeriod84);
        boolean boolean86 = partial25.isMatch((org.joda.time.ReadablePartial) partial65);
        boolean boolean87 = partial13.isEqual((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property89 = partial65.property(dateTimeFieldType88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        java.lang.String str31 = partial30.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        java.lang.String str40 = partial39.toString();
        int int41 = partial30.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = partial3.isSupported(dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        org.joda.time.Partial partial60 = partial3.without(dateTimeFieldType59);
        org.joda.time.DateTimeField[] dateTimeFieldArray61 = partial3.getFields();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial3.withPeriodAdded(readablePeriod62, 0);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial3.plus(readablePeriod65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = partial3.isSupported(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTimeFieldArray61);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        java.lang.String str29 = partial28.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean33 = partial31.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial31.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial31.minus(readablePeriod35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        org.joda.time.Partial partial38 = partial31.without(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        boolean boolean50 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = partial31.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial28.withPeriodAdded(readablePeriod53, (int) (byte) 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(partial55);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial14.withChronologyRetainFields(chronology15);
        boolean boolean17 = partial10.isAfter((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        int int19 = partial1.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial1.indexOf(dateTimeFieldType20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial1.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial26 = partial1.withFieldAddWrapped(durationFieldType24, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial1.plus(readablePeriod18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial1.minus(readablePeriod20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial21);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial24.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        org.joda.time.Partial partial32 = partial28.without(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = partial32.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Partial partial35 = partial24.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial35.getFieldTypes();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        boolean boolean40 = partial38.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology41 = partial38.getChronology();
        int[] intArray42 = partial38.getValues();
        java.lang.String str44 = partial38.toString("[]");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        org.joda.time.Partial partial50 = partial46.without(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = partial50.getChronology();
        boolean boolean52 = partial38.isEqual((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial53 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial38);
        int[] intArray54 = partial38.getValues();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial56.plus(readablePeriod57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        java.lang.String str61 = partial60.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        boolean boolean67 = partial60.isAfter((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        java.lang.String str70 = partial69.toString();
        int int71 = partial60.compareTo((org.joda.time.ReadablePartial) partial69);
        java.lang.String str72 = partial69.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = partial69.getFormatter();
        boolean boolean74 = partial58.isMatch((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology75 = partial58.getChronology();
        org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray54, chronology75);
        org.joda.time.Partial partial77 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = partial79.withChronologyRetainFields(chronology80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial84 = partial81.withPeriodAdded(readablePeriod82, (-1));
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = null;
        org.joda.time.Partial partial87 = partial85.without(dateTimeFieldType86);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Partial partial89 = new org.joda.time.Partial(chronology88);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Partial partial91 = partial89.plus(readablePeriod90);
        org.joda.time.Partial partial92 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = null;
        java.lang.String str94 = partial91.toString(dateTimeFormatter93);
        int int95 = partial87.compareTo((org.joda.time.ReadablePartial) partial91);
        boolean boolean96 = partial76.equals((java.lang.Object) int95);
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = null;
        org.joda.time.Partial partial98 = partial76.without(dateTimeFieldType97);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[]" + "'", str94, "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(partial98);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial10.plus(readablePeriod29);
        int[] intArray31 = partial10.getValues();
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(partial34);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial23.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial27.without(dateTimeFieldType28);
        boolean boolean30 = partial3.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        org.joda.time.Partial partial35 = partial27.without(dateTimeFieldType34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial35.isSupported(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        java.lang.String str11 = partial5.toStringList();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        java.lang.String str14 = partial13.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        boolean boolean20 = partial13.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        int int24 = partial13.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        boolean boolean36 = partial26.isMatch((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean37 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime35);
        int int38 = partial22.size();
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial22);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.minus(readablePeriod40);
        int int42 = partial5.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = partial5.indexOf(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.minus(readablePeriod28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean32 = partial27.isMatch((org.joda.time.ReadablePartial) partial31);
        java.lang.String str33 = partial31.toStringList();
        org.joda.time.DurationFieldType durationFieldType34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial36 = partial31.withFieldAdded(durationFieldType34, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        boolean boolean9 = partial7.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology10 = partial7.getChronology();
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray11, chronology16);
        int[] intArray18 = new int[] {};
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray18);
        java.lang.Class<?> wildcardClass20 = intArray18.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        boolean boolean27 = partial17.isMatch((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = partial13.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial13.toString(dateTimeFormatter29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial13.toString(dateTimeFormatter31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial13.minus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial13.plus(readablePeriod35);
        boolean boolean37 = partial9.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial13.plus(readablePeriod38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial42 = partial13.withField(dateTimeFieldType40, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial10 = partial7.withPeriodAdded(readablePeriod8, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial7.minus(readablePeriod11);
        int int13 = partial7.size();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial20.toString();
        org.joda.time.Chronology chronology23 = partial20.getChronology();
        int[] intArray24 = partial20.getValues();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        int int12 = partial9.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        boolean boolean19 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial5.plus(readablePeriod21);
        java.lang.String str23 = partial22.toString();
        java.lang.String str24 = partial22.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial22.getFormatter();
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology27 = partial22.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldType0, 100, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = partial3.getChronology();
        java.lang.String str21 = partial3.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        java.lang.String str24 = partial23.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial23.withPeriodAdded(readablePeriod31, (int) (short) 1);
        int int34 = partial3.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = partial35.getFields();
        org.joda.time.Partial partial37 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial35.toString(dateTimeFormatter38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        boolean boolean43 = partial41.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology44 = partial41.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        org.joda.time.Partial partial51 = partial47.without(dateTimeFieldType50);
        boolean boolean52 = partial45.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        int int57 = partial54.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial54.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = partial54.isSupported(dateTimeFieldType59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        int int62 = partial54.indexOf(dateTimeFieldType61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial63.getFieldTypes();
        boolean boolean65 = partial45.isAfter((org.joda.time.ReadablePartial) partial63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial45.without(dateTimeFieldType66);
        boolean boolean68 = partial35.isBefore((org.joda.time.ReadablePartial) partial67);
        boolean boolean69 = partial3.isMatch((org.joda.time.ReadablePartial) partial67);
        java.lang.String str70 = partial3.toString();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        org.joda.time.Partial partial76 = partial72.without(dateTimeFieldType75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial72.minus(readablePeriod77);
        boolean boolean79 = partial3.isMatch((org.joda.time.ReadablePartial) partial72);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        java.lang.String str34 = partial33.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        int int44 = partial33.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int58 = partial42.size();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial42.minus(readablePeriod59);
        boolean boolean61 = partial31.isMatch((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial1.isMatch((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology63 = partial60.getChronology();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        boolean boolean70 = partial68.equals((java.lang.Object) 0.0f);
        int int71 = partial65.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        org.joda.time.Partial partial73 = partial65.without(dateTimeFieldType72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial75.plus(readablePeriod76);
        int int78 = partial75.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = partial75.getFieldTypes();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology80);
        boolean boolean83 = partial81.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology84 = partial81.getChronology();
        int[] intArray85 = partial81.getValues();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology86);
        boolean boolean89 = partial87.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology90 = partial87.getChronology();
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray79, intArray85, chronology90);
        org.joda.time.Partial partial92 = new org.joda.time.Partial(chronology90);
        org.joda.time.Partial partial93 = partial73.withChronologyRetainFields(chronology90);
        org.joda.time.Partial partial94 = partial60.withChronologyRetainFields(chronology90);
        java.lang.String str95 = partial60.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = null;
        int int97 = partial60.indexOf(dateTimeFieldType96);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray98 = partial60.getFieldTypes();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertNotNull(partial94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[]" + "'", str95, "[]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray98);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = partial3.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        java.lang.String str21 = partial20.toString();
        java.lang.String str22 = partial20.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial20.getFormatter();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        java.lang.String str26 = partial25.toString();
        java.lang.String str27 = partial25.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial28.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology31 = partial28.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray26, chronology31);
        int[] intArray33 = new int[] {};
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        org.joda.time.Partial partial40 = partial36.without(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = partial40.getChronology();
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray33, chronology41);
        java.lang.String str44 = partial42.toString("[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial28.toString(dateTimeFormatter44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial28.withPeriodAdded(readablePeriod46, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial28.getFieldTypes();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        java.lang.String str56 = partial55.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial58.plus(readablePeriod59);
        int int61 = partial58.size();
        boolean boolean62 = partial55.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        java.lang.String str65 = partial64.toString();
        int int66 = partial55.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        int int71 = partial68.size();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial73.plus(readablePeriod74);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        boolean boolean78 = partial68.isMatch((org.joda.time.ReadableInstant) dateTime77);
        boolean boolean79 = partial64.isMatch((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime80 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        boolean boolean81 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        boolean boolean83 = partial28.isSupported(dateTimeFieldType82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial28.plus(readablePeriod84);
        org.joda.time.Chronology chronology86 = partial85.getChronology();
        org.joda.time.Partial partial87 = partial3.withChronologyRetainFields(chronology86);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(partial87);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        boolean boolean9 = partial7.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology10 = partial7.getChronology();
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray11, chronology16);
        java.lang.String str18 = partial17.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        boolean boolean6 = partial4.equals((java.lang.Object) 0.0f);
        int int7 = partial1.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        org.joda.time.Partial partial9 = partial1.without(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial11.getFieldTypes();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        boolean boolean19 = partial17.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology20 = partial17.getChronology();
        int[] intArray21 = partial17.getValues();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        boolean boolean25 = partial23.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology26 = partial23.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray15, intArray21, chronology26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology26);
        org.joda.time.Partial partial29 = partial9.withChronologyRetainFields(chronology26);
        int[] intArray30 = partial29.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial29.getFieldTypes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = partial33.getFieldTypes();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        boolean boolean41 = partial39.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology42 = partial39.getChronology();
        int[] intArray43 = partial39.getValues();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        boolean boolean47 = partial45.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology48 = partial45.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray43, chronology48);
        int[] intArray50 = new int[] {};
        org.joda.time.Partial partial51 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial53.getFieldTypes();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        boolean boolean61 = partial59.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology62 = partial59.getChronology();
        int[] intArray63 = partial59.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        boolean boolean67 = partial65.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology68 = partial65.getChronology();
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray63, chronology68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray63);
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray63);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        org.joda.time.Partial partial73 = partial71.without(dateTimeFieldType72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial75.plus(readablePeriod76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial77);
        boolean boolean79 = partial71.isMatch((org.joda.time.ReadablePartial) partial77);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        int int23 = partial12.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial12.minus(readablePeriod24);
        boolean boolean26 = partial1.isBefore((org.joda.time.ReadablePartial) partial12);
        java.lang.String str27 = partial12.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial29.without(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = partial33.getChronology();
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology34);
        org.joda.time.Partial partial37 = partial12.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial12.minus(readablePeriod38);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial39);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial14.getFormatter();
        int int37 = partial14.size();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial14.withPeriodAdded(readablePeriod38, 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        boolean boolean44 = partial42.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology45 = partial42.getChronology();
        int[] intArray46 = partial42.getValues();
        java.lang.String str48 = partial42.toString("[]");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        org.joda.time.Partial partial54 = partial50.without(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = partial54.getChronology();
        boolean boolean56 = partial42.isEqual((org.joda.time.ReadablePartial) partial54);
        java.util.Locale locale58 = null;
        java.lang.String str59 = partial54.toString("[]", locale58);
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = partial54.getFields();
        boolean boolean61 = partial14.isBefore((org.joda.time.ReadablePartial) partial54);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        org.joda.time.Partial partial11 = partial7.without(dateTimeFieldType10);
        boolean boolean12 = partial5.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial5.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property15 = partial5.property(dateTimeFieldType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        boolean boolean11 = partial9.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial9.toString(dateTimeFormatter12);
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial9.minus(readablePeriod15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial18.without(dateTimeFieldType21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial22.toString(dateTimeFormatter23);
        java.lang.String str25 = partial22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        java.lang.String str28 = partial27.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        boolean boolean34 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        int int38 = partial27.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        boolean boolean50 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = partial36.isMatch((org.joda.time.ReadableInstant) dateTime49);
        int int52 = partial36.size();
        org.joda.time.Partial partial53 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial36);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.minus(readablePeriod54);
        int int56 = partial22.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        boolean boolean60 = partial58.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial58.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial58.minus(readablePeriod62);
        java.lang.String str64 = partial63.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = partial63.getFormatter();
        boolean boolean66 = partial53.isEqual((org.joda.time.ReadablePartial) partial63);
        boolean boolean67 = partial16.isBefore((org.joda.time.ReadablePartial) partial63);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial77 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = null;
        java.lang.String str79 = partial14.toString(dateTimeFormatter78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        boolean boolean81 = partial14.isSupported(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[]" + "'", str79, "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        java.lang.String str8 = partial7.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        java.lang.String str17 = partial16.toString();
        int int18 = partial7.compareTo((org.joda.time.ReadablePartial) partial16);
        java.lang.String str19 = partial16.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial22.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial28.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology31 = partial28.getChronology();
        int[] intArray32 = partial28.getValues();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        boolean boolean36 = partial34.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology37 = partial34.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray32, chronology37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray32);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        int[] intArray51 = partial47.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean55 = partial53.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology56 = partial53.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray51, chronology56);
        int[] intArray58 = new int[] {};
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial67.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial63.isAfter((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray58, chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = partial74.withChronologyRetainFields(chronology75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        org.joda.time.Partial partial78 = partial74.without(dateTimeFieldType77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial78.toString(dateTimeFormatter79);
        org.joda.time.Chronology chronology81 = partial78.getChronology();
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray58, chronology81);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = null;
        java.lang.String str84 = partial82.toString(dateTimeFormatter83);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial82);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[]" + "'", str84, "[]");
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = partial3.isSupported(dateTimeFieldType7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = partial3.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int[] intArray6 = partial5.getValues();
        int[] intArray7 = partial5.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial5.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = partial5.getFields();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        boolean boolean27 = partial17.isMatch((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = partial13.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial13.toString(dateTimeFormatter29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial13.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial13.getFieldTypes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial36.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial36.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        boolean boolean60 = partial50.isMatch((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial46.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial46.toString(dateTimeFormatter62);
        java.lang.String str65 = partial46.toString("[]");
        boolean boolean66 = partial36.isMatch((org.joda.time.ReadablePartial) partial46);
        int[] intArray67 = partial36.getValues();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray34, intArray67, chronology79);
        int int81 = partial5.compareTo((org.joda.time.ReadablePartial) partial80);
        java.lang.String str83 = partial80.toString("[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[]" + "'", str83, "[]");
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.lang.String str22 = partial3.toString("[]");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial24.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = partial24.indexOf(dateTimeFieldType31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial24.minus(readablePeriod34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial35.isSupported(dateTimeFieldType36);
        boolean boolean38 = partial3.equals((java.lang.Object) boolean37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial3.plus(readablePeriod39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = partial3.toString(dateTimeFormatter41);
        java.lang.String str43 = partial3.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        java.lang.String str10 = partial9.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        boolean boolean14 = partial12.equals((java.lang.Object) 0.0f);
        int int15 = partial9.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        org.joda.time.Partial partial17 = partial9.without(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial21.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial21.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = partial29.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial29.plus(readablePeriod45);
        java.lang.String str47 = partial46.toString();
        java.lang.String str48 = partial46.toString();
        int int49 = partial25.compareTo((org.joda.time.ReadablePartial) partial46);
        boolean boolean50 = partial9.isBefore((org.joda.time.ReadablePartial) partial25);
        boolean boolean51 = partial1.equals((java.lang.Object) boolean50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial1.plus(readablePeriod52);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = partial53.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial53);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.lang.String str22 = partial3.toString("[]");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial24.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = partial24.indexOf(dateTimeFieldType31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial24.minus(readablePeriod34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial35.isSupported(dateTimeFieldType36);
        boolean boolean38 = partial3.equals((java.lang.Object) boolean37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial3.plus(readablePeriod39);
        java.lang.String str41 = partial3.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial44 = partial3.with(dateTimeFieldType42, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial3.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property23 = partial3.property(dateTimeFieldType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNull(dateTimeFormatter21);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.lang.String str22 = partial3.toString("[]");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial24.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = partial24.indexOf(dateTimeFieldType31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial24.minus(readablePeriod34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial35.isSupported(dateTimeFieldType36);
        boolean boolean38 = partial3.equals((java.lang.Object) boolean37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial3.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial3.minus(readablePeriod41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        int int47 = partial44.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial44.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = partial44.isSupported(dateTimeFieldType49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = partial44.indexOf(dateTimeFieldType51);
        boolean boolean53 = partial42.equals((java.lang.Object) partial44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial42.getFormatter();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        int[] intArray23 = partial3.getValues();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        boolean boolean28 = partial26.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial26.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.minus(readablePeriod30);
        java.lang.String str32 = partial31.toStringList();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        int int37 = partial34.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial34.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = partial34.isSupported(dateTimeFieldType39);
        java.lang.String str41 = partial34.toStringList();
        java.lang.String str43 = partial34.toString("[]");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        int int51 = partial48.size();
        boolean boolean52 = partial45.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        java.lang.String str55 = partial54.toString();
        int int56 = partial45.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial45.minus(readablePeriod57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial62 = partial45.withPeriodAdded(readablePeriod60, (int) '4');
        boolean boolean63 = partial31.isBefore((org.joda.time.ReadablePartial) partial45);
        java.lang.String str64 = partial31.toString();
        boolean boolean65 = partial24.equals((java.lang.Object) partial31);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial31.plus(readablePeriod66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial31.plus(readablePeriod68);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial32.getFieldTypes();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        boolean boolean40 = partial38.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology41 = partial38.getChronology();
        int[] intArray42 = partial38.getValues();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        boolean boolean46 = partial44.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology47 = partial44.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray42, chronology47);
        org.joda.time.Partial partial49 = partial1.withChronologyRetainFields(chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial57.plus(readablePeriod58);
        int int60 = partial57.size();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        boolean boolean67 = partial57.isMatch((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = partial53.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial53.plus(readablePeriod69);
        java.lang.String str71 = partial70.toString();
        java.lang.String str72 = partial70.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = partial70.getFormatter();
        org.joda.time.Partial partial74 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology75 = partial70.getChronology();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial77.plus(readablePeriod78);
        int int80 = partial77.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray81 = partial77.getFieldTypes();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        boolean boolean85 = partial83.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology86 = partial83.getChronology();
        int[] intArray87 = partial83.getValues();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Partial partial89 = new org.joda.time.Partial(chronology88);
        boolean boolean91 = partial89.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology92 = partial89.getChronology();
        org.joda.time.Partial partial93 = new org.joda.time.Partial(dateTimeFieldTypeArray81, intArray87, chronology92);
        int[] intArray94 = new int[] {};
        org.joda.time.Partial partial95 = new org.joda.time.Partial(dateTimeFieldTypeArray81, intArray94);
        boolean boolean96 = partial70.isAfter((org.joda.time.ReadablePartial) partial95);
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = null;
        int int98 = partial95.indexOf(dateTimeFieldType97);
        boolean boolean99 = partial1.equals((java.lang.Object) dateTimeFieldType97);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        int int16 = partial13.size();
        boolean boolean17 = partial10.isAfter((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        java.lang.String str20 = partial19.toString();
        int int21 = partial10.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = partial19.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        org.joda.time.Partial partial25 = partial19.without(dateTimeFieldType24);
        int[] intArray26 = partial19.getValues();
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial30 = partial27.withField(dateTimeFieldType28, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology54 = partial35.getChronology();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        int int62 = partial59.size();
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        int int67 = partial56.compareTo((org.joda.time.ReadablePartial) partial65);
        int int68 = partial65.size();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        boolean boolean72 = partial70.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = partial70.getFormatter();
        org.joda.time.Chronology chronology74 = partial70.getChronology();
        org.joda.time.Partial partial75 = partial65.withChronologyRetainFields(chronology74);
        int int76 = partial35.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = null;
        java.lang.String str78 = partial65.toString(dateTimeFormatter77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial65.minus(readablePeriod79);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(partial80);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.lang.String str22 = partial3.toString("[]");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial24.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = partial24.indexOf(dateTimeFieldType31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial24.minus(readablePeriod34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial35.isSupported(dateTimeFieldType36);
        boolean boolean38 = partial3.equals((java.lang.Object) boolean37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial3.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial3.minus(readablePeriod41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        int int47 = partial44.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial44.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = partial44.isSupported(dateTimeFieldType49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = partial44.indexOf(dateTimeFieldType51);
        boolean boolean53 = partial42.equals((java.lang.Object) partial44);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial56 = partial42.withField(dateTimeFieldType54, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        java.lang.String str31 = partial30.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        java.lang.String str40 = partial39.toString();
        int int41 = partial30.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = partial3.isSupported(dateTimeFieldType57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial3.plus(readablePeriod59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        int int65 = partial62.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = partial62.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = partial62.isSupported(dateTimeFieldType67);
        java.lang.String str69 = partial62.toStringList();
        java.lang.String str71 = partial62.toString("[]");
        org.joda.time.Chronology chronology72 = partial62.getChronology();
        boolean boolean73 = partial60.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        java.lang.String str76 = partial75.toString();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial78.plus(readablePeriod79);
        int int81 = partial78.size();
        boolean boolean82 = partial75.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        java.lang.String str85 = partial84.toString();
        int int86 = partial75.compareTo((org.joda.time.ReadablePartial) partial84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = null;
        org.joda.time.Partial partial88 = partial75.without(dateTimeFieldType87);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.Partial partial90 = partial88.minus(readablePeriod89);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.Partial partial92 = partial90.minus(readablePeriod91);
        boolean boolean93 = partial62.isEqual((org.joda.time.ReadablePartial) partial92);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[]" + "'", str85, "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial26.withChronologyRetainFields(chronology27);
        java.util.Locale locale30 = null;
        java.lang.String str31 = partial28.toString("[]", locale30);
        boolean boolean32 = partial24.isEqual((org.joda.time.ReadablePartial) partial28);
        int int33 = partial28.size();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial28.plus(readablePeriod34);
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = partial35.toString("hi!", locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(partial35);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        org.joda.time.Partial partial14 = partial1.without(dateTimeFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.minus(readablePeriod15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = partial14.get(dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        org.joda.time.Partial partial14 = partial1.without(dateTimeFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.minus(readablePeriod15);
        org.joda.time.Chronology chronology17 = partial16.getChronology();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int[] intArray25 = partial22.getValues();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        java.lang.String str28 = partial27.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        boolean boolean34 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        int int38 = partial27.compareTo((org.joda.time.ReadablePartial) partial36);
        java.lang.String str39 = partial36.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial36.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray41 = partial36.getFields();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        org.joda.time.Partial partial47 = partial43.without(dateTimeFieldType46);
        org.joda.time.Chronology chronology48 = partial47.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology48);
        org.joda.time.Partial partial51 = partial36.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology48);
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray25, chronology48);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(dateTimeFieldArray41);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(partial51);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial19.withChronologyRetainFields(chronology20);
        java.util.Locale locale23 = null;
        java.lang.String str24 = partial21.toString("[]", locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = partial21.isSupported(dateTimeFieldType25);
        int[] intArray27 = partial21.getValues();
        org.joda.time.Partial partial28 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial36.withChronologyRetainFields(chronology37);
        boolean boolean39 = partial32.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial47.withChronologyRetainFields(chronology48);
        boolean boolean50 = partial43.isAfter((org.joda.time.ReadablePartial) partial47);
        boolean boolean51 = partial32.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial57.plus(readablePeriod58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        java.lang.String str62 = partial61.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int int67 = partial64.size();
        boolean boolean68 = partial61.isAfter((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        java.lang.String str71 = partial70.toString();
        int int72 = partial61.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        int int77 = partial74.size();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial79.plus(readablePeriod80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        boolean boolean84 = partial74.isMatch((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean85 = partial70.isMatch((org.joda.time.ReadableInstant) dateTime83);
        int int86 = partial70.size();
        org.joda.time.Partial partial87 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial70);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial89 = partial87.minus(readablePeriod88);
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.Partial partial91 = new org.joda.time.Partial(chronology90);
        boolean boolean92 = partial87.isMatch((org.joda.time.ReadablePartial) partial91);
        boolean boolean93 = partial57.isAfter((org.joda.time.ReadablePartial) partial91);
        boolean boolean94 = partial32.isMatch((org.joda.time.ReadablePartial) partial91);
        org.joda.time.ReadablePeriod readablePeriod95 = null;
        org.joda.time.Partial partial96 = partial91.plus(readablePeriod95);
        boolean boolean97 = partial21.equals((java.lang.Object) partial91);
        int int98 = partial5.compareTo((org.joda.time.ReadablePartial) partial21);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(partial96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = partial1.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial1.getFormatter();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNull(dateTimeFormatter5);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = partial1.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial17.indexOf(dateTimeFieldType24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial17.minus(readablePeriod27);
        boolean boolean29 = partial1.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial28.withPeriodAdded(readablePeriod30, (int) 'a');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial32.getFieldTypes();
        int[] intArray34 = partial32.getValues();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = partial12.getValue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = partial15.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial15.isSupported(dateTimeFieldType20);
        java.lang.String str22 = partial15.toStringList();
        java.lang.String str24 = partial15.toString("[]");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial28.plus(readablePeriod44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        java.lang.String str48 = partial47.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        boolean boolean54 = partial47.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        int int58 = partial47.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        int int63 = partial60.size();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        boolean boolean70 = partial60.isMatch((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = partial56.isMatch((org.joda.time.ReadableInstant) dateTime69);
        int int72 = partial56.size();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial56.minus(readablePeriod73);
        boolean boolean75 = partial45.isMatch((org.joda.time.ReadablePartial) partial74);
        boolean boolean76 = partial15.isMatch((org.joda.time.ReadablePartial) partial74);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial15.plus(readablePeriod77);
        boolean boolean79 = partial10.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial83 = partial81.plus(readablePeriod82);
        int int84 = partial81.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray85 = partial81.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = null;
        boolean boolean87 = partial81.isSupported(dateTimeFieldType86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        int int89 = partial81.indexOf(dateTimeFieldType88);
        org.joda.time.Partial partial90 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial81);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.Partial partial92 = partial81.minus(readablePeriod91);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = null;
        boolean boolean94 = partial92.isSupported(dateTimeFieldType93);
        boolean boolean95 = partial10.isBefore((org.joda.time.ReadablePartial) partial92);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial3.plus(readablePeriod28);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = partial14.isSupported(dateTimeFieldType77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial14.withPeriodAdded(readablePeriod79, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        int int83 = partial81.indexOf(dateTimeFieldType82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial81.plus(readablePeriod84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType87 = partial81.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(partial85);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial10.getFieldTypes();
        java.lang.String str12 = partial10.toStringList();
        java.lang.String str13 = partial10.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial7.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = partial11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial11.indexOf(dateTimeFieldType18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial11);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial11.minus(readablePeriod21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.minus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial28.toString(dateTimeFormatter44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial28.withPeriodAdded(readablePeriod46, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial28.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial28.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial28.withPeriodAdded(readablePeriod53, (int) (short) 100);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial57.plus(readablePeriod58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        java.lang.String str62 = partial61.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int int67 = partial64.size();
        boolean boolean68 = partial61.isAfter((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        java.lang.String str71 = partial70.toString();
        int int72 = partial61.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        int int77 = partial74.size();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial79.plus(readablePeriod80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        boolean boolean84 = partial74.isMatch((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean85 = partial70.isMatch((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime87 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime88 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean89 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime87);
        int[] intArray90 = partial7.getValues();
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.Partial partial92 = partial7.plus(readablePeriod91);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(partial92);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        boolean boolean6 = partial4.equals((java.lang.Object) 0.0f);
        int int7 = partial1.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        org.joda.time.Partial partial9 = partial1.without(dateTimeFieldType8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        int int23 = partial12.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        boolean boolean35 = partial25.isMatch((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = partial21.isMatch((org.joda.time.ReadableInstant) dateTime34);
        int int37 = partial21.size();
        org.joda.time.Partial partial38 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.minus(readablePeriod39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        boolean boolean43 = partial38.isMatch((org.joda.time.ReadablePartial) partial42);
        java.lang.String str44 = partial42.toStringList();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        boolean boolean51 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType54 = partial1.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        java.lang.String str21 = partial20.toString();
        java.lang.String str22 = partial20.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial20.getFormatter();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology25 = partial24.getChronology();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        java.util.Locale locale8 = null;
        java.lang.String str9 = partial5.toString("[]", locale8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        org.joda.time.Partial partial11 = partial5.without(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial14 = partial5.withField(dateTimeFieldType12, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        org.joda.time.Partial partial16 = partial10.without(dateTimeFieldType15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        java.lang.String str19 = partial18.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        int int24 = partial21.size();
        boolean boolean25 = partial18.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        java.lang.String str28 = partial27.toString();
        int int29 = partial18.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = partial27.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial27.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial27.without(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = partial27.getChronology();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial27.plus(readablePeriod35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial36);
        int int38 = partial36.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = partial36.getFormatter();
        java.lang.String str40 = partial36.toStringList();
        boolean boolean41 = partial10.isBefore((org.joda.time.ReadablePartial) partial36);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial3.getFormatter();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial23.withChronologyRetainFields(chronology24);
        int int26 = partial3.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        org.joda.time.Partial partial28 = partial3.without(dateTimeFieldType27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial28.plus(readablePeriod30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial34 = partial31.with(dateTimeFieldType32, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial31);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial5.plus(readablePeriod6);
        java.lang.String str8 = partial7.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        boolean boolean12 = partial10.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology13 = partial10.getChronology();
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        boolean boolean19 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        boolean boolean28 = partial21.isAfter((org.joda.time.ReadablePartial) partial24);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean33 = partial31.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology34 = partial31.getChronology();
        int[] intArray35 = partial31.getValues();
        java.lang.String str37 = partial31.toString("[]");
        boolean boolean38 = partial14.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = partial42.toString(dateTimeFormatter58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial42.toString(dateTimeFormatter60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        org.joda.time.Partial partial63 = partial42.without(dateTimeFieldType62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        int int71 = partial68.size();
        boolean boolean72 = partial65.isAfter((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        java.lang.String str75 = partial74.toString();
        int int76 = partial65.compareTo((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial78.plus(readablePeriod79);
        int int81 = partial78.size();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial83.plus(readablePeriod84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        boolean boolean88 = partial78.isMatch((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean89 = partial74.isMatch((org.joda.time.ReadableInstant) dateTime87);
        int int90 = partial74.size();
        org.joda.time.Partial partial91 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial74);
        boolean boolean92 = partial42.isEqual((org.joda.time.ReadablePartial) partial74);
        boolean boolean93 = partial14.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology94 = partial14.getChronology();
        org.joda.time.Partial partial95 = partial7.withChronologyRetainFields(chronology94);
        org.joda.time.ReadablePeriod readablePeriod96 = null;
        org.joda.time.Partial partial97 = partial7.minus(readablePeriod96);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType99 = partial97.getFieldType(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[]" + "'", str75, "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertNotNull(partial97);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        java.io.File file2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass3 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        java.lang.Class<?> wildcardClass1 = empiricalDistributionImpl0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        java.io.File file17 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.lang.Class<?> wildcardClass12 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        java.io.File file6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass9 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        java.net.URL uRL6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass10 = list9.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        java.io.File file18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.1509055046861627d + "'", double17 == 1.1509055046861627d);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.lang.Class<?> wildcardClass12 = doubleArray9.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass8 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        int int8 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass9 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass10 = statisticalSummary9.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        java.lang.Class<?> wildcardClass43 = doubleArray41.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass10 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass5 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass3 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL42 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        java.io.File file44 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL19 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.2315429909371047d) + "'", double18 == (-1.2315429909371047d));
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass23 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int8 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        double[] doubleArray13 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl7.load(doubleArray13);
        empiricalDistributionImpl5.load(doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl5.load(doubleArray19);
        empiricalDistributionImpl1.load(doubleArray19);
        java.io.File file22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray17 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl12.load(doubleArray17);
        double[] doubleArray19 = empiricalDistributionImpl12.getUpperBounds();
        int int20 = empiricalDistributionImpl12.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray21);
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        int int14 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass41 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.net.URL uRL38 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        java.io.File file29 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        java.io.File file2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean21 = empiricalDistributionImpl20.isLoaded();
        boolean boolean22 = empiricalDistributionImpl20.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl20.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        java.lang.Class<?> wildcardClass42 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.20838288482222045d + "'", double17 == 0.20838288482222045d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass10 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        empiricalDistributionImpl30.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        java.net.URL uRL49 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        java.io.File file2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        double[] doubleArray44 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl30.load(doubleArray44);
        double[] doubleArray46 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray46);
        java.net.URL uRL48 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int6 = empiricalDistributionImpl5.getBinCount();
        double[] doubleArray8 = new double[] { 100.0d };
        empiricalDistributionImpl5.load(doubleArray8);
        boolean boolean10 = empiricalDistributionImpl5.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl5.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: 0");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.lang.Class<?> wildcardClass38 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass14 = list13.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        java.io.File file7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.lang.Class<?> wildcardClass19 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double double20 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL21 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.957517368578582d + "'", double17 == 0.957517368578582d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.4801400769718567d + "'", double20 == 0.4801400769718567d);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.41616788879320227d + "'", double18 == 0.41616788879320227d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass27 = statisticalSummary26.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass13 = list12.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        int int5 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNull(statisticalSummary6);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary12);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        java.util.List list42 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass43 = list42.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(list42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double double13 = empiricalDistributionImpl1.getNextValue();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.25d + "'", double12 == 0.25d);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.75d + "'", double13 == 0.75d);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        int int5 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        java.lang.Class<?> wildcardClass22 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass12 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass16 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        java.io.File file1 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(list2);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass15 = list14.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass28 = list27.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean21 = empiricalDistributionImpl20.isLoaded();
        boolean boolean22 = empiricalDistributionImpl20.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl20.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        java.lang.Class<?> wildcardClass42 = doubleArray38.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.625472488518716d + "'", double17 == 1.625472488518716d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.75d + "'", double12 == 0.75d);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.lang.Class<?> wildcardClass23 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) -1);
        java.lang.Class<?> wildcardClass2 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        double[] doubleArray47 = new double[] { 100.0d };
        empiricalDistributionImpl44.load(doubleArray47);
        boolean boolean49 = empiricalDistributionImpl44.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary52 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray53 = empiricalDistributionImpl44.getUpperBounds();
        empiricalDistributionImpl42.load(doubleArray53);
        empiricalDistributionImpl1.load(doubleArray53);
        java.net.URL uRL56 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(statisticalSummary51);
        org.junit.Assert.assertNotNull(statisticalSummary52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass4 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass29 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        double[] doubleArray47 = new double[] { 100.0d };
        empiricalDistributionImpl44.load(doubleArray47);
        boolean boolean49 = empiricalDistributionImpl44.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary52 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray53 = empiricalDistributionImpl44.getUpperBounds();
        empiricalDistributionImpl42.load(doubleArray53);
        empiricalDistributionImpl1.load(doubleArray53);
        java.io.File file56 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(statisticalSummary51);
        org.junit.Assert.assertNotNull(statisticalSummary52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        double double22 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.2002382850334656d + "'", double18 == 1.2002382850334656d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0665817752601564d + "'", double22 == 0.0665817752601564d);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass20 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        int int10 = empiricalDistributionImpl1.getBinCount();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray22 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl17.load(doubleArray22);
        double[] doubleArray24 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        double[] doubleArray30 = new double[] { 100.0d };
        empiricalDistributionImpl27.load(doubleArray30);
        empiricalDistributionImpl15.load(doubleArray30);
        double[] doubleArray33 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray33);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL36 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary35);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double double34 = empiricalDistributionImpl23.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl38.getSampleStats();
        double[] doubleArray44 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl38.load(doubleArray44);
        empiricalDistributionImpl36.load(doubleArray44);
        double double47 = empiricalDistributionImpl36.getNextValue();
        double[] doubleArray48 = empiricalDistributionImpl36.getUpperBounds();
        double[] doubleArray49 = empiricalDistributionImpl36.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray49);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        double[] doubleArray66 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl52.load(doubleArray66);
        double[] doubleArray68 = empiricalDistributionImpl52.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray68);
        empiricalDistributionImpl15.load(doubleArray68);
        empiricalDistributionImpl1.load(doubleArray68);
        java.lang.Class<?> wildcardClass72 = doubleArray68.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double47 + "' != '" + 32.0d + "'", double47 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int8 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        double[] doubleArray13 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl7.load(doubleArray13);
        empiricalDistributionImpl5.load(doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl5.load(doubleArray19);
        empiricalDistributionImpl1.load(doubleArray19);
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        double[] doubleArray44 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl30.load(doubleArray44);
        double[] doubleArray46 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray46);
        java.lang.Class<?> wildcardClass48 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass21 = statisticalSummary20.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL28 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        java.io.File file21 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        java.io.File file44 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary10);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        java.io.File file27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass10 = statisticalSummary9.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass11 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        java.util.List list6 = empiricalDistributionImpl1.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0569513371218455d) + "'", double17 == (-0.0569513371218455d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary22);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.lang.Class<?> wildcardClass40 = doubleArray36.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass25 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        java.lang.Class<?> wildcardClass9 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.601723413749385d) + "'", double18 == (-1.601723413749385d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary10);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass22 = list21.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.8026413095437794d) + "'", double17 == (-0.8026413095437794d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int12 = empiricalDistributionImpl11.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl11.getSampleStats();
        double[] doubleArray17 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl11.load(doubleArray17);
        empiricalDistributionImpl9.load(doubleArray17);
        double double20 = empiricalDistributionImpl9.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl24.getSampleStats();
        double[] doubleArray30 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl24.load(doubleArray30);
        empiricalDistributionImpl22.load(doubleArray30);
        double double33 = empiricalDistributionImpl22.getNextValue();
        double[] doubleArray34 = empiricalDistributionImpl22.getUpperBounds();
        double[] doubleArray35 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl9.load(doubleArray35);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        double[] doubleArray54 = empiricalDistributionImpl38.getUpperBounds();
        empiricalDistributionImpl9.load(doubleArray54);
        empiricalDistributionImpl1.load(doubleArray54);
        java.lang.Class<?> wildcardClass57 = doubleArray54.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 32.0d + "'", double20 == 32.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double double15 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL21 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        double[] doubleArray17 = new double[] { 100.0d };
        empiricalDistributionImpl14.load(doubleArray17);
        boolean boolean19 = empiricalDistributionImpl14.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl14.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl14.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double[] doubleArray37 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl23.load(doubleArray37);
        empiricalDistributionImpl14.load(doubleArray37);
        double[] doubleArray40 = empiricalDistributionImpl14.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray50 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl44.load(doubleArray50);
        empiricalDistributionImpl42.load(doubleArray50);
        empiricalDistributionImpl14.load(doubleArray50);
        int int54 = empiricalDistributionImpl14.getBinCount();
        double[] doubleArray55 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray55);
        java.lang.Class<?> wildcardClass57 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.6163381885810326d + "'", double18 == 0.6163381885810326d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(list23);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        int int10 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass11 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass13 = statisticalSummary12.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        java.lang.Class<?> wildcardClass2 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass41 = list40.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file25 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass4 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        int int4 = empiricalDistributionImpl1.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL41 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        java.util.List list8 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list8);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        int int5 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass12 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        java.util.List list8 = empiricalDistributionImpl1.getBinStats();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        double double30 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL31 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.6666666666666666d + "'", double30 == 0.6666666666666666d);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        int int15 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass16 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.2842833913039469d) + "'", double23 == (-1.2842833913039469d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(list27);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        int int18 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL19 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass5 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        int int27 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass28 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.6528159832108509d) + "'", double23 == (-0.6528159832108509d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        double double40 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        double[] doubleArray17 = new double[] { 100.0d };
        empiricalDistributionImpl14.load(doubleArray17);
        boolean boolean19 = empiricalDistributionImpl14.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl14.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl14.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double[] doubleArray37 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl23.load(doubleArray37);
        empiricalDistributionImpl14.load(doubleArray37);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int44 = empiricalDistributionImpl43.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl43.getSampleStats();
        double[] doubleArray49 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl43.load(doubleArray49);
        empiricalDistributionImpl41.load(doubleArray49);
        empiricalDistributionImpl14.load(doubleArray49);
        empiricalDistributionImpl12.load(doubleArray49);
        empiricalDistributionImpl1.load(doubleArray49);
        java.lang.Class<?> wildcardClass55 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNull(statisticalSummary45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass12 = statisticalSummary11.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass10 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl18.getSampleStats();
        double[] doubleArray24 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl18.load(doubleArray24);
        empiricalDistributionImpl16.load(doubleArray24);
        double double27 = empiricalDistributionImpl16.getNextValue();
        double[] doubleArray28 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray28);
        java.lang.Class<?> wildcardClass30 = doubleArray28.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 32.0d + "'", double27 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        double double38 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass39 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double double28 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass29 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        double double44 = empiricalDistributionImpl1.getNextValue();
        java.io.File file45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.3333333333333333d + "'", double44 == 0.3333333333333333d);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL19 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.3333015384251327d + "'", double17 == 0.3333015384251327d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.5314051722929403d + "'", double20 == 0.5314051722929403d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double double20 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass21 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.4734275332021018d) + "'", double17 == (-1.4734275332021018d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.6509793896305173d + "'", double20 == 0.6509793896305173d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int20 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl19.getSampleStats();
        double[] doubleArray25 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl19.load(doubleArray25);
        empiricalDistributionImpl17.load(doubleArray25);
        double double28 = empiricalDistributionImpl17.getNextValue();
        java.util.List list29 = empiricalDistributionImpl17.getBinStats();
        double double30 = empiricalDistributionImpl17.getNextValue();
        int int31 = empiricalDistributionImpl17.getBinCount();
        double[] doubleArray32 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray32);
        java.io.File file34 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 32.0d + "'", double28 == 32.0d);
        org.junit.Assert.assertNotNull(list29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass24 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass11 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        int int56 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl60 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int61 = empiricalDistributionImpl60.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = empiricalDistributionImpl60.getSampleStats();
        double[] doubleArray66 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl60.load(doubleArray66);
        empiricalDistributionImpl58.load(doubleArray66);
        double double69 = empiricalDistributionImpl58.getNextValue();
        double[] doubleArray70 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray70);
        java.net.URL uRL72 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNull(statisticalSummary62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double69 + "' != '" + 32.0d + "'", double69 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 32.0d + "'", double43 == 32.0d);
        org.junit.Assert.assertNotNull(statisticalSummary44);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        int int6 = empiricalDistributionImpl1.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int8 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        double[] doubleArray13 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl7.load(doubleArray13);
        empiricalDistributionImpl5.load(doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl5.load(doubleArray19);
        empiricalDistributionImpl1.load(doubleArray19);
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass23 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(statisticalSummary28);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        int int2 = empiricalDistributionImpl0.getBinCount();
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list6 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(list6);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double double13 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass23 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.44579430043191476d + "'", double18 == 0.44579430043191476d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass27 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        double double19 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass20 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.1289158245536404d) + "'", double18 == (-1.1289158245536404d));
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.3691956395477388d + "'", double19 == 0.3691956395477388d);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass4 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        int int5 = empiricalDistributionImpl1.getBinCount();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.io.File file27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.1754536635550106d + "'", double23 == 1.1754536635550106d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(1000);
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) -1);
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass21 = doubleArray20.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.3686389728467816d) + "'", double17 == (-1.3686389728467816d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass11 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double double34 = empiricalDistributionImpl23.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl38.getSampleStats();
        double[] doubleArray44 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl38.load(doubleArray44);
        empiricalDistributionImpl36.load(doubleArray44);
        double double47 = empiricalDistributionImpl36.getNextValue();
        double[] doubleArray48 = empiricalDistributionImpl36.getUpperBounds();
        double[] doubleArray49 = empiricalDistributionImpl36.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray49);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        double[] doubleArray66 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl52.load(doubleArray66);
        double[] doubleArray68 = empiricalDistributionImpl52.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray68);
        empiricalDistributionImpl15.load(doubleArray68);
        empiricalDistributionImpl1.load(doubleArray68);
        java.net.URL uRL72 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double47 + "' != '" + 32.0d + "'", double47 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass9 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        java.io.File file20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(list5);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.6195194400319222d) + "'", double17 == (-1.6195194400319222d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        int int10 = empiricalDistributionImpl1.getBinCount();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = statisticalSummary2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(list12);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        empiricalDistributionImpl30.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        double double49 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass51 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        double double19 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.6029975990425416d) + "'", double17 == (-1.6029975990425416d));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.10714789360899812d) + "'", double19 == (-0.10714789360899812d));
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        int int10 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        boolean boolean41 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        java.io.File file21 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list20);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        java.io.File file19 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.7508205009871739d) + "'", double17 == (-0.7508205009871739d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary9);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray29 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl24.load(doubleArray29);
        double[] doubleArray31 = empiricalDistributionImpl24.getUpperBounds();
        empiricalDistributionImpl22.load(doubleArray31);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        empiricalDistributionImpl22.load(doubleArray37);
        double[] doubleArray40 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray40);
        java.net.URL uRL42 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray42 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list43 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass44 = list43.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        double[] doubleArray32 = new double[] { 100.0d };
        empiricalDistributionImpl29.load(doubleArray32);
        boolean boolean34 = empiricalDistributionImpl29.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        empiricalDistributionImpl29.load(doubleArray52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl29.load(doubleArray64);
        empiricalDistributionImpl27.load(doubleArray64);
        double[] doubleArray69 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray69);
        java.net.URL uRL71 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        int int56 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray57 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        double[] doubleArray44 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl30.load(doubleArray44);
        double[] doubleArray46 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray46);
        java.io.File file48 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass26 = list25.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray29 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl24.load(doubleArray29);
        double[] doubleArray31 = empiricalDistributionImpl24.getUpperBounds();
        empiricalDistributionImpl22.load(doubleArray31);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        empiricalDistributionImpl22.load(doubleArray37);
        double[] doubleArray40 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray40);
        java.lang.Class<?> wildcardClass42 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray10 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl5.load(doubleArray10);
        double[] doubleArray12 = empiricalDistributionImpl5.getUpperBounds();
        empiricalDistributionImpl3.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        empiricalDistributionImpl3.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl1.load(doubleArray33);
        java.io.File file36 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass28 = list27.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        java.util.List list41 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list41);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((-1));
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        java.util.List list26 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        double[] doubleArray31 = new double[] { 100.0d };
        empiricalDistributionImpl28.load(doubleArray31);
        boolean boolean33 = empiricalDistributionImpl28.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        double[] doubleArray51 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl37.load(doubleArray51);
        empiricalDistributionImpl28.load(doubleArray51);
        double[] doubleArray54 = empiricalDistributionImpl28.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl28.load(doubleArray64);
        empiricalDistributionImpl14.load(doubleArray64);
        int int69 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl71 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl73 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int74 = empiricalDistributionImpl73.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary75 = empiricalDistributionImpl73.getSampleStats();
        double[] doubleArray79 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl73.load(doubleArray79);
        empiricalDistributionImpl71.load(doubleArray79);
        double double82 = empiricalDistributionImpl71.getNextValue();
        double[] doubleArray83 = empiricalDistributionImpl71.getUpperBounds();
        empiricalDistributionImpl14.load(doubleArray83);
        empiricalDistributionImpl1.load(doubleArray83);
        java.net.URL uRL86 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNull(statisticalSummary75);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray22 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl17.load(doubleArray22);
        double[] doubleArray24 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        double[] doubleArray30 = new double[] { 100.0d };
        empiricalDistributionImpl27.load(doubleArray30);
        empiricalDistributionImpl15.load(doubleArray30);
        double[] doubleArray33 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray33);
        int int35 = empiricalDistributionImpl1.getBinCount();
        java.io.File file36 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        java.lang.Class<?> wildcardClass2 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.io.File file17 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        int int5 = empiricalDistributionImpl1.getBinCount();
        int int6 = empiricalDistributionImpl1.getBinCount();
        java.util.List list7 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(list7);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        double[] doubleArray23 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl12.load(doubleArray23);
        empiricalDistributionImpl1.load(doubleArray23);
        double double26 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.75d + "'", double26 == 0.75d);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2167092063909109d + "'", double18 == 0.2167092063909109d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray15 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl10.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl10.getUpperBounds();
        java.util.List list18 = empiricalDistributionImpl10.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double double31 = empiricalDistributionImpl20.getNextValue();
        double[] doubleArray32 = empiricalDistributionImpl20.getUpperBounds();
        double[] doubleArray33 = empiricalDistributionImpl20.getUpperBounds();
        empiricalDistributionImpl10.load(doubleArray33);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl10.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        empiricalDistributionImpl10.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        java.net.URL uRL50 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 32.0d + "'", double31 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        java.lang.Class<?> wildcardClass2 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int20 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl19.getSampleStats();
        double[] doubleArray25 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl19.load(doubleArray25);
        empiricalDistributionImpl17.load(doubleArray25);
        double[] doubleArray31 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl17.load(doubleArray31);
        double double33 = empiricalDistributionImpl17.getNextValue();
        int int34 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean37 = empiricalDistributionImpl36.isLoaded();
        boolean boolean38 = empiricalDistributionImpl36.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl42.getSampleStats();
        double[] doubleArray48 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl42.load(doubleArray48);
        empiricalDistributionImpl40.load(doubleArray48);
        double[] doubleArray54 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl40.load(doubleArray54);
        empiricalDistributionImpl36.load(doubleArray54);
        empiricalDistributionImpl17.load(doubleArray54);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean60 = empiricalDistributionImpl59.isLoaded();
        boolean boolean61 = empiricalDistributionImpl59.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int66 = empiricalDistributionImpl65.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary67 = empiricalDistributionImpl65.getSampleStats();
        double[] doubleArray71 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl65.load(doubleArray71);
        empiricalDistributionImpl63.load(doubleArray71);
        double[] doubleArray77 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl63.load(doubleArray77);
        empiricalDistributionImpl59.load(doubleArray77);
        empiricalDistributionImpl17.load(doubleArray77);
        empiricalDistributionImpl1.load(doubleArray77);
        java.io.File file82 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-0.21029571965074595d) + "'", double33 == (-0.21029571965074595d));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNull(statisticalSummary67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL21 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.45932467324398074d) + "'", double18 == (-0.45932467324398074d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) 'a');
        int int2 = empiricalDistributionImpl1.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double double24 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.9018504465715447d + "'", double17 == 1.9018504465715447d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(list22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.029436198210269392d + "'", double23 == 0.029436198210269392d);
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.08532711066336748d) + "'", double24 == (-0.08532711066336748d));
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        double double38 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL39 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass18 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int8 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        double[] doubleArray13 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl7.load(doubleArray13);
        empiricalDistributionImpl5.load(doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl5.load(doubleArray19);
        empiricalDistributionImpl1.load(doubleArray19);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray29 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl24.load(doubleArray29);
        double[] doubleArray31 = empiricalDistributionImpl24.getUpperBounds();
        int int32 = empiricalDistributionImpl24.getBinCount();
        double[] doubleArray33 = empiricalDistributionImpl24.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray33);
        empiricalDistributionImpl1.load(doubleArray33);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double[] doubleArray37 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl23.load(doubleArray37);
        double double39 = empiricalDistributionImpl23.getNextValue();
        boolean boolean40 = empiricalDistributionImpl23.isLoaded();
        boolean boolean41 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean44 = empiricalDistributionImpl43.isLoaded();
        int int45 = empiricalDistributionImpl43.getBinCount();
        boolean boolean46 = empiricalDistributionImpl43.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        double[] doubleArray51 = new double[] { 100.0d };
        empiricalDistributionImpl48.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl23.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        java.io.File file56 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.324648603374086d + "'", double17 == 0.324648603374086d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.324648603374086d + "'", double39 == 0.324648603374086d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(list17);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(97);
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        java.util.List list41 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass42 = list41.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        int int2 = empiricalDistributionImpl0.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        int int21 = empiricalDistributionImpl1.getBinCount();
        java.io.File file22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray17 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl12.load(doubleArray17);
        double[] doubleArray19 = empiricalDistributionImpl12.getUpperBounds();
        int int20 = empiricalDistributionImpl12.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl10.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl10.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray23);
        int int25 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass12 = list11.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass15 = doubleArray14.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        java.util.List list6 = empiricalDistributionImpl1.getBinStats();
        java.io.File file7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass23 = doubleArray22.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        double double23 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        int int44 = empiricalDistributionImpl1.getBinCount();
        java.util.List list45 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 32.0d + "'", double43 == 32.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(list45);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(statisticalSummary15);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        double[] doubleArray23 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl12.load(doubleArray23);
        empiricalDistributionImpl1.load(doubleArray23);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl29.getSampleStats();
        double[] doubleArray35 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl29.load(doubleArray35);
        empiricalDistributionImpl27.load(doubleArray35);
        double double38 = empiricalDistributionImpl27.getNextValue();
        double[] doubleArray39 = empiricalDistributionImpl27.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        double[] doubleArray44 = new double[] { 100.0d };
        empiricalDistributionImpl41.load(doubleArray44);
        boolean boolean46 = empiricalDistributionImpl41.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl41.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int52 = empiricalDistributionImpl51.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl51.getSampleStats();
        double[] doubleArray57 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl51.load(doubleArray57);
        empiricalDistributionImpl49.load(doubleArray57);
        double double60 = empiricalDistributionImpl49.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl62 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl64 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int65 = empiricalDistributionImpl64.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary66 = empiricalDistributionImpl64.getSampleStats();
        double[] doubleArray70 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl64.load(doubleArray70);
        empiricalDistributionImpl62.load(doubleArray70);
        double double73 = empiricalDistributionImpl62.getNextValue();
        double[] doubleArray74 = empiricalDistributionImpl62.getUpperBounds();
        double[] doubleArray75 = empiricalDistributionImpl62.getUpperBounds();
        empiricalDistributionImpl49.load(doubleArray75);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl78 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl80 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int81 = empiricalDistributionImpl80.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary82 = empiricalDistributionImpl80.getSampleStats();
        double[] doubleArray86 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl80.load(doubleArray86);
        empiricalDistributionImpl78.load(doubleArray86);
        double[] doubleArray92 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl78.load(doubleArray92);
        double[] doubleArray94 = empiricalDistributionImpl78.getUpperBounds();
        empiricalDistributionImpl49.load(doubleArray94);
        empiricalDistributionImpl41.load(doubleArray94);
        empiricalDistributionImpl27.load(doubleArray94);
        empiricalDistributionImpl1.load(doubleArray94);
        java.util.List list99 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(statisticalSummary47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNull(statisticalSummary53);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNull(statisticalSummary66);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double73 + "' != '" + 32.0d + "'", double73 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNull(statisticalSummary82);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0]");
        org.junit.Assert.assertNotNull(list99);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double double27 = empiricalDistributionImpl1.getNextValue();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        double double29 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray30 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass31 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.9072226101087122d) + "'", double23 == (-0.9072226101087122d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNull(statisticalSummary3);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        int int5 = empiricalDistributionImpl1.getBinCount();
        int int6 = empiricalDistributionImpl1.getBinCount();
        java.io.File file7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int71 = empiricalDistributionImpl70.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl70.getSampleStats();
        double[] doubleArray76 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl70.load(doubleArray76);
        empiricalDistributionImpl68.load(doubleArray76);
        double[] doubleArray82 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl68.load(doubleArray82);
        double double84 = empiricalDistributionImpl68.getNextValue();
        boolean boolean85 = empiricalDistributionImpl68.isLoaded();
        boolean boolean86 = empiricalDistributionImpl68.isLoaded();
        double[] doubleArray87 = empiricalDistributionImpl68.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray87);
        java.util.List list89 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl91 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int92 = empiricalDistributionImpl91.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary93 = empiricalDistributionImpl91.getSampleStats();
        double[] doubleArray97 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl91.load(doubleArray97);
        empiricalDistributionImpl1.load(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 32.0d + "'", double62 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNull(statisticalSummary72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-0.4859317178408195d) + "'", double84 == (-0.4859317178408195d));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertNull(statisticalSummary93);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass23 = list22.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass23 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.1863174208028702d) + "'", double18 == (-1.1863174208028702d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass16 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file28 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL28 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(statisticalSummary27);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(list9);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        int int4 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray11 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl6.load(doubleArray11);
        double[] doubleArray13 = empiricalDistributionImpl6.getUpperBounds();
        java.util.List list14 = empiricalDistributionImpl6.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl18.getSampleStats();
        double[] doubleArray24 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl18.load(doubleArray24);
        empiricalDistributionImpl16.load(doubleArray24);
        double double27 = empiricalDistributionImpl16.getNextValue();
        double[] doubleArray28 = empiricalDistributionImpl16.getUpperBounds();
        double[] doubleArray29 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl6.load(doubleArray29);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl6.getSampleStats();
        double[] doubleArray32 = empiricalDistributionImpl6.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: 0");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1L, (-1L), 100, (-0.8026413095437794d) };
        empiricalDistributionImpl1.load(doubleArray69);
        int int71 = empiricalDistributionImpl1.getBinCount();
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL73 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 100.0, -0.8026413095437794]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(list72);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double double34 = empiricalDistributionImpl23.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl38.getSampleStats();
        double[] doubleArray44 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl38.load(doubleArray44);
        empiricalDistributionImpl36.load(doubleArray44);
        double double47 = empiricalDistributionImpl36.getNextValue();
        double[] doubleArray48 = empiricalDistributionImpl36.getUpperBounds();
        double[] doubleArray49 = empiricalDistributionImpl36.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray49);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        double[] doubleArray66 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl52.load(doubleArray66);
        double[] doubleArray68 = empiricalDistributionImpl52.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray68);
        empiricalDistributionImpl15.load(doubleArray68);
        empiricalDistributionImpl1.load(doubleArray68);
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double34 + "' != '" + 32.0d + "'", double34 == 32.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(list72);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        java.io.File file18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(list17);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass11 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass15 = doubleArray14.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        double double44 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.6666666666666666d + "'", double44 == 0.6666666666666666d);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int71 = empiricalDistributionImpl70.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl70.getSampleStats();
        double[] doubleArray76 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl70.load(doubleArray76);
        empiricalDistributionImpl68.load(doubleArray76);
        double[] doubleArray82 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl68.load(doubleArray82);
        double double84 = empiricalDistributionImpl68.getNextValue();
        boolean boolean85 = empiricalDistributionImpl68.isLoaded();
        boolean boolean86 = empiricalDistributionImpl68.isLoaded();
        double[] doubleArray87 = empiricalDistributionImpl68.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray87);
        java.util.List list89 = empiricalDistributionImpl1.getBinStats();
        double double90 = empiricalDistributionImpl1.getNextValue();
        double double91 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNull(statisticalSummary72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.261953081622446d + "'", double84 == 1.261953081622446d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray23 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl18.load(doubleArray23);
        double[] doubleArray25 = empiricalDistributionImpl18.getUpperBounds();
        empiricalDistributionImpl16.load(doubleArray25);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        double[] doubleArray31 = new double[] { 100.0d };
        empiricalDistributionImpl28.load(doubleArray31);
        empiricalDistributionImpl16.load(doubleArray31);
        double[] doubleArray34 = empiricalDistributionImpl16.getUpperBounds();
        double double35 = empiricalDistributionImpl16.getNextValue();
        boolean boolean36 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray37 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int12 = empiricalDistributionImpl11.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl11.getSampleStats();
        double[] doubleArray17 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl11.load(doubleArray17);
        empiricalDistributionImpl9.load(doubleArray17);
        double double20 = empiricalDistributionImpl9.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl24.getSampleStats();
        double[] doubleArray30 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl24.load(doubleArray30);
        empiricalDistributionImpl22.load(doubleArray30);
        double double33 = empiricalDistributionImpl22.getNextValue();
        double[] doubleArray34 = empiricalDistributionImpl22.getUpperBounds();
        double[] doubleArray35 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl9.load(doubleArray35);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        double[] doubleArray54 = empiricalDistributionImpl38.getUpperBounds();
        empiricalDistributionImpl9.load(doubleArray54);
        empiricalDistributionImpl1.load(doubleArray54);
        double double57 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray29 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl24.load(doubleArray29);
        double[] doubleArray31 = empiricalDistributionImpl24.getUpperBounds();
        empiricalDistributionImpl22.load(doubleArray31);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        empiricalDistributionImpl22.load(doubleArray37);
        double[] doubleArray40 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray40);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray48 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl43.load(doubleArray48);
        double[] doubleArray50 = empiricalDistributionImpl43.getUpperBounds();
        int int51 = empiricalDistributionImpl43.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray60 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl55.load(doubleArray60);
        double[] doubleArray62 = empiricalDistributionImpl55.getUpperBounds();
        empiricalDistributionImpl53.load(doubleArray62);
        empiricalDistributionImpl43.load(doubleArray62);
        java.util.List list65 = empiricalDistributionImpl43.getBinStats();
        double[] doubleArray66 = empiricalDistributionImpl43.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray66);
        java.net.URL uRL68 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1L, (-1L), 100, (-0.8026413095437794d) };
        empiricalDistributionImpl1.load(doubleArray69);
        java.io.File file71 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 100.0, -0.8026413095437794]");
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        int int25 = empiricalDistributionImpl14.getBinCount();
        java.util.List list26 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl14.getSampleStats();
        boolean boolean28 = empiricalDistributionImpl14.isLoaded();
        int int29 = empiricalDistributionImpl14.getBinCount();
        boolean boolean30 = empiricalDistributionImpl14.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        int int40 = empiricalDistributionImpl32.getBinCount();
        double[] doubleArray41 = empiricalDistributionImpl32.getUpperBounds();
        int int42 = empiricalDistributionImpl32.getBinCount();
        java.util.List list43 = empiricalDistributionImpl32.getBinStats();
        int int44 = empiricalDistributionImpl32.getBinCount();
        double double45 = empiricalDistributionImpl32.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int48 = empiricalDistributionImpl47.getBinCount();
        double[] doubleArray50 = new double[] { 100.0d };
        empiricalDistributionImpl47.load(doubleArray50);
        boolean boolean52 = empiricalDistributionImpl47.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl47.getSampleStats();
        boolean boolean54 = empiricalDistributionImpl47.isLoaded();
        boolean boolean55 = empiricalDistributionImpl47.isLoaded();
        double[] doubleArray56 = empiricalDistributionImpl47.getUpperBounds();
        empiricalDistributionImpl32.load(doubleArray56);
        empiricalDistributionImpl14.load(doubleArray56);
        empiricalDistributionImpl1.load(doubleArray56);
        java.io.File file60 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(statisticalSummary53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double double20 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass21 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.20309450183056488d) + "'", double18 == (-0.20309450183056488d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.8718342131503566d + "'", double20 == 0.8718342131503566d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass10 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2.0771923268584627d + "'", double18 == 2.0771923268584627d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1L, (-1L), 100, (-0.8026413095437794d) };
        empiricalDistributionImpl1.load(doubleArray69);
        boolean boolean71 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL72 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 100.0, -0.8026413095437794]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double double13 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        double[] doubleArray61 = new double[] { 100.0d };
        empiricalDistributionImpl58.load(doubleArray61);
        boolean boolean63 = empiricalDistributionImpl58.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl58.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl58.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary66 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray67 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl56.load(doubleArray67);
        empiricalDistributionImpl15.load(doubleArray67);
        empiricalDistributionImpl1.load(doubleArray67);
        int int71 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(statisticalSummary64);
        org.junit.Assert.assertNotNull(statisticalSummary65);
        org.junit.Assert.assertNotNull(statisticalSummary66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int6 = empiricalDistributionImpl5.getBinCount();
        double[] doubleArray8 = new double[] { 100.0d };
        empiricalDistributionImpl5.load(doubleArray8);
        boolean boolean10 = empiricalDistributionImpl5.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl5.getSampleStats();
        boolean boolean12 = empiricalDistributionImpl5.isLoaded();
        boolean boolean13 = empiricalDistributionImpl5.isLoaded();
        double double14 = empiricalDistributionImpl5.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray21 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl16.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl16.getUpperBounds();
        int int24 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl5.load(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) -1);
        int int2 = empiricalDistributionImpl1.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        int int26 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.io.File file4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        int int19 = empiricalDistributionImpl1.getBinCount();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.09935770948270027d + "'", double17 == 0.09935770948270027d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(list22);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        java.util.List list56 = empiricalDistributionImpl1.getBinStats();
        java.io.File file57 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list56);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray15 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass16 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        double double7 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass8 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        int int19 = empiricalDistributionImpl1.getBinCount();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass23 = doubleArray22.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.4764797129029188d) + "'", double17 == (-1.4764797129029188d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        java.io.File file28 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 32.0d + "'", double27 == 32.0d);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1L, (-1L), 100, (-0.8026413095437794d) };
        empiricalDistributionImpl1.load(doubleArray69);
        boolean boolean71 = empiricalDistributionImpl1.isLoaded();
        boolean boolean72 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary73 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary74 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 100.0, -0.8026413095437794]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(statisticalSummary73);
        org.junit.Assert.assertNotNull(statisticalSummary74);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(list15);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        int int8 = empiricalDistributionImpl1.getBinCount();
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        empiricalDistributionImpl30.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        boolean boolean49 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL50 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        double double39 = empiricalDistributionImpl1.getNextValue();
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(list40);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        java.io.File file24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.9576925769621689d) + "'", double18 == (-0.9576925769621689d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        java.io.File file22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.10801928247808724d + "'", double18 == 0.10801928247808724d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        java.io.File file22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.43840956787079344d + "'", double17 == 0.43840956787079344d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        int int56 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl60 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int61 = empiricalDistributionImpl60.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = empiricalDistributionImpl60.getSampleStats();
        double[] doubleArray66 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl60.load(doubleArray66);
        empiricalDistributionImpl58.load(doubleArray66);
        double double69 = empiricalDistributionImpl58.getNextValue();
        double[] doubleArray70 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray70);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file73 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNull(statisticalSummary62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(statisticalSummary72);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        int int18 = empiricalDistributionImpl16.getBinCount();
        boolean boolean19 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl23.getSampleStats();
        double[] doubleArray29 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl23.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        double[] doubleArray35 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl21.load(doubleArray35);
        double[] doubleArray37 = empiricalDistributionImpl21.getUpperBounds();
        double double38 = empiricalDistributionImpl21.getNextValue();
        boolean boolean39 = empiricalDistributionImpl21.isLoaded();
        double[] doubleArray40 = empiricalDistributionImpl21.getUpperBounds();
        empiricalDistributionImpl16.load(doubleArray40);
        empiricalDistributionImpl1.load(doubleArray40);
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.3063937453085126d + "'", double38 == 1.3063937453085126d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        java.io.File file2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        double[] doubleArray44 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl30.load(doubleArray44);
        double[] doubleArray46 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray46);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int50 = empiricalDistributionImpl49.getBinCount();
        double[] doubleArray52 = new double[] { 100.0d };
        empiricalDistributionImpl49.load(doubleArray52);
        boolean boolean54 = empiricalDistributionImpl49.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl49.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl49.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl60 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int61 = empiricalDistributionImpl60.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = empiricalDistributionImpl60.getSampleStats();
        double[] doubleArray66 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl60.load(doubleArray66);
        empiricalDistributionImpl58.load(doubleArray66);
        double[] doubleArray72 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl58.load(doubleArray72);
        empiricalDistributionImpl49.load(doubleArray72);
        double[] doubleArray75 = empiricalDistributionImpl49.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl77 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl79 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int80 = empiricalDistributionImpl79.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary81 = empiricalDistributionImpl79.getSampleStats();
        double[] doubleArray85 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl79.load(doubleArray85);
        empiricalDistributionImpl77.load(doubleArray85);
        double double88 = empiricalDistributionImpl77.getNextValue();
        double[] doubleArray89 = empiricalDistributionImpl77.getUpperBounds();
        empiricalDistributionImpl49.load(doubleArray89);
        empiricalDistributionImpl1.load(doubleArray89);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(statisticalSummary56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNull(statisticalSummary62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNull(statisticalSummary81);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.0d + "'", double88 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        java.io.File file10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(list9);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '4');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        int int23 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass24 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        int int27 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL28 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.9222631073958558d) + "'", double23 == (-0.9222631073958558d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int10 = empiricalDistributionImpl9.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl9.getSampleStats();
        double[] doubleArray15 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl9.load(doubleArray15);
        empiricalDistributionImpl7.load(doubleArray15);
        double[] doubleArray21 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl7.load(doubleArray21);
        empiricalDistributionImpl1.load(doubleArray21);
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        java.io.File file25 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list24);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int71 = empiricalDistributionImpl70.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl70.getSampleStats();
        double[] doubleArray76 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl70.load(doubleArray76);
        empiricalDistributionImpl68.load(doubleArray76);
        double[] doubleArray82 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl68.load(doubleArray82);
        double double84 = empiricalDistributionImpl68.getNextValue();
        boolean boolean85 = empiricalDistributionImpl68.isLoaded();
        boolean boolean86 = empiricalDistributionImpl68.isLoaded();
        double[] doubleArray87 = empiricalDistributionImpl68.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray87);
        java.io.File file89 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNull(statisticalSummary72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.38345830088159283d + "'", double84 == 0.38345830088159283d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        int int21 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray30 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl25.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray32);
        empiricalDistributionImpl13.load(doubleArray32);
        java.util.List list35 = empiricalDistributionImpl13.getBinStats();
        double[] doubleArray36 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        boolean boolean38 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL39 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list17);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) 'a');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int5 = empiricalDistributionImpl4.getBinCount();
        double[] doubleArray7 = new double[] { 100.0d };
        empiricalDistributionImpl4.load(doubleArray7);
        boolean boolean9 = empiricalDistributionImpl4.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl4.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl4.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        double[] doubleArray27 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl13.load(doubleArray27);
        empiricalDistributionImpl4.load(doubleArray27);
        double[] doubleArray30 = empiricalDistributionImpl4.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        empiricalDistributionImpl4.load(doubleArray40);
        int int44 = empiricalDistributionImpl4.getBinCount();
        double[] doubleArray45 = empiricalDistributionImpl4.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray45);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(list4);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray15 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl10.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl10.getUpperBounds();
        int int18 = empiricalDistributionImpl10.getBinCount();
        double[] doubleArray19 = empiricalDistributionImpl10.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray19);
        java.io.File file21 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        int int28 = empiricalDistributionImpl1.getBinCount();
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass30 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        double double28 = empiricalDistributionImpl1.getNextValue();
        int int29 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary30);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        double[] doubleArray47 = new double[] { 100.0d };
        empiricalDistributionImpl44.load(doubleArray47);
        boolean boolean49 = empiricalDistributionImpl44.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl44.getSampleStats();
        boolean boolean51 = empiricalDistributionImpl44.isLoaded();
        boolean boolean52 = empiricalDistributionImpl44.isLoaded();
        java.util.List list53 = empiricalDistributionImpl44.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray60 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl55.load(doubleArray60);
        double[] doubleArray62 = empiricalDistributionImpl55.getUpperBounds();
        int int63 = empiricalDistributionImpl55.getBinCount();
        double[] doubleArray64 = empiricalDistributionImpl55.getUpperBounds();
        empiricalDistributionImpl44.load(doubleArray64);
        empiricalDistributionImpl1.load(doubleArray64);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        java.io.File file10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        boolean boolean1 = empiricalDistributionImpl0.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        int int9 = empiricalDistributionImpl1.getBinCount();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        int int56 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl60 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int61 = empiricalDistributionImpl60.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = empiricalDistributionImpl60.getSampleStats();
        double[] doubleArray66 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl60.load(doubleArray66);
        empiricalDistributionImpl58.load(doubleArray66);
        double double69 = empiricalDistributionImpl58.getNextValue();
        double[] doubleArray70 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray70);
        int int72 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNull(statisticalSummary62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double69 + "' != '" + 32.0d + "'", double69 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5399753772126499d + "'", double17 == 0.5399753772126499d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        double double22 = empiricalDistributionImpl1.getNextValue();
        int int23 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.24055689336827368d + "'", double18 == 0.24055689336827368d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.9628177723544675d) + "'", double22 == (-0.9628177723544675d));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary24);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass10 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNull(statisticalSummary4);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        double double9 = empiricalDistributionImpl1.getNextValue();
        int int10 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        double[] doubleArray15 = new double[] { 100.0d };
        empiricalDistributionImpl12.load(doubleArray15);
        double double17 = empiricalDistributionImpl12.getNextValue();
        boolean boolean18 = empiricalDistributionImpl12.isLoaded();
        double[] doubleArray19 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray19);
        java.lang.Class<?> wildcardClass21 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        int int23 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean16 = empiricalDistributionImpl15.isLoaded();
        boolean boolean17 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray27 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl21.load(doubleArray27);
        empiricalDistributionImpl19.load(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl19.load(doubleArray33);
        empiricalDistributionImpl15.load(doubleArray33);
        double[] doubleArray36 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        boolean boolean38 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(statisticalSummary39);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        double double18 = empiricalDistributionImpl1.getNextValue();
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(list19);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int7 = empiricalDistributionImpl6.getBinCount();
        double[] doubleArray9 = new double[] { 100.0d };
        empiricalDistributionImpl6.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL43 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(statisticalSummary42);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray24 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl19.load(doubleArray24);
        double[] doubleArray26 = empiricalDistributionImpl19.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray26);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray32 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl27.load(doubleArray32);
        double[] doubleArray34 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl25.load(doubleArray34);
        empiricalDistributionImpl15.load(doubleArray34);
        java.util.List list37 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl15.getSampleStats();
        double double39 = empiricalDistributionImpl15.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int44 = empiricalDistributionImpl43.getBinCount();
        double[] doubleArray46 = new double[] { 100.0d };
        empiricalDistributionImpl43.load(doubleArray46);
        boolean boolean48 = empiricalDistributionImpl43.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl43.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl43.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        double[] doubleArray66 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl52.load(doubleArray66);
        empiricalDistributionImpl43.load(doubleArray66);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl72 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int73 = empiricalDistributionImpl72.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary74 = empiricalDistributionImpl72.getSampleStats();
        double[] doubleArray78 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl72.load(doubleArray78);
        empiricalDistributionImpl70.load(doubleArray78);
        empiricalDistributionImpl43.load(doubleArray78);
        empiricalDistributionImpl41.load(doubleArray78);
        double[] doubleArray83 = empiricalDistributionImpl41.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray83);
        empiricalDistributionImpl1.load(doubleArray83);
        java.lang.Class<?> wildcardClass86 = doubleArray83.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(statisticalSummary38);
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.75d + "'", double39 == 0.75d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(statisticalSummary49);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNull(statisticalSummary74);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        int int15 = empiricalDistributionImpl1.getBinCount();
        java.io.File file16 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(statisticalSummary4);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        double[] doubleArray15 = new double[] { 100.0d };
        empiricalDistributionImpl12.load(doubleArray15);
        boolean boolean17 = empiricalDistributionImpl12.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl12.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl12.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl23.getSampleStats();
        double[] doubleArray29 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl23.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        double[] doubleArray35 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl21.load(doubleArray35);
        empiricalDistributionImpl12.load(doubleArray35);
        double[] doubleArray38 = empiricalDistributionImpl12.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl42.getSampleStats();
        double[] doubleArray48 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl42.load(doubleArray48);
        empiricalDistributionImpl40.load(doubleArray48);
        double double51 = empiricalDistributionImpl40.getNextValue();
        double[] doubleArray52 = empiricalDistributionImpl40.getUpperBounds();
        empiricalDistributionImpl12.load(doubleArray52);
        double[] doubleArray54 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray54);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        empiricalDistributionImpl30.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        double double49 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean51 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl29.getSampleStats();
        double[] doubleArray35 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl29.load(doubleArray35);
        empiricalDistributionImpl27.load(doubleArray35);
        double[] doubleArray41 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl27.load(doubleArray41);
        empiricalDistributionImpl1.load(doubleArray41);
        java.io.File file44 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 1.0]");
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(32);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double double22 = empiricalDistributionImpl6.getNextValue();
        boolean boolean23 = empiricalDistributionImpl6.isLoaded();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        java.util.List list26 = empiricalDistributionImpl6.getBinStats();
        double[] doubleArray27 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.7459953647842268d) + "'", double22 == (-0.7459953647842268d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.00683036136288d) + "'", double18 == (-1.00683036136288d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl29.getSampleStats();
        double[] doubleArray35 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl29.load(doubleArray35);
        empiricalDistributionImpl27.load(doubleArray35);
        double[] doubleArray41 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl27.load(doubleArray41);
        empiricalDistributionImpl1.load(doubleArray41);
        double double44 = empiricalDistributionImpl1.getNextValue();
        java.io.File file45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        int int24 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.7475890654457242d + "'", double18 == 0.7475890654457242d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        int int25 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        double[] doubleArray30 = new double[] { 100.0d };
        empiricalDistributionImpl27.load(doubleArray30);
        boolean boolean32 = empiricalDistributionImpl27.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl27.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl27.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray36 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1L, (-1L), 100, (-0.8026413095437794d) };
        empiricalDistributionImpl1.load(doubleArray69);
        boolean boolean71 = empiricalDistributionImpl1.isLoaded();
        boolean boolean72 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary73 = empiricalDistributionImpl1.getSampleStats();
        double double74 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass75 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 100.0, -0.8026413095437794]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(statisticalSummary73);
// flaky:         org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.1445971992219987d) + "'", double74 == (-0.1445971992219987d));
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass12 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass13 = list12.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray42 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file43 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean16 = empiricalDistributionImpl15.isLoaded();
        boolean boolean17 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray27 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl21.load(doubleArray27);
        empiricalDistributionImpl19.load(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl19.load(doubleArray33);
        empiricalDistributionImpl15.load(doubleArray33);
        double[] doubleArray36 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        int int38 = empiricalDistributionImpl1.getBinCount();
        java.io.File file39 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int20 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl19.getSampleStats();
        double[] doubleArray25 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl19.load(doubleArray25);
        empiricalDistributionImpl17.load(doubleArray25);
        double[] doubleArray31 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl17.load(doubleArray31);
        double double33 = empiricalDistributionImpl17.getNextValue();
        int int34 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean37 = empiricalDistributionImpl36.isLoaded();
        boolean boolean38 = empiricalDistributionImpl36.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl42.getSampleStats();
        double[] doubleArray48 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl42.load(doubleArray48);
        empiricalDistributionImpl40.load(doubleArray48);
        double[] doubleArray54 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl40.load(doubleArray54);
        empiricalDistributionImpl36.load(doubleArray54);
        empiricalDistributionImpl17.load(doubleArray54);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean60 = empiricalDistributionImpl59.isLoaded();
        boolean boolean61 = empiricalDistributionImpl59.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int66 = empiricalDistributionImpl65.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary67 = empiricalDistributionImpl65.getSampleStats();
        double[] doubleArray71 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl65.load(doubleArray71);
        empiricalDistributionImpl63.load(doubleArray71);
        double[] doubleArray77 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl63.load(doubleArray77);
        empiricalDistributionImpl59.load(doubleArray77);
        empiricalDistributionImpl17.load(doubleArray77);
        empiricalDistributionImpl1.load(doubleArray77);
        java.lang.Class<?> wildcardClass82 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-0.30560538157209366d) + "'", double33 == (-0.30560538157209366d));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNull(statisticalSummary67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass27 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        int int6 = empiricalDistributionImpl1.getBinCount();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.8707802745155523d) + "'", double18 == (-0.8707802745155523d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        int int10 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass26 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass28 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass28 = doubleArray27.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        double double39 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass40 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass11 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass11 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass21 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        empiricalDistributionImpl1.load(doubleArray22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        double double15 = empiricalDistributionImpl1.getNextValue();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass17 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.6410752708527153d + "'", double15 == 0.6410752708527153d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        int int24 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray25 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double double27 = empiricalDistributionImpl1.getNextValue();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        double double29 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file31 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.1374774320860603d + "'", double23 == 1.1374774320860603d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(statisticalSummary30);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray45 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.io.File file27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(statisticalSummary12);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL25 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(list24);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL19 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.8527370622170564d + "'", double17 == 0.8527370622170564d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.lang.Class<?> wildcardClass12 = doubleArray9.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass22 = list21.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.722275864443457d + "'", double18 == 1.722275864443457d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray15 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl10.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl10.getUpperBounds();
        int int18 = empiricalDistributionImpl10.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray25 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl20.load(doubleArray25);
        double[] doubleArray27 = empiricalDistributionImpl20.getUpperBounds();
        empiricalDistributionImpl10.load(doubleArray27);
        empiricalDistributionImpl1.load(doubleArray27);
        java.lang.Class<?> wildcardClass30 = doubleArray27.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        int int45 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL46 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        int int25 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary26);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int18 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl17.getSampleStats();
        double[] doubleArray23 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl17.load(doubleArray23);
        int int25 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl17.getSampleStats();
        double[] doubleArray27 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        java.lang.Class<?> wildcardClass29 = doubleArray27.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNotNull(list5);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1L, (-1L), 100, (-0.8026413095437794d) };
        empiricalDistributionImpl1.load(doubleArray69);
        java.net.URL uRL71 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 100.0, -0.8026413095437794]");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        int int19 = empiricalDistributionImpl1.getBinCount();
        java.io.File file20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5973319875516339d + "'", double18 == 0.5973319875516339d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL5 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        java.io.File file24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        double double23 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.7009526285671899d) + "'", double18 == (-1.7009526285671899d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(list22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.21759972170899455d) + "'", double23 == (-0.21759972170899455d));
    }
}
